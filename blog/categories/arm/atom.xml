<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arm | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/arm/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-10-27T02:38:57-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gcc 4.9 Is Out With Arm Enhancements]]></title>
    <link href="http://sushihangover.github.io/gcc-4-dot-9-is-out-with-arm-enhancements/"/>
    <updated>2014-04-22T18:35:15-07:00</updated>
    <id>http://sushihangover.github.io/gcc-4-dot-9-is-out-with-arm-enhancements</id>
    <content type="html"><![CDATA[<p>GCC 4.9 is out with in the wild now with a long list of ARM enhancements. I&rsquo;m hoping to look at into a few of the items on their <a href="http://gcc.gnu.org/gcc-4.9/changes.html">change/log list</a>.</p>

<p>One of them is the &ldquo;<strong>-mslow-flash-data</strong>&rdquo;, I&rsquo;m really interested in what they are doing when this option is used. Using QEMU and LLVM I create variable and function usage maps during the last stage of speed optimizations and tag the high use items to be moved to RX to any remaining XRW (RAM) during startup in the reset_handler (would really be nice to burn that routine in the feedback loop of the LLVM profiler, need to create perf records that could be fed to the <a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-April/072138.html">LLVM AutoFDO Converter</a> that Google did and have it spew out &lsquo;linker scriptets&rsquo;&hellip;. too many ideas, not enough time at get them all done ;-)</p>

<p>So what is listed in the man for &ldquo;-mslow-flash-data&rdquo; is:
<strong>Assume loading data from flash is slower than fetching instruction. Therefore literal load is minimized for better performance. This option is only supported when compiling for ARMv7 M-profile and off by default.</strong></p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Getting it compiled on OS-X proved to be a pain as I do not have a native build of GCC, just clang acting as gcc, and could not get a  ARM-NONE-EABI 4.9.0 version built using clang. One of the issues that I could not work around was:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clang: error: unsupported option &lsquo;-static-libgcc&rsquo;</span></code></pre></td></tr></table></div></figure>
Well, duh&hellip;, clang does not support that option, but not clear on why that is showing up under the 4.9.0 build using the same configure options as 4.8.x. Manually hacking on the make files to get passed this and I ended up getting into other issues, so I give up and built an OS-X &lsquo;native&rsquo; gcc that I then used to build the ARM-NONE-EABI cross-compiler to get around the orginal &ldquo;-static-libgcc&rdquo; issue. Never had any problems doing a &ldquo;make all-gcc&rdquo; or &ldquo;make all&rdquo; to build gcc 4.8.x with clang->gcc before.</p>

<p>So I build a native version on the master branch (4.10.x now):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gcc &ndash;version
</span><span class='line'>gcc (GCC) 4.10.0 20140422 (experimental)
</span><span class='line'>Copyright &copy; 2014 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the source for copying conditions.  There is NO
</span><span class='line'>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></code></pre></td></tr></table></div></figure></p>

<p>And then used that to build my arm-none-eabi cross-compiler,  yep, living on the bleeding edge with gcc and LLVM ;-)
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./arm-none-eabi-gcc &ndash;version
</span><span class='line'>arm-none-eabi-gcc (GCC) 4.10.0 20140422 (experimental)
</span><span class='line'>Copyright &copy; 2014 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the source for copying conditions.  There is NO
</span><span class='line'>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</span><span class='line'>&hellip;
</span><span class='line'>  Known ARM architectures (for use with the -march= option):
</span><span class='line'>    armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5e armv5t armv5te armv6
</span><span class='line'>    armv6-m armv6j armv6k armv6s-m armv6t2 armv6z armv6zk armv7 armv7-a armv7-m
</span><span class='line'>    armv7-r armv7e-m armv7ve armv8-a armv8-a+crc iwmmxt iwmmxt2 native
</span><span class='line'>&hellip;</span></code></pre></td></tr></table></div></figure></p>

<p>FYI: I&rsquo;m on OS-X 10.9.2:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Software  OS X 10.9.2 (13C64)
</span><span class='line'>clang &ndash;version
</span><span class='line'>Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
</span><span class='line'>gcc &ndash;version
</span><span class='line'>Configured with: &ndash;prefix=/Applications/Xcode.app/Contents/Developer/usr &ndash;with-gxx-include-dir=/usr/include/c++/4.2.1
</span><span class='line'>Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
</span><span class='line'>Target: x86_64-apple-darwin13.1.0
</span><span class='line'>Thread model: posix</span></code></pre></td></tr></table></div></figure></p>

<p>ARM enhancements from the change list include:</p>

<ul>
<li><strong>ARM:</strong></li>
<li>Use of Advanced SIMD (Neon) for 64-bit scalar computations has been disabled by default. This was found to generate better code in only a small number of cases. It can be turned back on with the -mneon-for-64bits option.</li>
<li>Further support for the ARMv8-A architecture, notably implementing the restriction around IT blocks in the Thumb32 instruction set has been added. The -mrestrict-it option can be used with -march=armv7-a or the -march=armv7ve options to make code generation fully compatible with the deprecated instructions in ARMv8-A.</li>
<li>Support has now been added for the ARMv7ve variant of the architecture. This can be used by the -march=armv7ve option.</li>
<li>The ARMv8-A crypto and CRC instructions are now supported through intrinsics and are available through the -march=armv8-a+crc and mfpu=crypto-neon-fp-armv8 options.</li>
<li>LRA is now on by default for the ARM target. This can be turned off using the -mno-lra option. This option is purely transitionary command line option and will be removed in a future release. We are interested in any bug reports regarding functional and performance regressions with LRA.</li>
<li><strong>A new option -mslow-flash-data to improve performance of programs fetching data on slow flash memory has now been introduced for the ARMv7-M profile cores.</strong></li>
<li>A new option -mpic-data-is-text-relative for targets that allows data segments to be relative to text segments has been added. This is on by default for all targets except VxWorks RTP.</li>
<li>A number of infrastructural changes have been made to both the ARM and AArch64 backends to facilitate improved code-generation.</li>
<li>GCC now supports Cortex-A12 and the Cortex-R7 through the -mcpu=cortex-a12 and -mcpu=cortex-r7 options.</li>
<li>GCC now has tuning for the Cortex-A57 and Cortex-A53 through the -mcpu=cortex-a57 and -mcpu=cortex-a53 options.
Initial big.LITTLE tuning support for the combination of Cortex-A57 and Cortex-A53 was added through the -mcpu=cortex-a57.cortex-a53 option. Similar support was added for the combination of Cortex-A15 and Cortex-A7 through the -mcpu=cortex-a15.cortex-a7 option.</li>
<li>Further performance optimizations for the Cortex-A15 and the Cortex-M4 have been added.</li>
<li><p><strong> A number of code generation improvements for Thumb2 to reduce code size when compiling for the M-profile processors.</strong></p></li>
<li><p><strong>AArch64:</strong></p></li>
<li>The ARMv8-A crypto and CRC instructions are now supported through intrinsics. These are enabled when the architecture supports these and are available through the -march=armv8-a+crc and -march=armv8-a+crypto options.</li>
<li>Initial support for ILP32 has now been added to the compiler. This is now available through the command line option -mabi=ilp32. + Support for ILP32 is considered experimental as the ABI specification is still beta.</li>
<li>Coverage of more of the ISA including the SIMD extensions has been added. The Advanced SIMD intrinsics have also been improved.</li>
<li>The new local register allocator (LRA) is now on by default for the AArch64 backend.</li>
<li>The REE (Redundant extension elimination) pass has now been enabled by default for the AArch64 backend.</li>
<li>Tuning for the Cortex-A53 and Cortex-A57 has been improved.</li>
<li>Initial big.LITTLE tuning support for the combination of Cortex-A57 and Cortex-A53 was added through the -mcpu=cortex-a57.cortex-a53 option.</li>
<li>A number of structural changes have been made to both the ARM and AArch64 backends to facilitate improved code-generation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qemu 2.0.0 Is Released (Or Maybe 1.7.9)]]></title>
    <link href="http://sushihangover.github.io/qemu-2-dot-0-0-is-released-as-1-dot-7-9/"/>
    <updated>2014-04-17T23:20:36-07:00</updated>
    <id>http://sushihangover.github.io/qemu-2-dot-0-0-is-released-as-1-dot-7-9</id>
    <content type="html"><![CDATA[<p><a href="http://wiki.qemu.org/Main_Page"><img class="left" src="/images/QEMU_logo.png" title="&ldquo;QEMU&rdquo;" ></a> QEMU 2.0.0 is now <a href="http://lists.nongnu.org/archive/html/qemu-devel/2014-04/msg02734.html">released</a>.</p>

<p>The full list of changes are available at: <a href="http://wiki.qemu.org/ChangeLog/2.0">http://wiki.qemu.org/ChangeLog/2.0</a></p>

<p>It appears that doing a checkout of tag &lsquo;v2.0.0&rsquo;, build and install will produce a binary that reports version 1.7.9</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status
</span><span class='line'>HEAD detached at v2.0.0
</span><span class='line'>nothing to commit, working directory clean
</span><span class='line'>qemu-system-arm &ndash;version
</span><span class='line'>QEMU emulator version 1.7.93, Copyright &copy; 2003-2008 Fabrice Bellard</span></code></pre></td></tr></table></div></figure></p>

<p>I did a quick look and they are pulling the version during the ./configure stage so since I am always on the master (bleed-edge) branch, my installed version shows up as 1.7.9. You will need to checkout, <strong>configure</strong>, build and install to produce a binary that has the correct version (<del>QEMUVERSION</del>) assigned:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-arm &ndash;version
</span><span class='line'>QEMU emulator version 2.0.0, Copyright &copy; 2003-2008 Fabrice Bellard</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[$30 60 Msps Logic Analyzer   Logic Pirate]]></title>
    <link href="http://sushihangover.github.io/0-60msps-logic-analyzer/"/>
    <updated>2014-04-15T20:16:37-07:00</updated>
    <id>http://sushihangover.github.io/0-60msps-logic-analyzer</id>
    <content type="html"><![CDATA[<p><a href="http://http://dangerousprototypes.com"><img class="left" src="/images/dangerous_logo.png" title="&ldquo;Dangerous Prototypes&rdquo;" ></a> I do not do a lot of product promotions, but this Logic Analyser from Dangerous Prototypes is so sweet! It is such a simple hardware design, pulled together with some great programming and serial ram overclocking. For $30USD you get an 8 channel, 256k sample, 60 Mhz(!!! - overclocked) logic analyser that supports the SUMP logic analyzer protocol and thus can use the Logic Sniffer (An alternative OLS client), another great open source product.</p>

<p>This item is on my list now for future debugging of my bare-metal ARM designs.</p>

<p>So check it out yourself:</p>

<p>DP Blog post: <a href="http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/">http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/</a></p>

<p>Product page: <a href="http://dangerousprototypes.com/docs/Logic_Pirate">http://dangerousprototypes.com/docs/Logic_Pirate</a></p>

<p>Available from Seeed @ <a href="http://www.seeedstudio.com/depot/Logic-Pirate-p-1750.html">http://www.seeedstudio.com/depot/Logic-Pirate-p-1750.html</a></p>

<p>Client Software: <a href="http://www.lxtreme.nl/ols/">Logic Sniffer (An alternative OLS client)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Llvm 3.4.1]]></title>
    <link href="http://sushihangover.github.io/llvm-3-dot-4-1/"/>
    <updated>2014-04-12T06:05:07-07:00</updated>
    <id>http://sushihangover.github.io/llvm-3-dot-4-1</id>
    <content type="html"><![CDATA[<p><a href="http://heartbleed.com"><img class="left" src="/images/llvm_logo_small.png" title="&ldquo;LLVM&rdquo;" ></a>Point releases are coming to the <a href="http://www.llvm.org">LLVM</a> compiler infrastructure with the LLVM 3.4.1 release just a few days away.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>The official LLVM 3.4.1 release is planned for 4-18 assuming that all of the testing goes well. Details for testing can be found via the<a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-April/072066.html"> LLVM mailing list</a>.</p>

<p>I am staying on the bleeding-edge for my bare metal ARM work, so I will continue to stay on the master branch (3.5.0):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./clang &ndash;version
</span><span class='line'>clang version 3.5.0
</span><span class='line'>Target: arm-none&ndash;eabi
</span><span class='line'>Thread model: posix</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arm: Llvm And Why No Gpl]]></title>
    <link href="http://sushihangover.github.io/arm-llvm-and-why-no-gpl/"/>
    <updated>2014-04-11T07:28:16-07:00</updated>
    <id>http://sushihangover.github.io/arm-llvm-and-why-no-gpl</id>
    <content type="html"><![CDATA[<p>As a follow up to my last post about ARM&rsquo;s annoucement concerning their move to clang/LLVM.</p>

<p>Seems that more of the GPL-only mindset are upset that ARM is another company that is picking up and carrying the LLVM torch for their future development activities.</p>

<p>My take on it is it is a good thing, something they could not do with GCC without violating the GPL license that they would have to follow.  Clang/LLVM is licensed with a BSD-style license and not wanting to get in to a religious war over open source licensing, their LLVM selection and thus license choice allows them to keep things proprietary while working on new designs and code and releasing that to development partners like they currently do with their in-house ARM/Keli development environment. Then there is the problem of linking and including non-open code in end-user projects if they would have chosen GCC, this is a non-trivial problem for private and public companies dealing with IP that has extreme competition.</p>

<p>As ARM&rsquo;s new designs become public, they can then push LLVM changes to the public branch and, we as end-users, then get to enjoy the benefits of what they can release. Will there be code components that they alway keep private and/or charge for in their commerical &lsquo;ulitmate&rsquo; compiler version, maybe, but the code that does make it to the git repo will be vetted by the company that actually produces the MCU designs. Good enough for me, GPL be damned in this case&hellip;</p>
]]></content>
  </entry>
  
</feed>
