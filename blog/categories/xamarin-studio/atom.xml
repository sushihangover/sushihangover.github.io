<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xamarin studio | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/xamarin-studio/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-18T14:30:30-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MonoDevelop.AddinMaker - CI Build and Install .mpack]]></title>
    <link href="http://sushihangover.github.io/monodevelop-dot-addinmaker-build-and-install-mpack/"/>
    <updated>2015-11-08T11:54:48-08:00</updated>
    <id>http://sushihangover.github.io/monodevelop-dot-addinmaker-build-and-install-mpack</id>
    <content type="html"><![CDATA[<p>Using mhutch/MonoDevelop.AddinMaker to create your Addins? If not, you should convert your Addin Project (see his &ldquo;Migrating Existing Projects&rdquo; notes in the repo&rsquo;s <a href="https://github.com/mhutch/MonoDevelop.AddinMaker/blob/master/README.md">README.md</a> file)</p>

<p>Need to intergate building, creating the <code>.mpack</code>, and installing it into Xamarin Studio into your CI process?</p>

<h3>Package your Addin to a .mpack file</h3>

<p><code>xbuild PlayScript.Addin.csproj /t:CreatePackage</code></p>

<h3>Install your .mpack</h3>

<p><code>mdtool setup install bin/Debug/PlayScript.Addin.PlayScript.Addin_1.0.mpack</code></p>

<p>FYI: Using <a href="https://github.com/mhutch/MonoDevelop.AddinMaker">mhutch/MonoDevelop.AddinMaker</a> makes developing and debugging Addins so much easier, there is still a <strong>huge</strong> documention gap in the MonoDevelop Addin system, but M. Hutch&rsquo;s AddinMaker sure helps a ton (thanks mhutch!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin OS-X Addins Location]]></title>
    <link href="http://sushihangover.github.io/xamarin-os-x-addins-location/"/>
    <updated>2015-11-08T09:59:55-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-os-x-addins-location</id>
    <content type="html"><![CDATA[<p>In the process of working on an Xamarin Studio Language Addin for PlayScript I needed to to manually find and update some of the installed Addin files. But where are the Addin files?</p>

<p>Within the <code>~/Library/Application Support</code> directory you will find one based on the version of Xamarin Studio or Monodevelop that you are using:</p>

<ul>
<li><code>MonoDevelop-4.0</code></li>
<li><code>MonoDevelop-5.0</code></li>
<li><code>MonoDevelop-6.0</code></li>
<li><code>XamarinStudio-4.0</code></li>
<li><code>XamarinStudio-5.0</code></li>
<li><code>XamarinStudio-6.0</code></li>
</ul>


<p>Within one of those directories you will find:</p>

<ul>
<li><code>LocalInstall/Addins</code></li>
</ul>


<p>So for me, that ended up being:</p>

<p><code>~/Library/Application Support/XamarinStudio-6.0/LocalInstall/Addins
</code>
<code>~/Library/Application Support/MonoDevelop-6.0/LocalInstall/Addins</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript | Xamarin / Monodevelop Language Addin (Part 1)]]></title>
    <link href="http://sushihangover.github.io/playscript-cmonodevelop-language-addin-part-1/"/>
    <updated>2015-11-01T01:22:10-08:00</updated>
    <id>http://sushihangover.github.io/playscript-cmonodevelop-language-addin-part-1</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"></p>

<h2>Goal:</h2>

<p>In this first part we are going to create an <a href="https://github.com/PlayScriptRedux/PlayScript.Addin">Addin</a> that does the most basic language syntax highlighing using a SyntaxMode xml file.</p>

<h2>Prerequisites</h2>

<p>You have the <a href="https://github.com/mono/mono-addins">MonoDevelop.AddinMaker</a> installed and enabled within Xamarin Studio/MonoDevelop (XS/MD).</p>

<h2>Create the Solution/Project</h2>

<p>With XS/MD, create a new solution/project. In this example we are using version 1.21 of the Addin Maker.</p>

<p><img src="images/XamarinStudioAddin.png" alt="" /></p>

<h2>Add the Syntax files</h2>

<p>Language syntax files are XML documents that describe how the visual representation of language will appear within the editor.</p>

<p>i.e.</p>

<pre><code>&lt;Keywords color = "Keyword(Jump)"&gt;
    &lt;Word&gt;break&lt;/Word&gt;
    &lt;Word&gt;continue&lt;/Word&gt;
    &lt;Word&gt;return&lt;/Word&gt;
&lt;/Keywords&gt;
</code></pre>

<p>Note: A definition of the contents of these XML files is out of scope for this posting. The best reference is the files themself. There are quite a number of them in the MonoDevelop <code>./main/src/core/Mono.Texteditor/SyntaxModes</code> directory, you should start the C# <a href="https://github.com/mono/monodevelop/blob/bc908c9e791b0ee6f4951fb65495f82735bc95b7/main/src/core/Mono.Texteditor/SyntaxModes/CSharpSyntaxMode.xml">one</a>.</p>

<p>In our case we are adding two syntax mode files, one for ActionScript and one for PlayScript.</p>

<p>Each file contains also has an mime-type attribute that will be used within our addin to provide a reference of the sourcefile extension to its mime type.</p>

<p>i.e.</p>

<pre><code>&lt;SyntaxMode name = "ActionScript" mimeTypes="text/x-actionscript"&gt;

&lt;SyntaxMode name = "PlayScript" mimeTypes="text/x-playscript"&gt;
</code></pre>

<p><strong>Note</strong>: Make sure you flag these files as <code>EmbeddedResources</code> so that they are included in the addin assembly.</p>

<h2>Mime-type to file ext. linkage</h2>

<pre><code>&lt;Extension path = "/MonoDevelop/Core/MimeTypes"&gt;
    &lt;MimeType id="text/x-actionscript" _description="ActionScript source code" icon="md-actionscript-file" isText="true"&gt;
        &lt;File pattern="*.as" /&gt;
    &lt;/MimeType&gt;     
    &lt;MimeType id="text/x-playscript" _description="PlayScript source code" icon="md-playscript-file" isText="true"&gt;
        &lt;File pattern="*.play" /&gt;
    &lt;/MimeType&gt;     
&lt;/Extension&gt;
</code></pre>

<h2>Add the File Filter Extension</h2>

<p>This will allow the IDE to provide filter options to the various file dialogs.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/FileFilters"&gt;
    &lt;FileFilter id = "ActionScript"
                insertbefore = "Assemblies"
                _label = "ActionScript Files"
                extensions = "*.as"/&gt;
    &lt;FileFilter id = "PlayScript"
                insertbefore = "Assemblies"
                _label = "PlayScript Files"
                extensions = "*.play"/&gt;                                     
&lt;/Extension&gt;
</code></pre>

<p>If you debug the project you will now find the ActionScript and PlayScript file filters are available:</p>

<p><img src="images/MD-Addin-FileFilter.png" alt="" /></p>

<h2>Add the Syntaxmode Extension</h2>

<p>Add the extension templates to the <code>Manifest.addin.xml</code> file.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/SourceEditor2/SyntaxModes"&gt;
    &lt;Templates resource="ActionScriptSyntaxMode.xml" /&gt;
    &lt;Templates resource="PlayScriptSyntaxMode.xml" /&gt;
&lt;/Extension&gt;
</code></pre>

<h2>Add the mime-type resolver extension</h2>

<p>Add the resolver extension class to the  <code>Manifest.addin.xml</code> file.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/TextEditorResolver"&gt;
    &lt;Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-actionscript" /&gt;
    &lt;Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-playscript" /&gt;
&lt;/Extension&gt;
</code></pre>

<h2>ProjectParameters Class</h2>

<p>Add a new class called <code>PlayScriptProjectParameters</code>, this class will inherit from <code>MonoDevelop.Projects.ProjectParameters</code> and for now will be completely empty. We will be adding code to it in a future posting, but right now we just need to be able to create the class object.</p>

<h2>ActionScriptLanguageBinding Class</h2>

<p>This class inherits from IDotNetLanguageBinding and other then stubbing out some methods and assigning the file extension that this class is related to (<code>.as</code>), the other thing that we need to do it call the static method <code>SyntaxModeService.LoadStylesAndModes</code> in the constructor in other for the Editor to load and parse the embedded xml file that contains our language&rsquo;s syntax:</p>

<pre><code>    public ActionScriptLanguageBinding() {
        SyntaxModeService.LoadStylesAndModes (Assembly.GetExecutingAssembly ());
    }

    public string Language {
        get {
            return "ActionScript";
        }
    }

    public string ProjectStockIcon {
        get { 
            return "md-project";
        }
    }

    public FilePath GetFileName (FilePath baseName)
    {
        return baseName + ".as";
    }

    public bool IsSourceCodeFile (FilePath fileName)
    {
        return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".as");
    }
</code></pre>

<h2>PlayScriptScriptLanguageBinding Class</h2>

<p>This is a repeat of the ActionScriptLanguageBinding class, but updated for the PlayScript <code>.play</code> extension.</p>

<pre><code>    public string Language {
        get {
            return "PlayScript";
        }
    }

    public string ProjectStockIcon {
        get { 
            return "md-project";
        }
    }

    public FilePath GetFileName (FilePath baseName)
    {
        return baseName + ".play";
    }

    public bool IsSourceCodeFile (FilePath fileName)
    {
        return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".play");
    }
</code></pre>

<p>Running this and you will have very basic language highlighting in any <code>.as</code> and <code>.play</code> that you add to Xamarin Studio or MonoDevelop.</p>

<p><img src="images/ActionScript-highlighting.png" alt="" /></p>

<h3>Addition Required Reading:</h3>

<h4>Michael Hutchinson&rsquo;s MonoDevelop.AddinMaker References:</h4>

<p><a href="http://www.monodevelop.com/developers/articles/creating-a-simple-add-in/">Creating a Simple Add-in</a></p>

<p><a href="https://mhut.ch/addinmaker/1.2">MonoDevelop.AddinMaker 1.2</a></p>

<p><a href="https://mhut.ch/addinmaker/1.2.1">MonoDevelop.AddinMaker 1.2.1</a></p>

<p><a href="https://mhut.ch/journal/2015/03/12/monodevelopaddinmaker_12">MonoDevelop.AddinMaker 1.2</a></p>

<p>Source : <a href="https://github.com/mhutch/MonoDevelop.AddinMaker">mhutch/MonoDevelop.AddinMaker</a></p>

<h4>Mono.Addin References:</h4>

<p>Documentation : <a href="http://monoaddins.codeplex.com/">Mono.Addins</a></p>

<p>Source : <a href="https://github.com/mono/mono-addins">mono/mono-addins</a></p>
]]></content>
  </entry>
  
</feed>
