<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xamarin studio | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/xamarin-studio/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-01-10T23:42:00-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PlayScript and NUnit]]></title>
    <link href="http://sushihangover.github.io/playscript-and-nunit/"/>
    <updated>2016-01-10T23:29:28-08:00</updated>
    <id>http://sushihangover.github.io/playscript-and-nunit</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"> I&rsquo;ve add a NUnit template to the <a href="https://github.com/PlayScriptRedux/PlayScript.Addin">PlayScriptRedux/PlayScript.Addin</a></p>

<p>I do not have a website for the <code>.mpack</code> setup yet, so grab the latest release <a href="https://github.com/PlayScriptRedux/PlayScript.Addin/releases">here</a>.</p>

<p><img src="images/XS_Play_NUnit.png" alt="PlayScript NUnit" /></p>

<h3>MonoDevelop.PlayScript_5.10.2.2.mpack</h3>

<h4>New:</h4>

<ul>
<li>Added NUnit template</li>
</ul>


<h3>Prior:</h3>

<ul>
<li>Support for the nuget feed (<a href="https://www.myget.org/F/playscript/">https://www.myget.org/F/playscript/</a>)</li>
<li>Initial Release for Xamarin Studio v5.10.2.0+</li>
</ul>


<p>Functional, but it still needs a lot of love to be on par with CSharp&rsquo;s NRefactory&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding nuget packages to your MonoDevelop Addin Templates]]></title>
    <link href="http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates/"/>
    <updated>2016-01-01T21:48:44-08:00</updated>
    <id>http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates</id>
    <content type="html"><![CDATA[<p>I recently created nugets for the PlayScript AOT assemblies as well as a separtate MSBuild target nuget and it ended up working really well in a x-plat way.</p>

<p>But one thing that I could not find quickly was how to tag my templates with the package info so they are automatically installed when the solution/projects are created.</p>

<p>Well the answer was kind-of right under my nose (<a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>):</p>

<blockquote><p>Conditionally Adding a NuGet Package from a Project Template
A NuGet package be conditionally installed based on a boolean parameter defined by the project template wizard.</p></blockquote>

<pre><code>&lt;Packages&gt;
    &lt;Package id="Xamarin.GooglePlayServices" version="19.0.0.1" if="UseGooglePlayServices" /&gt;
&lt;/Packages&gt;
</code></pre>

<blockquote><p>The conditions that can be specified do not support the more complicated condition that grouped templates do.</p></blockquote>

<p>Re: <a href="http://www.monodevelop.com/developers/articles/project-templates/#conditionally-adding-a-nuget-package-from-a-project-template">Conditionally Adding a NuGet Package from a Project Template</a></p>

<p>So in my templates I currently do not have to lock them to a version and want the most recent ones available so I skip the version attribute:</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="PlayScript.AOT" /&gt;
    &lt;package id="PlayScript.MSBuild" /&gt;
&lt;/Packages&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio mdtool - Where is it?]]></title>
    <link href="http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it/"/>
    <updated>2015-11-21T08:36:11-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure if it is a bug or not, but older versions of Xamarin Studio (and MonoDevelop) on OS-X (prior to El Capitan) installed a <code>mdtool</code> shell script in <code>/usr/local/bin</code> but that no longer happens(?).</p>

<p><code>mdtool</code> original/missing shell script:</p>

<pre><code>#!/bin/bash
MONO_EXEC="exec mono-sgen"
EXE_PATH="/Applications/Xamarin Studio.app/Contents/Resources/lib/monodevelop/bin/mdtool.exe"
$MONO_EXEC $MONO_OPTIONS "$EXE_PATH" "$@"
</code></pre>

<p>So create the script with the content above and place it into a directory in your path. <code>/usr/local/bin</code> is fine, but I personally install my shell scripts into a <code>$HOME/.scripts</code> directory that is included in my path so I can backup, via a git repo, my personal scripts and distinguish what I have created verus what gets installed in the <code>/usr/local/bin</code> by applications such a <code>brew</code>&hellip;</p>

<p>Note: Make sure that you <code>chmod a+x mdtool</code> in order to make it executable&hellip;</p>

<p>As always, have fun&hellip; ;-)</p>

<pre><code>$mdtool

Xamarin Studio Tool Runner

Usage: mdtool [options] &lt;tool&gt; ... : Runs a tool.
       mdtool setup ... : Runs the setup utility.
       mdtool -q : Lists available tools.

Options:
  --verbose (-v)   Increases log verbosity. Can be used multiple times.
  --no-reg-update  Skip updating addin registry. Faster but results in
                   random errors if registry is not up to date.

Available tools:
- build: Project build tool
- dbgen: Parser database generation tool
- project-export: Project conversion tool
- gsetup: Graphical add-in setup utility
- archive: Project archiving tool
- account: Xamarin account tool
- mac-bundle: Mac application bundle and installer generator.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop.AddinMaker - CI Build and Install .mpack]]></title>
    <link href="http://sushihangover.github.io/monodevelop-dot-addinmaker-build-and-install-mpack/"/>
    <updated>2015-11-08T11:54:48-08:00</updated>
    <id>http://sushihangover.github.io/monodevelop-dot-addinmaker-build-and-install-mpack</id>
    <content type="html"><![CDATA[<p>Using mhutch/MonoDevelop.AddinMaker to create your Addins? If not, you should convert your Addin Project (see his &ldquo;Migrating Existing Projects&rdquo; notes in the repo&rsquo;s <a href="https://github.com/mhutch/MonoDevelop.AddinMaker/blob/master/README.md">README.md</a> file)</p>

<p>Need to intergate building, creating the <code>.mpack</code>, and installing it into Xamarin Studio into your CI process?</p>

<h3>Package your Addin to a .mpack file</h3>

<p><code>xbuild PlayScript.Addin.csproj /t:CreatePackage</code></p>

<h3>Install your .mpack</h3>

<p><code>mdtool setup install bin/Debug/PlayScript.Addin.PlayScript.Addin_1.0.mpack</code></p>

<p>FYI: Using <a href="https://github.com/mhutch/MonoDevelop.AddinMaker">mhutch/MonoDevelop.AddinMaker</a> makes developing and debugging Addins so much easier, there is still a <strong>huge</strong> documention gap in the MonoDevelop Addin system, but M. Hutch&rsquo;s AddinMaker sure helps a ton (thanks mhutch!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin OS-X Addins Location]]></title>
    <link href="http://sushihangover.github.io/xamarin-os-x-addins-location/"/>
    <updated>2015-11-08T09:59:55-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-os-x-addins-location</id>
    <content type="html"><![CDATA[<p>In the process of working on an Xamarin Studio Language Addin for PlayScript I needed to to manually find and update some of the installed Addin files. But where are the Addin files?</p>

<p>Within the <code>~/Library/Application Support</code> directory you will find one based on the version of Xamarin Studio or Monodevelop that you are using:</p>

<ul>
<li><code>MonoDevelop-4.0</code></li>
<li><code>MonoDevelop-5.0</code></li>
<li><code>MonoDevelop-6.0</code></li>
<li><code>XamarinStudio-4.0</code></li>
<li><code>XamarinStudio-5.0</code></li>
<li><code>XamarinStudio-6.0</code></li>
</ul>


<p>Within one of those directories you will find:</p>

<ul>
<li><code>LocalInstall/Addins</code></li>
</ul>


<p>So for me, that ended up being:</p>

<p><code>~/Library/Application Support/XamarinStudio-6.0/LocalInstall/Addins
</code>
<code>~/Library/Application Support/MonoDevelop-6.0/LocalInstall/Addins</code></p>
]]></content>
  </entry>
  
</feed>
