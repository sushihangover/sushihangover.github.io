<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Github | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-24T11:43:49-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git : Your Github Based Fork's Pull Request Is Rejected, Kind-of, Now What?]]></title>
    <link href="http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what/"/>
    <updated>2015-06-24T07:46:41-07:00</updated>
    <id>http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> So you have a Github fork of a project and you find a problem. You whip up a fix, commit it in a local branch and push it to your fork you Github. Than you issue a pull request to the upstream repo. Life is good. <img class="right <a" src="href="http://sushihangover.github.io/images/github_logo.png">http://sushihangover.github.io/images/github_logo.png</a>"></p>

<p>But&hellip; your pull request is &lsquo;rejected&rsquo;, kind-of, as the fix is applied differently to their branch. Now your GitHub and local repo are history mismatched to the upstream master. Fetching upstream and merging upstream/master produces conflicts ;-(</p>

<p>First, I do not want to lose the commit that I did do. I want to keep the work/history so a &lsquo;simple&rsquo; git hard reset to a prior sha is out of the question.</p>

<p>So lets put your changes on a new branch and reset the master branch back to match the upstream.</p>

<h3>Move last commit to a new branch</h3>

<p>Note: You <em>will</em> lose uncommitted work, stash first if needed!</p>

<pre><code>git branch newbranch
git reset --hard HEAD~1 # Go back 1 commit or use SHA
git checkout newbranch
</code></pre>

<h3>Re-sync your Github fork</h3>

<p>Now, lets get everything re-sync&rsquo;d.</p>

<pre><code>git checkout master
</code></pre>

<p>Since you already push this branch to your Github fork, you will see the message:</p>

<pre><code>"Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded."
</code></pre>

<p>That contains <em>your</em> fix, but you need to merge in the upstream/master changes.</p>

<pre><code>git fetch upstream
git merge upstream/master
</code></pre>

<p>And your local master should <em>Fast-forward</em> to match the upstream. All is good, except your repo on Github is not correct as it contains your original commit on the wrong branch.</p>

<pre><code>git push --force
</code></pre>

<p>If you want to keep (backup) that new branch to Github than use the following instead:</p>

<pre><code>git push --all --force
</code></pre>

<p><strong>Note:</strong> You should not be forcing a push if others have already pulled from your repo/fork. That causes bad git mojo and everyone else that pulled your repo will need to be notified that you &lsquo;changed&rsquo; history&hellip; That is a git fixup story for another day.</p>

<h3>Moral of the story:</h3>

<p>Create a bugfix branch with your fixes. It should have one commit (rebase if needed) that will fast-forward and issue your pull-request from that branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp - 64-bit NCurses on OS-X and Mono]]></title>
    <link href="http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono/"/>
    <updated>2015-06-15T21:07:53-07:00</updated>
    <id>http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/FireworksDemo.gif">http://sushihangover.github.io/images/FireworksDemo.gif</a>">CursesSharp is a C# wrapper for curses library.</p>

<ul>
<li>The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.</li>
<li>The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</li>
</ul>


<p>I updated this to work for &lsquo;modern&rsquo; autotools so allow autoreconf and configure to actual run without throwing errors and then I updated the Makefile.am&rsquo;s files to allow compiling under OS-X and with Mono 4.0.x. Linux and Windows should still work, but I have not at this time tested those other flavors.</p>

<p>Let me know via Github <a href="https://github.com/sushihangover/CursesSharp/issues/new">issues</a> if you have any problems. ;-)</p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X. The build <img class="right <a" src="href="http://sushihangover.github.io/images/RainDemo.gif">http://sushihangover.github.io/images/RainDemo.gif</a>">CursesSharp is a C# wrapper for curses library.
process has been tested on 10.10.3 using Apple LLVM version 6.1.0 and a Mono 4.0.1 64-bit build.</p>

<h3>0. Prerequisites</h3>

<ol>
<li>Subversion - if you intend to build CursesSharp from SVN repository. If you use the source code package, you don&rsquo;t need Subversion.</li>
<li>autoconf/automake/libtool - only if you are building from SVN. You don&rsquo;t need these tools if you use the source code package.</li>
<li>Standard development tools - a C compiler (e.g. GCC) and GNU make (gmake).</li>
<li>Ncurses library and headers (development files) - typically this package is called ncurses-dev.</li>
<li>Mono - the .NET runtime and development framework</li>
<li>pkg-config - typically required by Mono, but make sure it&rsquo;s installed</li>
</ol>


<h3>1. Getting CursesSharp</h3>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<p>Original SVN Repo:</p>

<pre><code>https://curses-sharp.svn.sourceforge.net/svnroot/curses-sharp/trunk
</code></pre>

<p>The following section describes the former case. If you downloaded the source code package, extract it and you may skip to step 4.</p>

<p><img class="left <a" src="href="http://sushihangover.github.io/images/UnicodeDemo.gif">http://sushihangover.github.io/images/UnicodeDemo.gif</a>"></p>

<h3>2. Git clone</h3>

<p>Execute the following command:</p>

<pre><code>git clone https://github.com/sushihangover/CursesSharp.git cursessharp
</code></pre>

<p><em>You may substitute the final cursessharp for any other directory of your liking.</em></p>

<h3>3. Bootstrapping</h3>

<p>In order to proceed with the build, you will have to create the configure script. Cd into the directory containing CursesSharp sources and execute the following command:</p>

<p>brew link gettext &ndash;force  <br/>
autoreconf -if</p>

<h3>4. Configure</h3>

<p>In the top source directory execute the command:</p>

<pre><code>LIBS="-lncurses -liconv -lpanel" ./configure
</code></pre>

<p>By default CursesSharp is installed in /usr/local. To change the target directory,<strong> which you really should do,</strong> you can use the &ldquo;&ndash;prefix=&rdquo; option:</p>

<pre><code># Following all on one line:    
LIBS="-lncurses -liconv -lpanel" ./configure --prefix=$HOME/cursessharp
</code></pre>

<p>You can also use other options. For a complete list execute:</p>

<pre><code>./configure --help
</code></pre>

<h4>5. Make</h4>

<p>After you executed configure, run (in the same directory):</p>

<pre><code>#I am using a locally built/installed 64-bit version of mono, so I add it to the path
export PATH=/Users/administrator/mono/mono-llvm-64/bin:$PATH
make
# remove brew's version of gettext 
brew unlink gettext
</code></pre>

<p>To compile the source code.</p>

<h3>6. Installation</h3>

<p>Execute the command:</p>

<pre><code>make install
</code></pre>

<p>This will install CursesSharp. Make sure you have appropriate privileges.</p>

<h3>7. Testing</h3>

<p>By default CursesSharp will install a few demonstration programs. At this time, these are: FireworkDemo and RainDemo. You can try running the demos to check if CursesSharp works.</p>

<p>Running the demos:</p>

<p>Add your cursessharp&rsquo;s bin install location to your path, i.e.</p>

<pre><code>export PATH=$HOME/cursessharp/bin:$PATH
</code></pre>

<p>And you can run them from anywhere:</p>

<pre><code>RainDemo
FireworksDemo
UnicodeDemo
</code></pre>

<p>Have fun ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corflags - Release xCorFlags Version 1.0.5643.36015]]></title>
    <link href="http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015/"/>
    <updated>2015-06-15T06:09:45-07:00</updated>
    <id>http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sushihangover/CorFlags/releases/tag/v1.0.5643.36015">xCorFlags Version 1.0.5643.36015</a></h1>

<p>Maintenance release of the cross-platform CorFlags Conversion Tool is up on  <a href="https://github.com/sushihangover/corflags">Github</a>.</p>

<pre><code>git log v1.0.5643.30429..v1.0.5643.36015
commit 0125dffeda467b70e869b898d05203aba3669e88
Author: SushiHangover &lt;sushihangover@outlook.com&gt;
Date:   Sun Jun 14 20:06:00 2015 -0700

Fix absolute paths to the assemblies that are passed in
</code></pre>

<p>This is a cross-platform version of the Microsoft CorFlags tool that is included in the .Net Framework SDK installations and is a self-contained x86 CIL Image (via <a href="https://github.com/gluck/il-repack">ILRepack</a>) that runs on:</p>

<ul>
<li>Windows (xCorFlags)</li>
<li>OS-X (mono ./xCorFlags.exe)</li>
<li>Linux (mono ./xCorFlags.exe)</li>
</ul>


<p>For additional information:</p>

<ul>
<li><a href="">https://github.com/sushihangover/corflags</a></li>
<li><a href="">https://github.com/sushihangover/CorFlags/blob/master/README.md</a></li>
<li><a href="">http://sushihangover.github.io/blog/categories/corflags/</a></li>
<li><a href="">https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corflags - Release xCorFlags Version 1.0.5643.30429]]></title>
    <link href="http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-30429/"/>
    <updated>2015-06-14T19:09:45-07:00</updated>
    <id>http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-30429</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sushihangover/CorFlags/releases/tag/v1.0.5643.30429">xCorFlags Version 1.0.5643.30429</a></h1>

<p>The first full release of the cross-platform CorFlags Conversion Tool is up on  <a href="https://github.com/sushihangover/corflags">Github</a>.</p>

<p>This is a cross-platform version of the Microsoft CorFlags tool that is included in the .Net Framework SDK installations and is a self-contained x86 CIL Image (via <a href="https://github.com/gluck/il-repack">ILRepack</a>) that runs on:</p>

<ul>
<li>Windows (xCorFlags)</li>
<li>OS-X (mono ./xCorFlags.exe)</li>
<li>Linux (mono ./xCorFlags.exe)</li>
</ul>


<p>For additional information:</p>

<ul>
<li><a href="">https://github.com/sushihangover/corflags</a></li>
<li><a href="">https://github.com/sushihangover/CorFlags/blob/master/README.md</a></li>
<li><a href="">http://sushihangover.github.io/blog/categories/corflags/</a></li>
<li><a href="">https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Set Up a Fetch-only Remote | Disabling Push]]></title>
    <link href="http://sushihangover.github.io/git-set-up-a-fetch-only-remote/"/>
    <updated>2015-06-14T14:57:37-07:00</updated>
    <id>http://sushihangover.github.io/git-set-up-a-fetch-only-remote</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> The PlayScript repo on the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> Github organization I maintain is a down-stream fork of <a href="https://github.com/mono/mono">Mono</a> so I can fetch the changes to their master branch. I also have my own <a href="https://github.com/sushihangover/playscript">fork</a> of the PlayScript repo so I can code, issue pull-requests and review other people&rsquo;s pull-requests. But I do not want to screw up and push directly to the <a href="https://github.com/PlayScriptRedux/playscript">Redux based repo</a> from my local repo, only my own fork on GitHub. Also I do not have any push permissions on the Mono repo and want to not even have git try to push to that repo if I screw up on the cmd line.</p>

<p>So after adding my additional remotes my local repo, it looks like this:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   https://github.com/PlayScriptRedux/playscript.git (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    https://github.com/mono/mono.git (push)
</code></pre>

<p>I want to keep the fetch/pull ability from the redux and upstream remotes and remove the  &lsquo;push&rsquo; ability to those remotes.</p>

<p>You can not totally clear the push uri as it will be replaced with the fetch uri. So setting the push uri to something nonexistent works, i.e.</p>

<pre><code> git remote set-url --push upstream DISABLE
 git remote set-url --push redux DISABLE
</code></pre>

<p>And to see what that looks like now:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   DISABLE (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    DISABLE (push)
</code></pre>

<p>Now if you push to the one of the &lsquo;disable&rsquo; remotes, you will recieve the following error:</p>

<pre><code>git push redux
fatal: 'DISABLE' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>NOTE: You do not have to use &ldquo;DISABLE&rdquo;, any nonsensical URI will do. I like DISABLE as seeing it in the git push error message is a clear indicator of the brain fart that I just typed&hellip;</p>
]]></content>
  </entry>
  
</feed>
