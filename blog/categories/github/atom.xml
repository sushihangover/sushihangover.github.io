<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-21T09:04:27-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git tags and PlayScript]]></title>
    <link href="http://sushihangover.github.io/git-tags-and-playscript/"/>
    <updated>2015-09-02T21:47:36-07:00</updated>
    <id>http://sushihangover.github.io/git-tags-and-playscript</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"> Seems I not found a way to update the &lsquo;upstream&rsquo; master of <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> without actually push the tag directly to the repo.</p>

<p>So first I de-reference the tags to get the matching commit SHA for the tag I need to push:</p>

<pre><code>git show-ref --tags --dereference | grep play
9e82533b52d5be2f10f8c0ddacff848810b8d736 refs/tags/play-3.10.0001
a317c758ea3136347c4bc2a360c34fbacfce6d34 refs/tags/play-3.2.7
a317c758ea3136347c4bc2a360c34fbacfce6d34 refs/tags/play-3.2.7001
e97e27071414fdafba9ce95d4b7ca6c0c6da2a3c refs/tags/play-3.4.1001
cfc55b6a587eba190042045e1a686388923310b0 refs/tags/play-3.6.1001
b509d6711135bfba5b32cf3f7e2090964c67daa0 refs/tags/play-3.8.1001
</code></pre>

<p>That is done on my fork of the <a href="https://github.com/sushihangover/playscript">PlayScript</a> repo as I try to never work directly on the &lsquo;upstream&rsquo; master.</p>

<p>So in the case of tag &ldquo;play-3.10.0001&rdquo; that is not in the upstream PlayScript repo, I need to add it to the repo.</p>

<p>I switch the PlayScriptRedux org&rsquo;s <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> repo that I have a local clone of and update it.</p>

<p>First pull the latest changes, all done through pull-requests:</p>

<pre><code>git pull origin playscript
</code></pre>

<p>Now I can add the new tag:</p>

<pre><code>git tag play-3.10.0001 9e82533b52d5be2f10f8c0ddacff848810b8d736
</code></pre>

<p>And finally push it to the repo:</p>

<pre><code>git push origin play-3.10.0001

Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/PlayScriptRedux/playscript.git
 * [new tag]         play-3.10.0001 -&gt; play-3.10.0001
</code></pre>

<p>I still want to know if this is available through pull-requests somehow.</p>

<p><img class="right <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript Redux - Make2CSProjUpdater]]></title>
    <link href="http://sushihangover.github.io/playscript-redux-make2csprojupdater/"/>
    <updated>2015-07-14T15:06:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-redux-make2csprojupdater</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"> I just posted a new tool project on <a href="https://github.com/PlayScriptRedux/Make2CSProjUpdater">Github</a> that I am using with Mono and PlayScript to make things easier with Xamarin Studio / MonoDevelop.</p>

<h2>Make2CSProjUpdater</h2>

<h4>Update the .csproj ItemGroup/Compile elements from a sourcefile list.</h4>

<p>This project takes a source list of file, usually from an external Makefile source (i.e. Mono.CSharp.dll.sources) and a C# (.csproj) project file and will update/sync the source list into the project file.</p>

<p>As an author of the <a href="http://github.com/playscriptredux/playscript">PlayScript Redux</a> project, there are a large number of Mono .csproj files that are not keep up to date with the Makefile source lists. The Makefile source lists are a known good source as they are used to build Mono and the project files are not used in that capicity. But in development and debugging of the Mono Compiler (mcs.exe) and PlayScript Compiler (playc.exe), the use of Xamarian Studio / MonoDevelop IDE makes life so much easier and thus the need for up to date project (.csproj) files. :-)</p>

<p>Note: This project is generic, just a text file containing a list of filenames and a .csproj file.</p>

<p>Note: Found another use; dumping a list of files via find/ls/etc. to a file and updating a blank project file with that source. This provided a quick jumpstart for a few projects that did not include project files or were so outdated that the project files had to be recreated.</p>

<h3>Usage:</h3>

<pre><code>make2csprojupdater.exe -h
Make2CSProjectUpdate / Â©SushiHangover 2015
Update the .csproj ItemGroup/Compile elements from a sourcefile list.

Options:
  -p, --proj=VALUE           The project filename (.csproj) to update.
  -s, --sources=VALUE        The filename of the Makefile source list.
  -i, --interactive          Confirmation prompt to update/save the project
                               file.
  -v, --verbose              Increase message verbosity.
  -h, --help                 Show this message and exit
</code></pre>

<p>Sample Usage:</p>

<pre><code>  mono make2csprojupdater.exe -p Sample/Mono.CSharp.csproj -s Sample/Mono.CSharp.dll.sources -v -i
# Make source files : 68
# Project source files  : 58

# Project needs the following changes    : Sample/Mono.CSharp.csproj
# Delete:   ..\..\mcs\doc-bootstrap.cs
# Delete:   cs-parser.cs
# Delete:   ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Add:  ../../mcs/ps-lang.cs
# Add:  ../../mcs/ps-tokenizer.cs
# Add:  ../../mcs/ps-codegen.cs
# Add:  ../../mcs/cxx-emit.cs
# Add:  ../../mcs/cxx-target.cs
# Add:  ../../mcs/inliner.cs
# Add:  ../../mcs/intrinsics.cs
# Add:  ../../mcs/js-emit.cs
# Add:  ../../mcs/js-target.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Add:  ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Add:  ../../build/common/Consts.cs
# Add:  ../../mcs/cs-parser.cs
# Add:  ../../mcs/ps-parser.cs
# Add:  Assembly/AssemblyInfo.cs

Make changes? [y/n]:y
# Saving backup:    Sample/Mono.CSharp.csproj.bak
# Deleting: ..\..\mcs\doc-bootstrap.cs
# Deleting: cs-parser.cs
# Deleting: ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Adding:   ../../mcs/ps-lang.cs
# Adding:   ../../mcs/ps-tokenizer.cs
# Adding:   ../../mcs/ps-codegen.cs
# Adding:   ../../mcs/cxx-emit.cs
# Adding:   ../../mcs/cxx-target.cs
# Adding:   ../../mcs/inliner.cs
# Adding:   ../../mcs/intrinsics.cs
# Adding:   ../../mcs/js-emit.cs
# Adding:   ../../mcs/js-target.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Adding:   ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Adding:   ../../build/common/Consts.cs
# Adding:   ../../mcs/cs-parser.cs
# Adding:   ../../mcs/ps-parser.cs
# Adding:   Assembly/AssemblyInfo.cs
# Saving project:   Sample/Mono.CSharp.csproj
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git : Your Github based fork's pull request is rejected, kind-of, now what?]]></title>
    <link href="http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what/"/>
    <updated>2015-06-24T07:46:41-07:00</updated>
    <id>http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> So you have a Github fork of a project and you find a problem. You whip up a fix, commit it in a local branch and push it to your fork you Github. Than you issue a pull request to the upstream repo. Life is good. <img class="right <a" src="href="http://sushihangover.github.io/images/github_logo.png">http://sushihangover.github.io/images/github_logo.png</a>"></p>

<p>But&hellip; your pull request is &lsquo;rejected&rsquo;, kind-of, as the fix is applied differently to their branch. Now your GitHub and local repo are history mismatched to the upstream master. Fetching upstream and merging upstream/master produces conflicts ;-(</p>

<p>First, I do not want to lose the commit that I did do. I want to keep the work/history so a &lsquo;simple&rsquo; git hard reset to a prior sha is out of the question.</p>

<p>So lets put your changes on a new branch and reset the master branch back to match the upstream.</p>

<h3>Move last commit to a new branch</h3>

<p>Note: You <em>will</em> lose uncommitted work, stash first if needed!</p>

<pre><code>git branch newbranch
git reset --hard HEAD~1 # Go back 1 commit or use SHA
git checkout newbranch
</code></pre>

<h3>Re-sync your Github fork</h3>

<p>Now, lets get everything re-sync&rsquo;d.</p>

<pre><code>git checkout master
</code></pre>

<p>Since you already push this branch to your Github fork, you will see the message:</p>

<pre><code>"Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded."
</code></pre>

<p>That contains <em>your</em> fix, but you need to merge in the upstream/master changes.</p>

<pre><code>git fetch upstream
git merge upstream/master
</code></pre>

<p>And your local master should <em>Fast-forward</em> to match the upstream. All is good, except your repo on Github is not correct as it contains your original commit on the wrong branch.</p>

<pre><code>git push --force
</code></pre>

<p>If you want to keep (backup) that new branch to Github than use the following instead:</p>

<pre><code>git push --all --force
</code></pre>

<p><strong>Note:</strong> You should not be forcing a push if others have already pulled from your repo/fork. That causes bad git mojo and everyone else that pulled your repo will need to be notified that you &lsquo;changed&rsquo; history&hellip; That is a git fixup story for another day.</p>

<h3>Moral of the story:</h3>

<p>Create a bugfix branch with your fixes. It should have one commit (rebase if needed) that will fast-forward and issue your pull-request from that branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp - 64-bit NCurses on OS-X and Mono]]></title>
    <link href="http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono/"/>
    <updated>2015-06-15T21:07:53-07:00</updated>
    <id>http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/FireworksDemo.gif">http://sushihangover.github.io/images/FireworksDemo.gif</a>">CursesSharp is a C# wrapper for curses library.</p>

<ul>
<li>The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.</li>
<li>The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</li>
</ul>


<p>I updated this to work for &lsquo;modern&rsquo; autotools so allow autoreconf and configure to actual run without throwing errors and then I updated the Makefile.am&rsquo;s files to allow compiling under OS-X and with Mono 4.0.x. Linux and Windows should still work, but I have not at this time tested those other flavors.</p>

<p>Let me know via Github <a href="https://github.com/sushihangover/CursesSharp/issues/new">issues</a> if you have any problems. ;-)</p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X. The build <img class="right <a" src="href="http://sushihangover.github.io/images/RainDemo.gif">http://sushihangover.github.io/images/RainDemo.gif</a>">CursesSharp is a C# wrapper for curses library.
process has been tested on 10.10.3 using Apple LLVM version 6.1.0 and a Mono 4.0.1 64-bit build.</p>

<h3>0. Prerequisites</h3>

<ol>
<li>Subversion - if you intend to build CursesSharp from SVN repository. If you use the source code package, you don&rsquo;t need Subversion.</li>
<li>autoconf/automake/libtool - only if you are building from SVN. You don&rsquo;t need these tools if you use the source code package.</li>
<li>Standard development tools - a C compiler (e.g. GCC) and GNU make (gmake).</li>
<li>Ncurses library and headers (development files) - typically this package is called ncurses-dev.</li>
<li>Mono - the .NET runtime and development framework</li>
<li>pkg-config - typically required by Mono, but make sure it&rsquo;s installed</li>
</ol>


<h3>1. Getting CursesSharp</h3>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<p>Original SVN Repo:</p>

<pre><code>https://curses-sharp.svn.sourceforge.net/svnroot/curses-sharp/trunk
</code></pre>

<p>The following section describes the former case. If you downloaded the source code package, extract it and you may skip to step 4.</p>

<p><img class="left <a" src="href="http://sushihangover.github.io/images/UnicodeDemo.gif">http://sushihangover.github.io/images/UnicodeDemo.gif</a>"></p>

<h3>2. Git clone</h3>

<p>Execute the following command:</p>

<pre><code>git clone https://github.com/sushihangover/CursesSharp.git cursessharp
</code></pre>

<p><em>You may substitute the final cursessharp for any other directory of your liking.</em></p>

<h3>3. Bootstrapping</h3>

<p>In order to proceed with the build, you will have to create the configure script. Cd into the directory containing CursesSharp sources and execute the following command:</p>

<p>brew link gettext &ndash;force  <br/>
autoreconf -if</p>

<h3>4. Configure</h3>

<p>In the top source directory execute the command:</p>

<pre><code>LIBS="-lncurses -liconv -lpanel" ./configure
</code></pre>

<p>By default CursesSharp is installed in /usr/local. To change the target directory,<strong> which you really should do,</strong> you can use the &ldquo;&ndash;prefix=&rdquo; option:</p>

<pre><code># Following all on one line:    
LIBS="-lncurses -liconv -lpanel" ./configure --prefix=$HOME/cursessharp
</code></pre>

<p>You can also use other options. For a complete list execute:</p>

<pre><code>./configure --help
</code></pre>

<h4>5. Make</h4>

<p>After you executed configure, run (in the same directory):</p>

<pre><code>#I am using a locally built/installed 64-bit version of mono, so I add it to the path
export PATH=/Users/administrator/mono/mono-llvm-64/bin:$PATH
make
# remove brew's version of gettext 
brew unlink gettext
</code></pre>

<p>To compile the source code.</p>

<h3>6. Installation</h3>

<p>Execute the command:</p>

<pre><code>make install
</code></pre>

<p>This will install CursesSharp. Make sure you have appropriate privileges.</p>

<h3>7. Testing</h3>

<p>By default CursesSharp will install a few demonstration programs. At this time, these are: FireworkDemo and RainDemo. You can try running the demos to check if CursesSharp works.</p>

<p>Running the demos:</p>

<p>Add your cursessharp&rsquo;s bin install location to your path, i.e.</p>

<pre><code>export PATH=$HOME/cursessharp/bin:$PATH
</code></pre>

<p>And you can run them from anywhere:</p>

<pre><code>RainDemo
FireworksDemo
UnicodeDemo
</code></pre>

<p>Have fun ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corflags - Release xCorFlags Version 1.0.5643.36015]]></title>
    <link href="http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015/"/>
    <updated>2015-06-15T06:09:45-07:00</updated>
    <id>http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sushihangover/CorFlags/releases/tag/v1.0.5643.36015">xCorFlags Version 1.0.5643.36015</a></h1>

<p>Maintenance release of the cross-platform CorFlags Conversion Tool is up on  <a href="https://github.com/sushihangover/corflags">Github</a>.</p>

<pre><code>git log v1.0.5643.30429..v1.0.5643.36015
commit 0125dffeda467b70e869b898d05203aba3669e88
Author: SushiHangover &lt;sushihangover@outlook.com&gt;
Date:   Sun Jun 14 20:06:00 2015 -0700

Fix absolute paths to the assemblies that are passed in
</code></pre>

<p>This is a cross-platform version of the Microsoft CorFlags tool that is included in the .Net Framework SDK installations and is a self-contained x86 CIL Image (via <a href="https://github.com/gluck/il-repack">ILRepack</a>) that runs on:</p>

<ul>
<li>Windows (xCorFlags)</li>
<li>OS-X (mono ./xCorFlags.exe)</li>
<li>Linux (mono ./xCorFlags.exe)</li>
</ul>


<p>For additional information:</p>

<ul>
<li><a href="">https://github.com/sushihangover/corflags</a></li>
<li><a href="">https://github.com/sushihangover/CorFlags/blob/master/README.md</a></li>
<li><a href="">http://sushihangover.github.io/blog/categories/corflags/</a></li>
<li><a href="">https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
