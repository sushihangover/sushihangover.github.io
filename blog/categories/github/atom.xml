<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Github | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-03T12:14:05-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PlayScript 3.2.3001 Posted]]></title>
    <link href="http://sushihangover.github.io/blog/playscript-3-dot-2-3001-posted/"/>
    <updated>2015-06-03T06:10:59-07:00</updated>
    <id>http://sushihangover.github.io/blog/playscript-3-dot-2-3001-posted</id>
    <content type="html"><![CDATA[<p><img src="/images/PlayscriptLogo_small.png" alt="" /></p>

<p>I posted up the PlayScript compiler 3.2.3001 to <a href="https://github.com/sushihangover/playscript">Github</a> which is a merge of the mono-3.2.3 tag into the playscript-mono branch.</p>

<p>To speed up testing the merge, I am disabling a number of options in the build. Please log any issues via <a href="https://github.com/sushihangover/playscript/issues">Github</a></p>

<pre><code>./configure --with-mcs-docs=no --with-profile2=no --with-profile4=no --with-profile4_5=yes --with-moonlight=no --with-tls=posix --enable-nls=no --prefix=/Users/administrator/playscript-install
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript 3.2.2002 Posted]]></title>
    <link href="http://sushihangover.github.io/blog/playscript-3-dot-2-2002-posted/"/>
    <updated>2015-05-31T22:16:23-07:00</updated>
    <id>http://sushihangover.github.io/blog/playscript-3-dot-2-2002-posted</id>
    <content type="html"><![CDATA[<p><img src="/images/PlayscriptLogo.png" alt="" /></p>

<p>I posted up the PlayScript compiler (3.2.2002). This is the last posted release of the Apache licensed open-source version before Zynga pulled it from public domain.</p>

<p>I will be migrating it to the Mono 4.x compiler in the days and weeks ahead before working on finishing and getting the ActionScript language side stable (feature complete?). Not really looking forwarded to the Mono 4.x migration as the number of internal API changes to the mcs compiler since the 3.2.0 release is quite extensive.</p>

<p>If you want to compile and use the current 3.2.2002 release, just autogen.sh like normal.</p>

<p>Note: Due to dependency updates on OS-X since Mono 3.2 was release, I had to supply &ldquo; <u>&ndash;with-tls</u>&rdquo; option as it was auto-selecting <strong>__thread</strong> instead of <strong>_posix</strong>.</p>

<pre><code>./autogen.sh --with-tls=posix --enable-nls=no --prefix=/Users/administrator/mono-install
</code></pre>

<p>Note: Since this is mono 3.x, to build you will need gmcs during the bootstrap process. If you only have Mono 4.x installed, you will need a 3.x mono install to proceed. I just did a separate mono checkout of 3.2 and built it with a different install prefix location. When doing an initial/full compile and install, you can add this 3.2 install location to the front of your PATH and the default mono bootstrap will work cleanly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping a GitHub Fork Up to Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/blog/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/blog/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote -v
</span><span class='line'>origin  &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/PlayScript.git&quot;</span>&gt;https://github.com/sushihangover/PlayScript.git&lt;/a&gt; <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin  &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/PlayScript.git&quot;</span>&gt;https://github.com/sushihangover/PlayScript.git&lt;/a&gt; <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>upstream    &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mono/mono.git&quot;</span>&gt;https://github.com/mono/mono.git&lt;/a&gt; <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>upstream    &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mono/mono.git&quot;</span>&gt;https://github.com/mono/mono.git&lt;/a&gt; <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ../PlayScript-master
</span><span class='line'>git fetch upstream
</span><span class='line'>git merge upstream/master
</span><span class='line'>git push origin
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Backing Up Your Source Directory]]></title>
    <link href="http://sushihangover.github.io/blog/octopress-backing-up-your-source-directory/"/>
    <updated>2014-02-12T21:00:12-08:00</updated>
    <id>http://sushihangover.github.io/blog/octopress-backing-up-your-source-directory</id>
    <content type="html"><![CDATA[<p>It has only been a couple of days using <a href="http://octopress.org">Octopress</a> and <a href="http://pow.cx">Pow*</a> but I am already sold. For offline blogging, <a href="http://pages.github.com">GitHub Pages</a> support, a great set of standard Markdown-ish driven Plugins, etc&hellip; the workflow is great. There are a few things that I am missing like:</p>

<p>My Missing Octopress Items:</p>

<blockquote><ul>
<li>Image Auto Thumbnailing</li>
<li>Image Popups from those Thumbnails</li>
<li>Post Staging (The &lsquo;published: false&rsquo; yaml front matter is a start but&hellip;.)</li>
<li>Auto source directory version control</li>
</ul>
</blockquote>

<p>That last one was my highest proirity. When you run the Octopress GitHub Pages setup, it configures the deployment repo (XXXXXX.github.io), but you still need to backup and/or version control the &lsquo;source&rsquo; directory.</p>

<p>Here is my quick way of doing this using the deployment repo.</p>

<blockquote><ul>
<li>Add a <strong>source</strong> branch your your &ldquo;XXXXXX.github.io&rdquo; repo</li>
<li>Set your local source directory as a <strong>single branch</strong> of that repo</li>
<li>Commit and Push after you do a <em>rake deploy</em></li>
</ul>
</blockquote>

<p>So lets add a source branch to your GitHub Page repo:
        Note: This is my quick way (ie. hackie) to get an <strong><em>EMPTY</em> new <em>remote</em> branch</strong> into an existing repo. If someone knows a better way, I&rsquo;d love to hear it.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Get your current repo and place it into a a temp directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/sushihangover.github.io.git&quot;</span>&gt;https://github.com/sushihangover/sushihangover.github.io.git&lt;/a&gt; foo.bar
</span><span class='line'><span class="nb">pushd </span>foo.bar&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add a new branch to your <span class="nb">local </span>copy&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git checkout -b <span class="nb">source</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Delete all the existing context&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rm -Rf *&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Commit all those deletes&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git commit <span class="p">&amp;</span>ndash<span class="p">;</span>all <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">message</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>Initial Empty <span class="nb">source </span>branch<span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Push that emopty branch back to GitHub&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git push
</span><span class='line'><span class="nb">popd</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;GEt rid of that temp. directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rm -Rf foo.bar
</span></code></pre></td></tr></table></div></figure></p>

<p>You already have an existing source directory and if you did not change the _config.yaml defaults is under your Octopress directory and those files need to be placed in this new source branch you just created.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Move your existing <span class="nb">source </span>directory out of the way <span class="k">for</span> now&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mv <span class="nb">source </span>source.org&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Clone your GitHub Page repo BUT only a single branch of it, only the <span class="nb">source </span>branch and into a directory named <span class="nb">source</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Note: The <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>ndash<span class="p">;</span>single-branch -branch <span class="nb">source</span><span class="p">&amp;</span>rdquo<span class="p">;</span> options are not used by most git users but can make speciallized repo copies quick and fool-proof&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git clone <span class="p">&amp;</span>ndash<span class="p">;</span>single-branch -branch <span class="nb">source</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/sushihangover.github.io.git&quot;</span>&gt;https://github.com/sushihangover/sushihangover.github.io.git&lt;/a&gt; <span class="nb">source</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Now copy your existing <span class="nb">source </span>files into this empty repo directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cp -R source.org <span class="nb">source</span>
</span><span class='line'><span class="nb">pushd source</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Commit and Push your sources files to GitHub&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git commit <span class="p">&amp;</span>ndash<span class="p">;</span>all <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">message</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>Initial <span class="nb">source </span>branch commit<span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add your commit comment and save&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git push
</span></code></pre></td></tr></table></div></figure></p>

<p>Now you have two branches in your Pages repo. <strong>master</strong> will be your deployed/published blog pages and <strong>source</strong> will be the content Octopress uses to create those pages.</p>

<p>Now, anytime you need to <strong>backup work-in-progress</strong> source changes or after you you do a <strong>rake deploy</strong> you can just do this:
<code>
pushd source; git commit --all --message="Blog updated"; git push; popd
</code>
I&rsquo;ll be including this in the Github Page deploy plugin in the future so everytime I publish (deploy) I will also get a matching commit to the source branch&hellip;. But that and the other items on the Todo list will have to wait till later&hellip; ;-)</p>

<ul>
<li>Pow is a zero-config Rack server for Mac OS X : <a href="http://get.pow.cx/media/screencast.mov">Watch Me</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to GitHub Pages]]></title>
    <link href="http://sushihangover.github.io/blog/moving-to-github-pages/"/>
    <updated>2014-02-09T16:49:16-08:00</updated>
    <id>http://sushihangover.github.io/blog/moving-to-github-pages</id>
    <content type="html"><![CDATA[<p>I am moving <strong><a href="http://sushihangover.blogspot.com">SushiHangover</a></strong> from Blogger and an Azure-based blog engine to GitHub Pages using Octopress so hang in there for a few days as I get the older content parsed and set to use markdown&hellip;</p>

<p>As always, email or post a comment if you need anything.</p>

<p>-R</p>

<p><img src="http://sushihangover.github.io/images/PowerShellLogo.jpg" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
