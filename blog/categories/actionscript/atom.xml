<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Actionscript | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/actionscript/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-08T11:14:19-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keeping a GitHub Fork Up to Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<p>{% codeblock lang:bash %}
git remote -v
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (fetch)
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (push)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (fetch)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (push)
{% endcodeblock %}</p>

<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<p>{% codeblock lang:bash %}
cd ../PlayScript-master
git fetch upstream
git merge upstream/master
git push origin
make
make install
{% endcodeblock %}</p>

<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript :What Happened to the Open Source Version on GitHub]]></title>
    <link href="http://sushihangover.github.io/playscript-what-happened-to-the-open-source-version-on-github/"/>
    <updated>2013-12-27T19:04:55-08:00</updated>
    <id>http://sushihangover.github.io/playscript-what-happened-to-the-open-source-version-on-github</id>
    <content type="html"><![CDATA[<p>Poof: An open source project disappears: <a href="https://github.com/playscript/playscript-mono.git">https://github.com/playscript/playscript-mono.git</a></p>

<p>{% img left /images/Playscript404.gif 360 240 &lsquo;PlayScript, Going, going, gone&rsquo; %}
I am assuming with removal of PlayScript&rsquo;s public repo on GitHub that the project is either becoming a commercial offering from Xamarin (or Zynga) and future releases will have a license change?</p>

<p>I am assuming there will be some big reveal in the future when Xamarin (and Zynga?) announces Playscript is in Beta for licensed users of Studio, Xamarin.iOS and Xamarin.Andriod, &hellip;. Or Not&hellip;..</p>

<blockquote><p>The really important note here is if someone pulls a GitHub repo, you will <strong>LOSE</strong> your GitHub forks! Gone, Poof, No <em>Mas</em>, No warning, No chance to make a backup&hellip; I sure hope you had a complete local backup of your work cause it is now gone from GitHub</p></blockquote>
]]></content>
  </entry>
  
</feed>
