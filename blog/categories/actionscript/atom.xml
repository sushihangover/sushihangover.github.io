<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Actionscript | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/actionscript/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-08-03T13:15:21-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Intermediate Particle Explosions]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-firedemowithscout/"/>
    <updated>2015-08-03T16:12:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-firedemowithscout</id>
    <content type="html"><![CDATA[<p>This is the Away3d Fire example running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler and using Adobe&rsquo;s <a href="http://www.adobe.com/devnet/scout.html">Scout</a> to profile it. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<p>{% youtube dVeQpB9BPo %}</p>

<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Basic_Fire.as">Away3d example source code that is running in the demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Particles With Play Script Logo]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-intermediate-playscript/"/>
    <updated>2015-07-29T17:05:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-intermediate-playscript</id>
    <content type="html"><![CDATA[<p>This demo uses the the Away3d Intermediate Particle Explosions example as a base, but I reworked it slightly to use the PlayScript logo. It is running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<p>{% youtube uhjTZjlo5YA %}</p>

<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_PlayScriptParticleExplosions.as">Away3d example source code that is running in the demo</a></p>

<p>Previous Away3d example: <a href="http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions/">Play Script | Away3d World Global Example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Intermediate Particle Explosions]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions/"/>
    <updated>2015-07-24T14:01:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions</id>
    <content type="html"><![CDATA[<p>This is the Away3d Intermediate Particle Explosions example running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<p>{% youtube KXi85ajraaM %}</p>

<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_ParticleExplosions.as">Away3d example source code that is running in the demo</a></p>

<p>Previous Away3d example: <a href="http://sushihangover.github.io/playscript-away3d-world-global-example/">Play Script | Away3d World Global Example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d World Global Example]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-world-global-example/"/>
    <updated>2015-07-23T18:17:12-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-world-global-example</id>
    <content type="html"><![CDATA[<p>I finally got all the bits together to get the OS-X OpenGL version of the <a href="http://playscriptredux.github.io">PlayScript</a> flash stage running the <a href="http://away3d.com">Away3d</a> 3D engine.</p>

<p>500 ActionScript files with over 20000 lines of actual code from <a href="https://github.com/PlayScriptRedux/away3d-core-fp11">away3d-core-fp11</a> and <a href="https://github.com/PlayScriptRedux/away3d-examples-fp11">away3d-examples-fp11</a> compiled to <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language">CIL</a> using the PlayScript mcs compiler. :-)</p>

<p>{% youtube XlC93cXRlgI %}</p>

<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_Globe.as">Away3d example source code that is running in the demo</a></p>

<pre><code>&gt;cloc away3d-core-fp11
     464 text files.
     464 unique files.
      16 files ignored.

http://cloc.sourceforge.net v 1.62  T=3.45 s (130.1 files/s, 23410.8 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ActionScript                   443          12601          12443          54059
MSBuild script                   3              0              0           1551
C#                               3             39             11            111
-------------------------------------------------------------------------------
SUM:                           449          12640          12454          55721
-------------------------------------------------------------------------------
&gt;cloc away3d-examples-fp11
     110 text files.
     109 unique files.
      60 files ignored.

http://cloc.sourceforge.net v 1.62  T=5.05 s (10.5 files/s, 3247.7 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
ActionScript                    36           1936           2592           8073
Javascript                       2            121            148           1186
MSBuild script                   3              0              0            808
C#                               7            414             99            740
XML                              2             19             10            105
HTML                             2              7             29            102
CSS                              1              1              1              4
-------------------------------------------------------------------------------
SUM:                            53           2498           2879          11018
-------------------------------------------------------------------------------
</code></pre>

<p>Note: <a href="http://www.telestream.net/screenflow/overview.htm">ScreenFlow</a> is running on the background so the world rotation is a little choppy at times, without the screen/video capture running, the example runs at 60 fps @ 4% CPU on this old MacBookPro with a Intel Core 2 Duo 2.53 GHz processor.</p>

<p>FYI: ScreenFlow is a <strong>must</strong> have if you are screen capturing video on OS-X. It really is the <em>bomb</em> at what it does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping A Git Hub Fork Up To Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<p>{% codeblock lang:bash %}
git remote -v
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (fetch)
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (push)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (fetch)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (push)
{% endcodeblock %}</p>

<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<p>{% codeblock lang:bash %}
cd ../PlayScript-master
git fetch upstream
git merge upstream/master
git push origin
make
make install
{% endcodeblock %}</p>

<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
</feed>
