<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: merge | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/merge/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-08T10:10:03-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git - Review a Merge before committing]]></title>
    <link href="http://sushihangover.github.io/git-review-a-merge-before-committing/"/>
    <updated>2015-06-24T09:44:07-07:00</updated>
    <id>http://sushihangover.github.io/git-review-a-merge-before-committing</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a> %} After you perform a fetch on an upstream or someone&rsquo;s forked repo, you want to review the changes before committing them.</p>

<p>You can not do a what-if or a dry-run merge but it does not matter as git is your friend in this matter. Just do the merge and review it, BUT, do not let it commit or fast forward during the merge.</p>

<pre><code>git merge --no-commit --no-ff branchname
</code></pre>

<p>Without the <strong>&ndash;no-ff</strong> flag, if Git can do a fast-forward then it will do that and commit anyway <em>despite</em> the &ndash;no-commit flag.</p>

<p>Setup an alias in your ~/.gitconfig for a simple shortcut</p>

<pre><code>review = merge --no-ff --no-commit
</code></pre>

<p>So in looking at upstream changes:</p>

<pre><code>git fetch upstream
git review upstream/master
git status
</code></pre>

<p>If you wish to back those changes, just reset that merge:</p>

<pre><code>git reset --merge
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X : Using DiffMerge as your Git visual merge and diff tool]]></title>
    <link href="http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool/"/>
    <updated>2014-02-19T20:56:11-08:00</updated>
    <id>http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool</id>
    <content type="html"><![CDATA[<p><a href="/images/diffmerge_large.png">{% img right /images/diffmerge_small.png &ldquo;LLVM vs. GCC code generation for Bare Metal ARM development&rdquo; %}</a>
I tend to stay on the cmd line as much as possible, but for visual diffs, an ncurses console diff tool just does not cut it for me. <a href="http://www.scootersoftware.com/moreinfo.php">Beyond Compare Pro</a> by <a href="http://www.scootersoftware.com/index.php">Scooter</a> on Windows is one of best that I have ever used and with licenses at work I never had to worry about not having it on a work desktop or laptop.</p>

<p>But on OS-X at home, Beyond Compare was not available. There is a 4.0 release in the works (beta now), but $50.00 USD for a personal-use copy on OS-X and not having feature parity with Windows Pro features(?), I just can not pull the trigger on that purchuse when there are other
(cheaper) options that work just as well for personal development.</p>

<p>So, normally for a <strong>free</strong> visual diff, you can not beat <a href="http://meldmerge.org">meld</a>, it is a great open-source tool, but on OS-X it fires up X (Quartz for me) and it getting long in the tooth in terms of the GUI&rsquo;s human factors (feature set is still great). If there was a Qt version of this, the search would be over&hellip; free or not!</p>

<p>So some searching landed me on an old post by <a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">Todd Huss</a> about using DiffMerge as your visual diff/merge for git and it was actually what I was looking for, well almost ;-) It is missing a few features, but they have a free version and it works really well and has a great OS-X interface&hellip; search is over for now&hellip;</p>

<blockquote><p><a href="http://www.sourcegear.com/diffmerge/">SourceGear</a> has a $19.00 USD version that include file export with HTML formatting and if I could see example HTML code that it produces, I pay for that feature in a heart-beat, but the feature is completely locked out till you actaully register, bummer&hellip;</p></blockquote>

<p>Todd recommends using the DiffMerge installer version vs. the dmg version, I go the other way on that. Download the dmg version, open it and drag/drop the app to your Applications. Then in a term window you can copy the <em>Extras/diffmerge.sh</em> to your <em>/usr/local/bin</em> directory (Execute attrib is already set, so no chmod needed..), but I copied it as just <em>vdiff</em> as that is quicker to type. No admin rights are need to install it that way and that makes me happy&hellip; I can <em>vdiff file1.c file2.c</em> on the cmd line to pop the GUI open and populate it.</p>

<p>I then used the git setup he has listed and everything is working great so far. Click on the image above to it comparing the disassembly of <a href="/images/diffmerge_large.png">LLVM vs. GCC code generation for bare metal ARM</a> development.</p>

<p>{% codeblock lang:bash Your git setup is: %}
git config &ndash;global diff.tool diffmerge
git config &ndash;global difftool.diffmerge.cmd &lsquo;diffmerge &ldquo;$LOCAL&rdquo; &ldquo;$REMOTE&rdquo;&rsquo;
git config &ndash;global merge.tool diffmerge
git config &ndash;global mergetool.diffmerge.cmd &lsquo;diffmerge &ndash;merge &ndash;result=&ldquo;$MERGED&rdquo; &ldquo;$LOCAL&rdquo; &ldquo;$(if test -f &rdquo;$BASE"; then echo &ldquo;$BASE&rdquo;; else echo &ldquo;$LOCAL&rdquo;; fi)&ldquo; &rdquo;$REMOTE"&rsquo;
git config &ndash;global mergetool.diffmerge.trustExitCode true
{% endcodeblock %}</p>

<p>{% codeblock lang:bash Your git shortcuts are: linenos:false %}</p>

<h1>diff the local file.m against the checked-in version</h1>

<p>git difftool file.m</p>

<h1>diff the local file.m against the version in some-feature-branch</h1>

<p>git difftool some-feature-branch file.m</p>

<h1>diff the file.m from the Build-54 tag to the Build-55 tag</h1>

<p>git difftool Build-54..Build-55 file.m</p>

<h1>To resolve merge conflicts, just run git mergetool:</h1>

<p>git mergetool
{% endcodeblock %}</p>

<p>Thanks <a href="http://twobitlabs.com">Todd</a>, works great.</p>
]]></content>
  </entry>
  
</feed>
