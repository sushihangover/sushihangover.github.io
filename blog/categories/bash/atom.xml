<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-09-25T10:59:53-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using redirection within xargs]]></title>
    <link href="http://sushihangover.github.io/using-redirection-within-xargs/"/>
    <updated>2015-11-28T06:29:15-08:00</updated>
    <id>http://sushihangover.github.io/using-redirection-within-xargs</id>
    <content type="html"><![CDATA[<p>I needed to convert a bunch of AppleScript <code>.scpt</code> files to uncompiled <code>.txt</code> files, so a simple <code>find</code> piped to <code>xargs</code> and I&rsquo;ll be done&hellip; well&hellip;</p>

<p>OS-X provides a <code>osadecompile</code> cmd that will read a <code>.scpt</code> file and output the text to <code>stdout</code> (It does not provide a output file option). So a simple redirection and I should be done:</p>

<pre><code># This will not work, you will end up with a file 
# named {}.txt that includes the test of all the scripts
find *.scpt -print0 | xargs -0 -n 1 -I {} osadecompile '{}' &gt; '{}.txt' 
</code></pre>

<p>But that will not work as the redirection applies to the <code>xargs</code> cmd, not the <code>osadecompile</code> cmd that xargs is calling. So a quick fix is to create a subshell and include the redirection in the passed cmd string (via <code>-c</code>)</p>

<p>So this will work:</p>

<pre><code>find *.scpt -print0 | xargs -0 -n 1 -I {} sh -c "osadecompile '{}' &gt; '{}.txt'"
</code></pre>

<p>Still simple enough, and since I only have a couple of dozen files in this case the performance impact of creaing subshells is not a problem&hellip;</p>

<p><strong>Homework:</strong> How would you get around this in using a bash <a href="https://en.wikipedia.org/wiki/One-liner_program">one-liner</a> without a subshell?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell and Bash 'Dot' Sourcing]]></title>
    <link href="http://sushihangover.github.io/powershell-and-bash-dot-sourcing/"/>
    <updated>2014-02-17T06:21:11-08:00</updated>
    <id>http://sushihangover.github.io/powershell-and-bash-dot-sourcing</id>
    <content type="html"><![CDATA[<p>Parent/Child scoping of variables and functions can really mess with people starting out with PowerShell (or Bash).</p>

<p>In terms of &ldquo;Dot-sourcing&rdquo; a .ps1 file, it is like running the PowerShell script it contains <strong>inline</strong> in the current scope. Thus when that script finishes, any variables set/updated within it are changed within the current scope.</p>

<p>Let create a .ps1 file that increments the variable $x by one and &lsquo;outputs&rsquo; it to the pipe:</p>

<pre><code>echo "`$x++;`$x;" &gt; inc_x_by_one.ps1
</code></pre>

<p>Now assign the variable $x to be 1</p>

<pre><code>$x=1
$x
1
</code></pre>

<p>Now run the <em>inc_x_by_one.ps1</em> routine:</p>

<pre><code>.\inc_x_by_one.ps1
2
</code></pre>

<p>So we got a result of 2 which is what you wanted right? Well, maybe&hellip; Let run the same thing again:</p>

<pre><code>.\inc_x_by_one.ps1
2
$x
1
</code></pre>

<p>What? Why is it not 3(?), and it is still 1!!! Well that is because the $x++ is executing in a <em>child scope</em>. Basically your script is getting a copy of $x, not a reference (pointer) to that variable. Same thing that you experience in passing variables to functions in C, C#, Java, etc&hellip;</p>

<p>If your desire is to actually change $x in your shell (the current scope), you can &lsquo;dot-source&rsquo; the call.</p>

<pre><code>. .\inc_x_by_one.ps1
2
. .\inc_x_by_one.ps1
3
$x
3
</code></pre>

<p>This is compariable to the way shell variables work under bash, zsh, &hellip; and I&rsquo;m assuming the PowerShell term borrowed &lsquo;dot sourcing&rsquo; in that regard as the syntax if the same: <strong>Period Space File.ps1|.sh</strong></p>

<p>Take a few minutes and read the help on <strong>scope</strong>, it just might save you a headache in the future ;-)</p>

<pre><code>help scope
</code></pre>

<p>Note: In PowerShell, you can assign variables to the global scope and not &lsquo;worry&rsquo; about parent/child scoping rules. Normally this is not a preferred way  as it create it creates messy code, issues of which function/module is changing it, debugging nightmares, etc&hellip;</p>
]]></content>
  </entry>
  
</feed>
