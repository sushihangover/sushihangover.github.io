<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-07-16T20:24:21-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git - Turn Multiple Commits Into a Single Commit]]></title>
    <link href="http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit/"/>
    <updated>2015-06-30T18:10:36-07:00</updated>
    <id>http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> Getting ready for an upstream pull request? You really need to turn it into a single commit for a clean request that will result in a fast-forward merge.</p>

<h3>Switch to the upstream/master branch and make sure you are up to date.</h3>

<pre><code>git checkout master
git fetch upstream/master   
git merge master
</code></pre>

<h3>Create a new feature/topic branch:</h3>

<pre><code>git checkout -b MyPullRequest
git merge MyMultiCommitBranch
</code></pre>

<h3>Reset the branch to origin&rsquo;s state.</h3>

<pre><code>git reset origin/MyPullRequest
git status
</code></pre>

<p><strong>Note: Git now considers all changes as unstaged changes.</strong></p>

<h3>We can add these changes as one commit.</h3>

<pre><code>git add --all
git commit
</code></pre>

<p>You can push those changes to your remote repo and then issue that pull request to the upstream that you forked from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Create a New Branch With Non-commited Changes]]></title>
    <link href="http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes/"/>
    <updated>2015-06-29T05:28:05-07:00</updated>
    <id>http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> Have you started making changes and than realize that you should have created a new branch first. Well, there is a slick way to create a new branch and have those changes &lsquo;moved&rsquo; to from master to your topic (the new branch).</p>

<pre><code>git branch newbranch
git reset --hard HEAD
git checkout newbranch
</code></pre>

<p>This works even if you have made commits to your local branch, just subsititute <strong>HEAD</strong> with the number of commits back you would like to go, i.e. <strong>HEAD~2</strong>, or use the SHA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Review a Merge Before Committing]]></title>
    <link href="http://sushihangover.github.io/git-review-a-merge-before-committing/"/>
    <updated>2015-06-24T09:44:07-07:00</updated>
    <id>http://sushihangover.github.io/git-review-a-merge-before-committing</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> After you perform a fetch on an upstream or someone&rsquo;s forked repo, you want to review the changes before committing them.</p>

<p>You can not do a what-if or a dry-run merge but it does not matter as git is your friend in this matter. Just do the merge and review it, BUT, do not let it commit or fast forward during the merge.</p>

<pre><code>git merge --no-commit --no-ff branchname
</code></pre>

<p>Without the <strong>&ndash;no-ff</strong> flag, if Git can do a fast-forward then it will do that and commit anyway <em>despite</em> the &ndash;no-commit flag.</p>

<p>Setup an alias in your ~/.gitconfig for a simple shortcut</p>

<pre><code>review = merge --no-ff --no-commit
</code></pre>

<p>So in looking at upstream changes:</p>

<pre><code>git fetch upstream
git review upstream/master
git status
</code></pre>

<p>If you wish to back those changes, just reset that merge:</p>

<pre><code>git reset --merge
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git : Your Github Based Fork's Pull Request Is Rejected, Kind-of, Now What?]]></title>
    <link href="http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what/"/>
    <updated>2015-06-24T07:46:41-07:00</updated>
    <id>http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> So you have a Github fork of a project and you find a problem. You whip up a fix, commit it in a local branch and push it to your fork you Github. Than you issue a pull request to the upstream repo. Life is good. <img class="right <a" src="href="http://sushihangover.github.io/images/github_logo.png">http://sushihangover.github.io/images/github_logo.png</a>"></p>

<p>But&hellip; your pull request is &lsquo;rejected&rsquo;, kind-of, as the fix is applied differently to their branch. Now your GitHub and local repo are history mismatched to the upstream master. Fetching upstream and merging upstream/master produces conflicts ;-(</p>

<p>First, I do not want to lose the commit that I did do. I want to keep the work/history so a &lsquo;simple&rsquo; git hard reset to a prior sha is out of the question.</p>

<p>So lets put your changes on a new branch and reset the master branch back to match the upstream.</p>

<h3>Move last commit to a new branch</h3>

<p>Note: You <em>will</em> lose uncommitted work, stash first if needed!</p>

<pre><code>git branch newbranch
git reset --hard HEAD~1 # Go back 1 commit or use SHA
git checkout newbranch
</code></pre>

<h3>Re-sync your Github fork</h3>

<p>Now, lets get everything re-sync&rsquo;d.</p>

<pre><code>git checkout master
</code></pre>

<p>Since you already push this branch to your Github fork, you will see the message:</p>

<pre><code>"Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded."
</code></pre>

<p>That contains <em>your</em> fix, but you need to merge in the upstream/master changes.</p>

<pre><code>git fetch upstream
git merge upstream/master
</code></pre>

<p>And your local master should <em>Fast-forward</em> to match the upstream. All is good, except your repo on Github is not correct as it contains your original commit on the wrong branch.</p>

<pre><code>git push --force
</code></pre>

<p>If you want to keep (backup) that new branch to Github than use the following instead:</p>

<pre><code>git push --all --force
</code></pre>

<p><strong>Note:</strong> You should not be forcing a push if others have already pulled from your repo/fork. That causes bad git mojo and everyone else that pulled your repo will need to be notified that you &lsquo;changed&rsquo; history&hellip; That is a git fixup story for another day.</p>

<h3>Moral of the story:</h3>

<p>Create a bugfix branch with your fixes. It should have one commit (rebase if needed) that will fast-forward and issue your pull-request from that branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Set Up a Fetch-only Remote | Disabling Push]]></title>
    <link href="http://sushihangover.github.io/git-set-up-a-fetch-only-remote/"/>
    <updated>2015-06-14T14:57:37-07:00</updated>
    <id>http://sushihangover.github.io/git-set-up-a-fetch-only-remote</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> The PlayScript repo on the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> Github organization I maintain is a down-stream fork of <a href="https://github.com/mono/mono">Mono</a> so I can fetch the changes to their master branch. I also have my own <a href="https://github.com/sushihangover/playscript">fork</a> of the PlayScript repo so I can code, issue pull-requests and review other people&rsquo;s pull-requests. But I do not want to screw up and push directly to the <a href="https://github.com/PlayScriptRedux/playscript">Redux based repo</a> from my local repo, only my own fork on GitHub. Also I do not have any push permissions on the Mono repo and want to not even have git try to push to that repo if I screw up on the cmd line.</p>

<p>So after adding my additional remotes my local repo, it looks like this:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   https://github.com/PlayScriptRedux/playscript.git (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    https://github.com/mono/mono.git (push)
</code></pre>

<p>I want to keep the fetch/pull ability from the redux and upstream remotes and remove the  &lsquo;push&rsquo; ability to those remotes.</p>

<p>You can not totally clear the push uri as it will be replaced with the fetch uri. So setting the push uri to something nonexistent works, i.e.</p>

<pre><code> git remote set-url --push upstream DISABLE
 git remote set-url --push redux DISABLE
</code></pre>

<p>And to see what that looks like now:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   DISABLE (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    DISABLE (push)
</code></pre>

<p>Now if you push to the one of the &lsquo;disable&rsquo; remotes, you will recieve the following error:</p>

<pre><code>git push redux
fatal: 'DISABLE' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>NOTE: You do not have to use &ldquo;DISABLE&rdquo;, any nonsensical URI will do. I like DISABLE as seeing it in the git push error message is a clear indicator of the brain fart that I just typed&hellip;</p>
]]></content>
  </entry>
  
</feed>
