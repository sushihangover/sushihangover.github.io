<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2014-04-22T16:01:21-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[Robert N.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS-X : Using DiffMerge as Your Git Visual Merge and Diff Tool]]></title>
    <link href="http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool"/>
    <updated>2014-02-19T20:56:11-08:00</updated>
    <id>http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool</id>
    <content type="html"><![CDATA[<p><a href="/images/diffmerge_large.png">{% img right /images/diffmerge_small.png &ldquo;LLVM vs. GCC code generation for Bare Metal ARM development&rdquo; %}</a>
I tend to stay on the cmd line as much as possible, but for visual diffs, an ncurses console diff tool just does not cut it for me. <a href="http://www.scootersoftware.com/moreinfo.php">Beyond Compare Pro</a> by <a href="http://www.scootersoftware.com/index.php">Scooter</a> on Windows is one of best that I have ever used and with licenses at work I never had to worry about not having it on a work desktop or laptop.</p>

<p>But on OS-X at home, Beyond Compare was not available. There is a 4.0 release in the works (beta now), but $50.00 USD for a personal-use copy on OS-X and not having feature parity with Windows Pro features(?), I just can not pull the trigger on that purchuse when there are other
(cheaper) options that work just as well for personal development.</p>

<p>So, normally for a <strong>free</strong> visual diff, you can not beat <a href="http://meldmerge.org">meld</a>, it is a great open-source tool, but on OS-X it fires up X (Quartz for me) and it getting long in the tooth in terms of the GUI&rsquo;s human factors (feature set is still great). If there was a Qt version of this, the search would be over&hellip; free or not!</p>

<p>So some searching landed me on an old post by <a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">Todd Huss</a> about using DiffMerge as your visual diff/merge for git and it was actually what I was looking for, well almost ;&ndash;) It is missing a few features, but they have a free version and it works really well and has a great OS-X interface&hellip; search is over for now&hellip;</p>

<blockquote><p><a href="http://www.sourcegear.com/diffmerge/">SourceGear</a> has a $19.00 USD version that include file export with HTML formatting and if I could see example HTML code that it produces, I pay for that feature in a heart-beat, but the feature is completely locked out till you actaully register, bummer&hellip;</p></blockquote>

<p>Todd recommends using the DiffMerge installer version vs. the dmg version, I go the other way on that. Download the dmg version, open it and drag/drop the app to your Applications. Then in a term window you can copy the <em>Extras/diffmerge.sh</em> to your <em>/usr/local/bin</em> directory (Execute attrib is already set, so no chmod needed..), but I copied it as just <em>vdiff</em> as that is quicker to type. No admin rights are need to install it that way and that makes me happy&hellip; I can <em>vdiff file1.c file2.c</em> on the cmd line to pop the GUI open and populate it.</p>

<p>I then used the git setup he has listed and everything is working great so far. Click on the image above to it comparing the disassembly of <a href="/images/diffmerge_large.png">LLVM vs. GCC code generation for bare metal ARM</a> development.</p>

<p>{% codeblock lang:bash Your git setup is: %}
git config &mdash;global diff.tool diffmerge
git config &mdash;global difftool.diffmerge.cmd &lsquo;diffmerge &ldquo;$LOCAL&rdquo; &ldquo;$REMOTE&rdquo;&rsquo;
git config &mdash;global merge.tool diffmerge
git config &mdash;global mergetool.diffmerge.cmd &lsquo;diffmerge &mdash;merge &mdash;result=&ldquo;$MERGED&rdquo; &ldquo;$LOCAL&rdquo; &ldquo;$(if test -f &rdquo;$BASE"; then echo &ldquo;$BASE&rdquo;; else echo &ldquo;$LOCAL&rdquo;; fi)&ldquo; &rdquo;$REMOTE"&rsquo;
git config &mdash;global mergetool.diffmerge.trustExitCode true
{% endcodeblock %}</p>

<p>{% codeblock lang:bash Your git shortcuts are: linenos:false %}</p>

<h1>diff the local file.m against the checked-in version</h1>

<p>git difftool file.m</p>

<h1>diff the local file.m against the version in some-feature-branch</h1>

<p>git difftool some-feature-branch file.m</p>

<h1>diff the file.m from the Build-54 tag to the Build-55 tag</h1>

<p>git difftool Build-54..Build-55 file.m</p>

<h1>To resolve merge conflicts, just run git mergetool:</h1>

<p>git mergetool
{% endcodeblock %}</p>

<p>Thanks <a href="http://twobitlabs.com">Todd</a>, works great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Backing Up Your Source Directory]]></title>
    <link href="http://sushihangover.github.io/octopress-backing-up-your-source-directory"/>
    <updated>2014-02-12T21:00:12-08:00</updated>
    <id>http://sushihangover.github.io/octopress-backing-up-your-source-directory</id>
    <content type="html"><![CDATA[<p>It has only been a couple of days using <a href="http://octopress.org">Octopress</a> and <a href="http://pow.cx">Pow*</a> but I am already sold. For offline blogging, <a href="http://pages.github.com">GitHub Pages</a> support, a great set of standard Markdown-ish driven Plugins, etc&hellip; the workflow is great. There are a few things that I am missing like:</p>

<p>My Missing Octopress Items:</p>

<blockquote><ul>
<li>Image Auto Thumbnailing</li>
<li>Image Popups from those Thumbnails</li>
<li>Post Staging (The &lsquo;published: false&rsquo; yaml front matter is a start but&hellip;.)</li>
<li>Auto source directory version control</li>
</ul>
</blockquote>

<p>That last one was my highest proirity. When you run the Octopress GitHub Pages setup, it configures the deployment repo (XXXXXX.github.io), but you still need to backup and/or version control the &lsquo;source&rsquo; directory.</p>

<p>Here is my quick way of doing this using the deployment repo.</p>

<blockquote><ul>
<li>Add a <strong>source</strong> branch your your &ldquo;XXXXXX.github.io&rdquo; repo</li>
<li>Set your local source directory as a <strong>single branch</strong> of that repo</li>
<li>Commit and Push after you do a <em>rake deploy</em></li>
</ul>
</blockquote>

<p>So lets add a source branch to your GitHub Page repo:</p>

<pre><code>    Note: This is my quick way (ie. hackie) to get an ***EMPTY* new *remote* branch** into an existing repo. If someone knows a better way, I'd love to hear it.
</code></pre>

<p>``` bash</p>

<h1>Get your current repo and place it into a a temp directory</h1>

<p>git clone <a href="https://github.com/sushihangover/sushihangover.github.io.git">https://github.com/sushihangover/sushihangover.github.io.git</a> foo.bar
pushd foo.bar</p>

<h1>Add a new branch to your local copy</h1>

<p>git checkout -b source</p>

<h1>Delete all the existing context</h1>

<p>rm -Rf *</p>

<h1>Commit all those deletes</h1>

<p>git commit &mdash;all &mdash;message=&ldquo;Initial Empty source branch&rdquo;</p>

<h1>Push that emopty branch back to GitHub</h1>

<p>git push
popd</p>

<h1>GEt rid of that temp. directory</h1>

<p>rm -Rf foo.bar
<code>
You already have an existing source directory and if you did not change the _config.yaml defaults is under your Octopress directory and those files need to be placed in this new source branch you just created.
</code> bash</p>

<h1>Move your existing source directory out of the way for now</h1>

<p>mv source source.org</p>

<h1>Clone your GitHub Page repo BUT only a single branch of it, only the source branch and into a directory named source</h1>

<h1>Note: The &ldquo;&mdash;single-branch -branch source&rdquo; options are not used by most git users but can make speciallized repo copies quick and fool-proof</h1>

<p>git clone &mdash;single-branch -branch source <a href="https://github.com/sushihangover/sushihangover.github.io.git">https://github.com/sushihangover/sushihangover.github.io.git</a> source</p>

<h1>Now copy your existing source files into this empty repo directory</h1>

<p>cp -R source.org source
pushd source</p>

<h1>Commit and Push your sources files to GitHub</h1>

<p>git commit &mdash;all &mdash;message=&ldquo;Initial source branch commit&rdquo;</p>

<h1>Add your commit comment and save</h1>

<p>git push
```
Now you have two branches in your Pages repo. <strong>master</strong> will be your deployed/published blog pages and <strong>source</strong> will be the content Octopress uses to create those pages.</p>

<p>Now, anytime you need to <strong>backup work-in-progress</strong> source changes or after you you do a <strong>rake deploy</strong> you can just do this:
<code>
pushd source; git commit --all --message="Blog updated"; git push; popd
</code>
I&rsquo;ll be including this in the Github Page deploy plugin in the future so everytime I publish (deploy) I will also get a matching commit to the source branch&hellip;. But that and the other items on the Todo list will have to wait till later&hellip; ;&ndash;)</p>

<ul>
<li>Pow is a zero-config Rack server for Mac OS X : <a href="http://get.pow.cx/media/screencast.mov">Watch Me</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
