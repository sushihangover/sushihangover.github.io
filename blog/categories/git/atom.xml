<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-03T17:09:06-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SmartGit - the Best Git GUI There Is... And Its Free]]></title>
    <link href="http://sushihangover.github.io/blog/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free/"/>
    <updated>2015-06-03T15:06:35-07:00</updated>
    <id>http://sushihangover.github.io/blog/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free</id>
    <content type="html"><![CDATA[<p>{% img left <a href="http://sushihangover.github.io/images/smartgit.png">http://sushihangover.github.io/images/smartgit.png</a> %}  {% pullquote %}  <a href="http://www.syntevo.com">Syntevo&rsquo;s</a> <a href="http://www.syntevo.com/smartgit/">SmartGit</a> is a Git client with Mercurial and Subversion support, and while I can not comment on its mg or svn support, its git and GitHub support is amazing. And the best thing is {&ldquo; SmartGit is free for non-commercial use and runs on Mac OS X, Windows and Linux &rdquo;}. Commercial licenses seem to be very reasonable and on par with other commercial git products. {% endpullquote %}</p>

<p>When you are merging or rebasing hundreds of changing, doing that by hand from the cmd line is dreadful&hellip; I&rsquo;ve been merging the newer branches of Mono into PlayScript and it can be painful since the Apache open-source version PlayScript was pulled by Zynga from Github two years ago without warning.  When you are looking at hundreds of commits, and in a couple of cases, thousands of changes in between release tags and branches of Mono, doing that via the cmd line is doable, but it will give you nightmares. The SmartGui interface just works; walking the source tree, staging/unstaging, ours/theirs resolver, 3-way visual resolver/merge, markdown support, Github integration,  etc&hellip; is just fast and clean and once you learn a few keystroke shortcuts that merge do done in a heartbeat. ;-)</p>

<p>I&rsquo;ve used a couple of <a href="http://www.git-scm.com/downloads/guis">other git GUIs</a> and merging and rebasing in them just not seem intuitive and the speed of their interfaces when dealing with a repo as large as Mono is killing me and I&rsquo;ve ended up back in the cmd line.</p>

<p>I&rsquo;m not going to do a <a href="http://www.git-scm.com/downloads/guis">full and comparative review</a> as this product is free for non-commercial use, so just download a copy and take it for a test drive yourself. I doubt you would will be disappointed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping a GitHub Fork Up to Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/blog/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/blog/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<p>{% codeblock lang:bash %}
git remote -v
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (fetch)
origin  <a href="https://github.com/sushihangover/PlayScript.git">https://github.com/sushihangover/PlayScript.git</a> (push)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (fetch)
upstream    <a href="https://github.com/mono/mono.git">https://github.com/mono/mono.git</a> (push)
{% endcodeblock %}</p>

<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<p>{% codeblock lang:bash %}
cd ../PlayScript-master
git fetch upstream
git merge upstream/master
git push origin
make
make install
{% endcodeblock %}</p>

<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undo Your Most Recent (Screwed Up) Git Merge]]></title>
    <link href="http://sushihangover.github.io/blog/undo-your-most-recent-screwed-up-git-merge/"/>
    <updated>2015-05-28T18:24:08-07:00</updated>
    <id>http://sushihangover.github.io/blog/undo-your-most-recent-screwed-up-git-merge</id>
    <content type="html"><![CDATA[<p>Ok, you just have a major brain-fart and you did a merge from a remote that has more conflicts than the Sahel region&hellip; before you do ANYTHING to your local repo, just do a:</p>

<p>{% codeblock lang:bash %}
git reset &ndash;merge ORIG_HEAD
{% endcodeblock  %}</p>

<p>Or, depending upon your git version, you can also:</p>

<p>{% codeblock lang:bash %}
git merge &ndash;abort
{% endcodeblock %}</p>

<p>The merge is gone and that list of 1000+ file conflicts that scrolled endlessly when you hit the return key will not haunt your dreams tonight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Local Repo as a Remote to a Different Local Repo]]></title>
    <link href="http://sushihangover.github.io/blog/add-a-local-repo-as-a-remote-to-a-different-local-repo/"/>
    <updated>2015-05-27T19:34:36-07:00</updated>
    <id>http://sushihangover.github.io/blog/add-a-local-repo-as-a-remote-to-a-different-local-repo</id>
    <content type="html"><![CDATA[<p>Have a two local repos that you what to mash and merge together so you can live with just one local/remote repo?</p>

<p>Will, you are in luck, git allows a file based uri to be used vs. using https or git protocols.</p>

<p>{% codeblock lang:bash %}
git remote add NewRemoteName /file/path/to/existing/repo/.git
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
git remote add 2013nov22 /Users/administrator/Documents/Code/playscript/playscript-mono-2013nov22-compile/.git
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Accept Another Branch's Changes Without Generated Conflicts]]></title>
    <link href="http://sushihangover.github.io/blog/git-accept-another-branchs-changes-without-generated-conflicts/"/>
    <updated>2015-05-24T17:54:37-07:00</updated>
    <id>http://sushihangover.github.io/blog/git-accept-another-branchs-changes-without-generated-conflicts</id>
    <content type="html"><![CDATA[<p>I not sure when exactly <strong>-Xtheirs</strong> was added to git (~1.7.? timeframe), but it is a great and fast way to replace (overlay) all the changed files from one branch on top of another one without doing an interactive accept of each and every file, or doing a forced merge, etc&hellip; Great for document, multi-media files and other content that gets processed/accepted via a different <strong>pipeline</strong> and in a different branch and needs moved into a production/release branch.</p>

<p>Assuming you are already sitting in the branch that you wish to merge/replace those files <em>into</em>, you can do a <strong>git merge</strong> with the  <strong>-Xtheirs</strong> option and supply the <strong>remote/branch</strong> that the files are <em>coming from</em>:</p>

<p>{% codeblock lang:bash %}
git merge -Xtheirs contentpipeline/version123
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
