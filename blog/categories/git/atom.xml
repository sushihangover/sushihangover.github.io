<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-23T19:15:23-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git: Set Up a Fetch-only Remote | Disabling Push]]></title>
    <link href="http://sushihangover.github.io/git-set-up-a-fetch-only-remote/"/>
    <updated>2015-06-14T14:57:37-07:00</updated>
    <id>http://sushihangover.github.io/git-set-up-a-fetch-only-remote</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>"> The PlayScript repo on the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> Github organization I maintain is a down-stream fork of <a href="https://github.com/mono/mono">Mono</a> so I can fetch the changes to their master branch. I also have my own <a href="https://github.com/sushihangover/playscript">fork</a> of the PlayScript repo so I can code, issue pull-requests and review other people&rsquo;s pull-requests. But I do not want to screw up and push directly to the <a href="https://github.com/PlayScriptRedux/playscript">Redux based repo</a> from my local repo, only my own fork on GitHub. Also I do not have any push permissions on the Mono repo and want to not even have git try to push to that repo if I screw up on the cmd line.</p>

<p>So after adding my additional remotes my local repo, it looks like this:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   https://github.com/PlayScriptRedux/playscript.git (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    https://github.com/mono/mono.git (push)
</code></pre>

<p>I want to keep the fetch/pull ability from the redux and upstream remotes and remove the  &lsquo;push&rsquo; ability to those remotes.</p>

<p>You can not totally clear the push uri as it will be replaced with the fetch uri. So setting the push uri to something nonexistent works, i.e.</p>

<pre><code> git remote set-url --push upstream DISABLE
 git remote set-url --push redux DISABLE
</code></pre>

<p>And to see what that looks like now:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   DISABLE (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    DISABLE (push)
</code></pre>

<p>Now if you push to the one of the &lsquo;disable&rsquo; remotes, you will recieve the following error:</p>

<pre><code>git push redux
fatal: 'DISABLE' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>NOTE: You do not have to use &ldquo;DISABLE&rdquo;, any nonsensical URI will do. I like DISABLE as seeing it in the git push error message is a clear indicator of the brain fart that I just typed&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript - Moved It a Github Organization]]></title>
    <link href="http://sushihangover.github.io/playscript-moved-it-a-github-organization/"/>
    <updated>2015-06-14T08:24:28-07:00</updated>
    <id>http://sushihangover.github.io/playscript-moved-it-a-github-organization</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>">  I transfered my PlayScript repo to an Github organization to help maintain the structure of the project.</p>

<p>The new org is named <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> and any forks should be made from there as it will be the master and now my personal PlayScript repo will also be a fork of that master.</p>

<p>I&rsquo;ll be (slowly) posting the other PlayScript related repo (Starling, Away3d, IDE add-ins, etc.) to the PlayScriptRedux as they are tested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - Deploy and Update Git Source]]></title>
    <link href="http://sushihangover.github.io/octopress-deploy-and-update-git-source/"/>
    <updated>2015-06-08T06:39:42-07:00</updated>
    <id>http://sushihangover.github.io/octopress-deploy-and-update-git-source</id>
    <content type="html"><![CDATA[<p><img src="/images/Octopress_logo.png" alt="" /></p>

<p>I use <a href="http://octopress.org">Octopress</a> for this <a href="https://github.com/sushihangover">GitHub</a> blog and can tend to forget to push the source to Github as it is not part of the &lsquo;rake deploy&rsquo;.</p>

<p>&lsquo;rake deploy&rsquo; only updates the master branch on Github on order to publish the website and instead of hack'ing the deploy function to handle pushing the &lsquo;'source&rsquo; branch also (waiting on the Octopress 3.0 release for that), I wrote a script to handle it all.</p>

<p>This <em>lazy</em> script that does all the steps that I would have to do manually but tend to never do. And it is in my root Octopress directory so it included in my source revisions ;-)</p>

<p>Nothing special: just generates, deploys, adds all on the source branch along with a commit and push. For good measure it then garbage collects the repo to keep everything clean.</p>

<pre><code>#!/usr/bin/env bash
echo "Generate and deploying website"
rake generate
rake deploy
echo "Commiting and pushing source files"
git add --all; 
git commit -m "New posts"; 
git push 
git gc
pushd _deploy
git gc
popd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Renaming a Git Tag]]></title>
    <link href="http://sushihangover.github.io/git-renaming-a-got-tag/"/>
    <updated>2015-06-04T07:39:49-07:00</updated>
    <id>http://sushihangover.github.io/git-renaming-a-got-tag</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>">  Everyone screws up, and that comes to finger flops when typing that new tag name.</p>

<p>If the tag is only local, it is two step process, create a new tag from the old tag and delete the old tag:</p>

<pre><code>git tag new_tag_name old_tag_name
git tag -d old_tag_name
</code></pre>

<p>But if you have pushed that bad tag name to a remote, then you have another two steps. Deleting that remote tag makes use of the refspec reference and only using a destination with an &lsquo;'empty&rsquo; source. Assuming your remote is named origin (git remote -v), than this what you need to do (<u>REMEMBER TO INCLUDE THAT <strong>COLON</strong></u>):</p>

<pre><code>git push origin :refs/tags/old_tag_name
</code></pre>

<p>And push the new tag to your remote so everyone else will receive that new tag on a pull:</p>

<pre><code>git push origin --tags
</code></pre>

<p><strong>Note</strong>: The colon isn&rsquo;t a &ldquo;delete flag&rdquo;. Git push and git pull both accept zero or more refspecs as their final argument(s). Now read about <a href="http://git-scm.com/book/en/v2/Git-Internals-The-Refspec">refspecs</a>, really read it&hellip; . A colon separates source from destination in a refspec. The command git push origin :foo has an empty source and essentially says &ldquo;push nothing to branch foo of origin&rdquo;, or, in other words, &ldquo;make branch foo on origin not exist&rdquo;.</p>

<p><strong>Sub-Note</strong>: This is NOT the same as pushing an <strong>empty</strong> branch or tag, you really are pushing &lsquo;nothing&rsquo; and thus with nothing to reference that tag vanishes (Well I&rsquo;m assuming it exists somewhere till <a href="https://www.kernel.org/pub/software/scm/git/docs/git-gc.html">garbage collection</a> is run)</p>

<p><strong>Sub-Sub-Note</strong>: ;-) Yes, I agree with a lot of others that instead of using an empty source in the ref spec it would be <em>waaaayyyyy</em> more initiative to allow a remote parameter to be passed to the existing branch and tag delete options to do this type of deletion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Getting a List of Files Changed Between Branches]]></title>
    <link href="http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches/"/>
    <updated>2015-06-04T07:01:32-07:00</updated>
    <id>http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches</id>
    <content type="html"><![CDATA[<p>Getting a list of changed files between to different branches or tags could not be any easier when using the &lsquo;&ndash;name-only&rsquo; diff option:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6

configure.in
mcs/class/Facades/Makefile
mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/Makefile
...
</code></pre>

<p>A quickie to get the number of files changed:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6|wc -l
      28
</code></pre>

<p>And using the &lsquo;&ndash;name-status&rsquo; option can get you a nice two column output with the change type attribute with each file name, makes it easy to pipe to those maintenace scripts.</p>

<pre><code>git diff --name-status mono-3.2.5 mono-3.2.6
M       configure.in
M       mcs/class/Facades/Makefile
M       mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
A       mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
</code></pre>

<p><strong>Note</strong>: You can feed the &lsquo;&ndash;no-color&rsquo; option to make sure that none of those ansi escape codes get send down-stream in your pipe.</p>

<p><strong>Note</strong>: &lsquo;&ndash;'porcelain&rsquo; works within the diff mode sub-option but not as a primary option.</p>
]]></content>
  </entry>
  
</feed>
