<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-08T11:24:41-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress - Deploy and Update Git Source]]></title>
    <link href="http://sushihangover.github.io/octopress-deploy-and-update-git-source/"/>
    <updated>2015-06-08T06:39:42-07:00</updated>
    <id>http://sushihangover.github.io/octopress-deploy-and-update-git-source</id>
    <content type="html"><![CDATA[<p><img src="/images/Octopress_logo.png" alt="" /></p>

<p>I use <a href="http://octopress.org">Octopress</a> for this <a href="https://github.com/sushihangover">GitHub</a> blog and can tend to forget to push the source to Github as it is not part of the &lsquo;rake deploy&rsquo;.</p>

<p>&lsquo;rake deploy&rsquo; only updates the master branch on Github on order to publish the website and instead of hack'ing the deploy function to handle pushing the &lsquo;'source&rsquo; branch also (waiting on the Octopress 3.0 release for that), I wrote a script to handle it all.</p>

<p>This <em>lazy</em> script that does all the steps that I would have to do manually but tend to never do. And it is in my root Octopress directory so it included in my source revisions ;-)</p>

<p>Nothing special: just generates, deploys, adds all on the source branch along with a commit and push. For good measure it then garbage collects the repo to keep everything clean.</p>

<pre><code>#!/usr/bin/env bash
echo "Generate and deploying website"
rake generate
rake deploy
echo "Commiting and pushing source files"
git add --all; 
git commit -m "New posts"; 
git push 
git gc
pushd _deploy
git gc
popd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Renaming a Git Tag]]></title>
    <link href="http://sushihangover.github.io/git-renaming-a-got-tag/"/>
    <updated>2015-06-04T07:39:49-07:00</updated>
    <id>http://sushihangover.github.io/git-renaming-a-got-tag</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/gitlogo.png">http://sushihangover.github.io/images/gitlogo.png</a>">  Everyone screws up, and that comes to finger flops when typing that new tag name.</p>

<p>If the tag is only local, it is two step process, create a new tag from the old tag and delete the old tag:</p>

<pre><code>git tag new_tag_name old_tag_name
git tag -d old_tag_name
</code></pre>

<p>But if you have pushed that bad tag name to a remote, then you have another two steps. Deleting that remote tag makes use of the refspec reference and only using a destination with an &lsquo;'empty&rsquo; source. Assuming your remote is named origin (git remote -v), than this what you need to do (<u>REMEMBER TO INCLUDE THAT <strong>COLON</strong></u>):</p>

<pre><code>git push origin :refs/tags/old_tag_name
</code></pre>

<p>And push the new tag to your remote so everyone else will receive that new tag on a pull:</p>

<pre><code>git push origin --tags
</code></pre>

<p><strong>Note</strong>: The colon isn&rsquo;t a &ldquo;delete flag&rdquo;. Git push and git pull both accept zero or more refspecs as their final argument(s). Now read about <a href="http://git-scm.com/book/en/v2/Git-Internals-The-Refspec">refspecs</a>, really read it&hellip; . A colon separates source from destination in a refspec. The command git push origin :foo has an empty source and essentially says &ldquo;push nothing to branch foo of origin&rdquo;, or, in other words, &ldquo;make branch foo on origin not exist&rdquo;.</p>

<p><strong>Sub-Note</strong>: This is NOT the same as pushing an <strong>empty</strong> branch or tag, you really are pushing &lsquo;nothing&rsquo; and thus with nothing to reference that tag vanishes (Well I&rsquo;m assuming it exists somewhere till <a href="https://www.kernel.org/pub/software/scm/git/docs/git-gc.html">garbage collection</a> is run)</p>

<p><strong>Sub-Sub-Note</strong>: ;-) Yes, I agree with a lot of others that instead of using an empty source in the ref spec it would be <em>waaaayyyyy</em> more initiative to allow a remote parameter to be passed to the existing branch and tag delete options to do this type of deletion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Getting a List of Files Changed Between Branches]]></title>
    <link href="http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches/"/>
    <updated>2015-06-04T07:01:32-07:00</updated>
    <id>http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches</id>
    <content type="html"><![CDATA[<p>Getting a list of changed files between to different branches or tags could not be any easier when using the &lsquo;&ndash;name-only&rsquo; diff option:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6

configure.in
mcs/class/Facades/Makefile
mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/Makefile
...
</code></pre>

<p>A quickie to get the number of files changed:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6|wc -l
      28
</code></pre>

<p>And using the &lsquo;&ndash;name-status&rsquo; option can get you a nice two column output with the change type attribute with each file name, makes it easy to pipe to those maintenace scripts.</p>

<pre><code>git diff --name-status mono-3.2.5 mono-3.2.6
M       configure.in
M       mcs/class/Facades/Makefile
M       mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
A       mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
</code></pre>

<p><strong>Note</strong>: You can feed the &lsquo;&ndash;no-color&rsquo; option to make sure that none of those ansi escape codes get send down-stream in your pipe.</p>

<p><strong>Note</strong>: &lsquo;&ndash;'porcelain&rsquo; works within the diff mode sub-option but not as a primary option.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmartGit - the Best Git GUI There Is... And Its Free]]></title>
    <link href="http://sushihangover.github.io/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free/"/>
    <updated>2015-06-03T15:06:35-07:00</updated>
    <id>http://sushihangover.github.io/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/smartgit.png">http://sushihangover.github.io/images/smartgit.png</a>">  Surround your pullquote like this {" text to be quoted "}</p>

<p>When you are merging or rebasing hundreds of changing, doing that by hand from the cmd line is dreadful&hellip; I&rsquo;ve been merging the newer branches of Mono into PlayScript and it can be painful since the Apache open-source version PlayScript was pulled by Zynga from Github two years ago without warning.  When you are looking at hundreds of commits, and in a couple of cases, thousands of changes in between release tags and branches of Mono, doing that via the cmd line is doable, but it will give you nightmares. The SmartGui interface just works; walking the source tree, staging/unstaging, ours/theirs resolver, 3-way visual resolver/merge, markdown support, Github integration,  etc&hellip; is just fast and clean and once you learn a few keystroke shortcuts that merge do done in a heartbeat. ;-)</p>

<p>I&rsquo;ve used a couple of <a href="http://www.git-scm.com/downloads/guis">other git GUIs</a> and merging and rebasing in them just not seem intuitive and the speed of their interfaces when dealing with a repo as large as Mono is killing me and I&rsquo;ve ended up back in the cmd line.</p>

<p>I&rsquo;m not going to do a <a href="http://www.git-scm.com/downloads/guis">full and comparative review</a> as this product is free for non-commercial use, so just download a copy and take it for a test drive yourself. I doubt you would will be disappointed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping a GitHub Fork Up to Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote -v
</span><span class='line'>origin  &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/PlayScript.git&quot;</span>&gt;https://github.com/sushihangover/PlayScript.git&lt;/a&gt; <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin  &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/sushihangover/PlayScript.git&quot;</span>&gt;https://github.com/sushihangover/PlayScript.git&lt;/a&gt; <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>upstream    &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mono/mono.git&quot;</span>&gt;https://github.com/mono/mono.git&lt;/a&gt; <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>upstream    &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mono/mono.git&quot;</span>&gt;https://github.com/mono/mono.git&lt;/a&gt; <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ../PlayScript-master
</span><span class='line'>git fetch upstream
</span><span class='line'>git merge upstream/master
</span><span class='line'>git push origin
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
</feed>
