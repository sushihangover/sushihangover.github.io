<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-09-25T12:56:05-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharpen - Part 2]]></title>
    <link href="http://sushihangover.github.io/sharpen-part-2/"/>
    <updated>2016-09-25T12:33:03-07:00</updated>
    <id>http://sushihangover.github.io/sharpen-part-2</id>
    <content type="html"><![CDATA[<h2>Sharpen Setup</h2>

<h3>Get Maven:</h3>

<pre><code>brew install maven
</code></pre>

<h3>Check Maven:</h3>

<pre><code>mvn --version

Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)
Maven home: /usr/local/Cellar/maven/3.3.9/libexec
Java version: 1.8.0_92, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "mac os x", version: "10.11.6", arch: "x86_64", family: "mac"
</code></pre>

<h3>Clone the repo(s):</h3>

<pre><code>git clone https://github.com/mono/sharpen.git
git clone https://github.com/ydanila/sharpen_imazen_config.git
</code></pre>

<h3>Set your Java/JDK version to 1.7</h3>

<ul>
<li><a href="http://sushihangover.github.io/sharpen/">http://sushihangover.github.io/sharpen/</a></li>
</ul>


<h3>Build the Sharpen config:</h3>

<pre><code>pushd sharpen_imazen_config
mvn install
popd
</code></pre>

<p>Note: This is a sample config and a great starting point</p>

<h3>Build Sharpen</h3>

<h5>Note: Make sure that you are on the develop branch of Sharpen!</h5>

<pre><code>pushd sharpen
git checkout develop 
</code></pre>

<h4>Edit the <code>pom.xml</code> file so the cmd line <code>-help</code> option works:</h4>

<pre><code>git diff pom.xml

diff --git a/pom.xml b/pom.xml
index 1098a2d..4fedcbc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -122,7 +122,7 @@
     &lt;testSourceDirectory&gt;src/test&lt;/testSourceDirectory&gt;
     &lt;resources&gt;
       &lt;resource&gt;
-        &lt;directory&gt;src/test/resources&lt;/directory&gt;
+        &lt;directory&gt;src/main/resources&lt;/directory&gt;
       &lt;/resource&gt;
     &lt;/resources&gt;
     &lt;testResources&gt;
</code></pre>

<p>mvn clean test
mvn install</p>

<h3>Running Sharpen:</h3>

<h4>Cmd line help:</h4>

<pre><code>java -jar ${PWD}/src/target/sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar -help     
</code></pre>

<h4>Convert Java to C# (with config)</h4>

<h5>Copy config:</h5>

<pre><code>cp ../sharpen_imazen_config/sharpen-all-options .
cp ../sharpen_imazen_config/sharpen.config/target/MEConfiguration.sharpenconfig .
</code></pre>

<h4>Run with config:</h4>

<pre><code>java -jar \
   ${PWD}/src/target/sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar \
   /Users/sushi/code/github/PlayScriptParser/src \
   -configurationClass \
   MEConfiguration.sharpenconfig-jar @sharpen-all-options

~~~
Configuration Class: sharpen.config.MEConfiguration
Configuration Class: Sharpen.Runtime
project: asc
Pascal case mode: NamespaceAndIdentifiers
Native type system mode on.
Separating interface constants to their own classes.
Organize usings mode on.
~~~
</code></pre>

<h4>Convert C# Location:</h4>

<p>Your converted C# classes will be located <strong>NEXT</strong> the original source directory, <code>/Users/sushi/code/github/PlayScriptParser</code>, in my case, the <strong>asc.net</strong> directory</p>

<pre><code>cd /Users/sushi/code/github/PlayScriptParser
ls -1
    asc.net
    build
    src
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharpen]]></title>
    <link href="http://sushihangover.github.io/sharpen/"/>
    <updated>2016-09-25T10:44:44-07:00</updated>
    <id>http://sushihangover.github.io/sharpen</id>
    <content type="html"><![CDATA[<p>I needed to convert some Java code to C# and one of the best ways that I ever found is to use <code>Sharpen</code>. This used to be available as a Eclipse plugin but you can find a cli version at Mono&rsquo;s Github account:</p>

<ul>
<li><a href="https://github.com/mono/sharpen">https://github.com/mono/sharpen</a></li>
</ul>


<p>One of the <em>issues</em> in running Sharpen is that it requires Java 1.7, <strong>NOT 1.6, nor 1.8.</strong>.</p>

<p>So you need to have a Java 7 install. An easy way if you are already using homebrew, is available via a cask:</p>

<pre><code>brew install Caskroom/versions/java7
</code></pre>

<p>Note: If you get errors, make sure that your casks are updated, <code>brew upgrade brew-cask</code></p>

<h4>Current JDK:</h4>

<pre><code>/usr/libexec/java_home
/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
</code></pre>

<h4>Get a list of Install JDKs:</h4>

<pre><code>ls -l1 /Library/Java/JavaVirtualMachines/
1.6.0.jdk
jdk1.7.0_71.jdk
jdk1.7.0_80.jdk
jdk1.8.0_92.jdk
</code></pre>

<h4>Export a &ldquo;new home&rdquo;:</h4>

<pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home
</code></pre>

<p>Now I can build and run <code>sharpen</code>, i.e.:</p>

<pre><code>mvn clean test
mvn install
java -jar src/target/sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar /Users/sushi/github/PlayParser
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# AppleScript calls with functions, arguments and results]]></title>
    <link href="http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results/"/>
    <updated>2015-12-06T20:06:17-08:00</updated>
    <id>http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results</id>
    <content type="html"><![CDATA[<p>Posted a new C# library to <a href="https://github.com/sushihangover/Sushi.AppleScript">Github</a> to allow the calling of AppleScript by function name, passing in arguments and receiving a return value.</p>

<h1>Sushi.AppleScript</h1>

<p><a href="https://github.com/sushihangover/Sushi.AppleScript">https://github.com/sushihangover/Sushi.AppleScript</a></p>

<p>The C# library allows you to execute AppleScript code that originates from a file or <code>string</code> and:</p>

<ul>
<li>Call function by name (Optional)</li>
<li>Pass multiple arguments to a function (Optional)</li>
<li>Execution success or failure</li>
<li>Return results from the function call</li>
</ul>


<h3>Build:</h3>

<pre><code>cd Sushi.AppleScript.Native
xcodebuild
cd -
xbuild Sushi.AppleScript.sln
</code></pre>

<h3>Test:</h3>

<p><strong>Mono&rsquo;s supplied nunit-console:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>NUnit 3.x console:</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>Note:</strong></p>

<pre><code>AppleScript.cs(7,7): error CS0246: The type or namespace name `MonoMac' could not be found. Are you missing an assembly reference?
</code></pre>

<p>If you do not have a local copy of <a href="https://github.com/mono/monomac">MonoMac</a>, xbuild will fail. It is available via &ldquo;Xamarin Studio&rdquo;:</p>

<pre><code>mdtool build Sushi.AppleScript.sln
</code></pre>

<h4>Example Usage:</h4>

<pre><code>var scptInfo = new FileInfo ("./AppleScripts/FunctionTests.txt");
string funcName = "IsRunning";
List&lt;string&gt; argList = new List&lt;string&gt; () {
    @"Finder",
};
string scriptReturnValue;
var executionSuccess = AppleScript.Run (scptInfo, funcName, argList, out scriptReturnValue);
</code></pre>

<ul>
<li>Consult <a href="https://github.com/sushihangover/Sushi.AppleScript/blob/master/Sushi.AppleScript.Test/Test.cs">Test.cs</a> for more examples</li>
</ul>


<h3>Supports:</h3>

<ul>
<li>MonoMac</li>
<li>Xamarin.Mac</li>
<li>i386 and x86_64 Mono Support</li>
</ul>


<h3>Runtime/Deployment debugging:</h3>

<p>Runtime/Deployment debugging available by setting an environment variable, <code>APPLE_SCRIPT_DEBUG</code>:</p>

<p><code>export APPLE_SCRIPT_DEBUG=true</code></p>

<p>The results are logged with the prefix <code>AppleScript:</code>, output is avaiable via Console.app.</p>

<h3>Sushi.AppleScript</h3>

<p>The C# library that provides the P/Invoke wrapper to execute AppleScript functions</p>

<h3>Sushi.AppleScript.Native</h3>

<p>An OS-X Universial (i386 &amp; x86_64) Shared Library:</p>

<ul>
<li><code>libAppleScriptEvent.dylib</code></li>
</ul>


<h3>Sushi.AppleScript.Test</h3>

<p>NUnit tests for Sushi.AppleScript library</p>

<h3>Sushi.AppleScript.CLI</h3>

<p>TODO: Provides an <code>osascript</code> style CLI utility to execute functions with AppleScript files (<code>osascript</code> does not contain this feature)</p>

<h3>License:</h3>

<ul>
<li>The MIT License (MIT)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android C# bindings for Java CIFS (jCIFS) Client Library (Samba)]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library/"/>
    <updated>2015-12-05T20:19:59-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library</id>
    <content type="html"><![CDATA[<p>I posted a Samba/JCIFS binding library to my <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">Github</a> account&hellip;</p>

<h1>Xamarin.Android.jCIFS</h1>

<p>This is a <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">C# binding library</a> for the The Java CIFS (jCIFS) Client Library (version 1.3.18).</p>

<p><a href="http://jcifs.samba.org">JCIFS</a> is an Open Source client library that implements the CIFS/SMB networking protocol in 100% Java.</p>

<blockquote><p>You can read/write, delete, make directories, rename, list contents of a directory, list the workgroups/ntdomains and servers on the network, list the shares of a server, open named pipes, authenticate web clients &hellip;etc.</p></blockquote>

<h3>License:</h3>

<p>As <a href="http://www.gnu.org/licenses/lgpl-2.1.txt">JCIFS</a> is Licensed Under the LGPL, so is this project&rsquo;s <a href="http://opensource.org/licenses/LGPL-3.0">license</a>.</p>

<h3>API Documentation:</h3>

<p>Consult the jCIFS site for <a href="http://jcifs.samba.org/src/docs/api/">API</a> documention and usage, this is a C# binding library and does not implement/change anything within the <code>jcifs-1.3.18.jar</code>.</p>

<h3>Example:</h3>

<h4>Usage of <code>Jcifs.Smb.SmbFileInputStream</code>:</h4>

<pre><code>// This is NOT best-practice code, just showing a demo Jcifs api call
public async Task getFileContents ()
{
    await Task.Run (() =&gt; {
        var smbStream = new SmbFileInputStream ("smb://guest@10.10.10.5/code/test.txt");
        byte[] b = new byte[8192];
        int n;
        while ((n = smbStream.Read (b)) &gt; 0) {
            Console.Write (Encoding.UTF8.GetString (b).ToCharArray (), 0, n);
        }
        Button button = FindViewById&lt;Button&gt; (Resource.Id.myButton);
        RunOnUiThread(() =&gt; {
            button.Text = Encoding.UTF8.GetString (b);
        });
    }
    ).ContinueWith ((Task arg) =&gt; {
        Console.WriteLine (arg.Status);
        if (arg.Status == TaskStatus.Faulted)
            Console.WriteLine (arg.Exception);
    }
    );
}
</code></pre>

<h3>Note:</h3>

<p><strong>The entire jCIFS library is not bound by this project, consult the &ldquo;Metadata.xml&rdquo; file in the binding project for method renames and class exclusions.
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin C# UIPickerView]]></title>
    <link href="http://sushihangover.github.io/xamarin-c-number-uipickerview/"/>
    <updated>2015-11-25T13:23:13-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-c-number-uipickerview</id>
    <content type="html"><![CDATA[<p>A real quickie example of a <a href="https://developer.xamarin.com/api/type/MonoTouch.UIKit.UIPickerView/">UIPickerView</a>: (<a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html">iOS SDK</a>)</p>

<p><img src="/images/Xamarin-iPhone-Picker.gif" alt="" /></p>

<p>Add a <code>UIPickerView</code> to your xib or Storyboard called <code>slotMachineView</code> and a label (named <code>selectedLbl</code>) to show the currently selected items.</p>

<pre><code>using System;
using UIKit;

namespace Slots
{
    public partial class ViewController : UIViewController
    {
        public ViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
                slotMachineView.Model = new StackOverflowModel (selectedLbl);
        }

        public override void DidReceiveMemoryWarning ()
        {
            base.DidReceiveMemoryWarning ();
        }
    }

    public class StackOverflowModel : UIPickerViewModel
    {
        static string[] names = new string [] {
            "pscorlib.dll",
            "pscorlib_aot.dll",
            "Mono.PlayScript.dll",
            "PlayScript.Dynamic.dll",
            "PlayScript.Dynamic_aot.dll",
            "PlayScript.Optimization.dll",
            "playshell.exe",
            "psc.exe"
        };

        UILabel lbl;

        public StackOverflowModel (UILabel lbl)
        {
            this.lbl = lbl;
        }

        public override nint GetComponentCount (UIPickerView v)
        {
            return 3;
        }

        public override nint GetRowsInComponent (UIPickerView pickerView, nint component)
        {
            return names.Length;
        }

        public override string GetTitle (UIPickerView picker, nint row, nint component)
        {
            switch (component) {
            case 0:
                return names [row];
            case 1:
                return row.ToString ();
            case 2:
                return new string ((char)('A' + row), 1);
            default:
                throw new NotImplementedException ();
            }
        }

        public override void Selected (UIPickerView picker, nint row, nint component)
        {
            lbl.Text = String.Format ("{0} : {1} : {2}",
                names [picker.SelectedRowInComponent (0)],
                picker.SelectedRowInComponent (1),
                picker.SelectedRowInComponent (2));
        }

        public override nfloat GetComponentWidth (UIPickerView picker, nint component)
        {
            if (component == 0)
                return 220f;
            else
                return 30f;
        }
    }
}
</code></pre>

<p>From my <a href="http://stackoverflow.com/a/33902474/4984832">answer</a> on StackOverflow.</p>
]]></content>
  </entry>
  
</feed>
