<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-12-05T20:23:15-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin Android C# bindings for Java CIFS (jCIFS) Client Library (Samba)]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library/"/>
    <updated>2015-12-05T20:19:59-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library</id>
    <content type="html"><![CDATA[<p>I posted a Samba/JCIFS binding library to my <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">Github</a> account&hellip;</p>

<h1>Xamarin.Android.jCIFS</h1>

<p>This is a <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">C# binding library</a> for the The Java CIFS (jCIFS) Client Library (version 1.3.18).</p>

<p><a href="http://jcifs.samba.org">JCIFS</a> is an Open Source client library that implements the CIFS/SMB networking protocol in 100% Java.</p>

<blockquote><p>You can read/write, delete, make directories, rename, list contents of a directory, list the workgroups/ntdomains and servers on the network, list the shares of a server, open named pipes, authenticate web clients &hellip;etc.</p></blockquote>

<h3>License:</h3>

<p>As <a href="http://www.gnu.org/licenses/lgpl-2.1.txt">JCIFS</a> is Licensed Under the LGPL, so is this project&rsquo;s <a href="http://opensource.org/licenses/LGPL-3.0">license</a>.</p>

<h3>API Documentation:</h3>

<p>Consult the jCIFS site for <a href="http://jcifs.samba.org/src/docs/api/">API</a> documention and usage, this is a C# binding library and does not implement/change anything within the <code>jcifs-1.3.18.jar</code>.</p>

<h3>Example:</h3>

<h4>Usage of <code>Jcifs.Smb.SmbFileInputStream</code>:</h4>

<pre><code>// This is NOT best-practice code, just showing a demo Jcifs api call
public async Task getFileContents ()
{
    await Task.Run (() =&gt; {
        var smbStream = new SmbFileInputStream ("smb://guest@10.10.10.5/code/test.txt");
        byte[] b = new byte[8192];
        int n;
        while ((n = smbStream.Read (b)) &gt; 0) {
            Console.Write (Encoding.UTF8.GetString (b).ToCharArray (), 0, n);
        }
        Button button = FindViewById&lt;Button&gt; (Resource.Id.myButton);
        RunOnUiThread(() =&gt; {
            button.Text = Encoding.UTF8.GetString (b);
        });
    }
    ).ContinueWith ((Task arg) =&gt; {
        Console.WriteLine (arg.Status);
        if (arg.Status == TaskStatus.Faulted)
            Console.WriteLine (arg.Exception);
    }
    );
}
</code></pre>

<h3>Note:</h3>

<p><strong>The entire jCIFS library is not bound by this project, consult the &ldquo;Metadata.xml&rdquo; file in the binding project for method renames and class exclusions.
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin C# UIPickerView]]></title>
    <link href="http://sushihangover.github.io/xamarin-c-number-uipickerview/"/>
    <updated>2015-11-25T13:23:13-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-c-number-uipickerview</id>
    <content type="html"><![CDATA[<p>A real quickie example of a <a href="https://developer.xamarin.com/api/type/MonoTouch.UIKit.UIPickerView/">UIPickerView</a>: (<a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html">iOS SDK</a>)</p>

<p><img src="/images/Xamarin-iPhone-Picker.gif" alt="" /></p>

<p>Add a <code>UIPickerView</code> to your xib or Storyboard called <code>slotMachineView</code> and a label (named <code>selectedLbl</code>) to show the currently selected items.</p>

<pre><code>using System;
using UIKit;

namespace Slots
{
    public partial class ViewController : UIViewController
    {
        public ViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
                slotMachineView.Model = new StackOverflowModel (selectedLbl);
        }

        public override void DidReceiveMemoryWarning ()
        {
            base.DidReceiveMemoryWarning ();
        }
    }

    public class StackOverflowModel : UIPickerViewModel
    {
        static string[] names = new string [] {
            "pscorlib.dll",
            "pscorlib_aot.dll",
            "Mono.PlayScript.dll",
            "PlayScript.Dynamic.dll",
            "PlayScript.Dynamic_aot.dll",
            "PlayScript.Optimization.dll",
            "playshell.exe",
            "psc.exe"
        };

        UILabel lbl;

        public StackOverflowModel (UILabel lbl)
        {
            this.lbl = lbl;
        }

        public override nint GetComponentCount (UIPickerView v)
        {
            return 3;
        }

        public override nint GetRowsInComponent (UIPickerView pickerView, nint component)
        {
            return names.Length;
        }

        public override string GetTitle (UIPickerView picker, nint row, nint component)
        {
            switch (component) {
            case 0:
                return names [row];
            case 1:
                return row.ToString ();
            case 2:
                return new string ((char)('A' + row), 1);
            default:
                throw new NotImplementedException ();
            }
        }

        public override void Selected (UIPickerView picker, nint row, nint component)
        {
            lbl.Text = String.Format ("{0} : {1} : {2}",
                names [picker.SelectedRowInComponent (0)],
                picker.SelectedRowInComponent (1),
                picker.SelectedRowInComponent (2));
        }

        public override nfloat GetComponentWidth (UIPickerView picker, nint component)
        {
            if (component == 0)
                return 220f;
            else
                return 30f;
        }
    }
}
</code></pre>

<p>From my <a href="http://stackoverflow.com/a/33902474/4984832">answer</a> on StackOverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android FileObserver example in Xamarin/C#]]></title>
    <link href="http://sushihangover.github.io/android-fileobserver-example-in-xamarin-slash-c-number/"/>
    <updated>2015-11-14T03:08:38-08:00</updated>
    <id>http://sushihangover.github.io/android-fileobserver-example-in-xamarin-slash-c-number</id>
    <content type="html"><![CDATA[<p>This is from my answer on StackOverflow from a question that got closed. As not to lose it to the SO &lsquo;on-hold/close&rsquo; flush, I am re-posting it.</p>

<h1>Question</h1>

<p>How can you write an Android FileObserver in C#?</p>

<p>i.e. Native Java example:</p>

<pre><code>FileObserver observer = new FileObserver(imageUri.getPath()) {
    public String basePath;

    @Override
    public void onEvent(int event, String path) {
        String fullPath = basePath;
        if(path != null) {
            fullPath += path;
        }
        Log.d(TAG, "FILE: "+fullPath);
    }
};
observer.basePath = imageUri.getPath();
observer.startWatching();
</code></pre>

<h1>Answer</h1>

<p>Create a class that inherits from <a href="http://developer.xamarin.com/api/type/Android.OS.FileObserver/"><code>Android.OS.FileObserver</code></a>, you only need to implement the <a href="http://developer.xamarin.com/api/member/Android.OS.FileObserver.OnEvent/p/Android.OS.FileObserverEvents/System.String/"><code>OnEvent()</code></a> and one(+) Constructors. Its a really simple pattern after you see it once&hellip; ;-)</p>

<p><strong>Quick Notes:</strong></p>

<ul>
<li>Watch on a <strong>path</strong>, if you need to filter by file, do it in the OnEvent</li>
<li>Do not let your FileObserver object get GC&rsquo;d or your OnEvents will magically stop :-/</li>
<li>Remember to call StartWatching() in order to receive OnEvent calls</li>
</ul>


<p><strong>C# FileObserver Class:</strong></p>

<pre><code>using System;
using Android.OS;
using Android.Util;

namespace MyFileObserver
{
    public class MyPathObserver : Android.OS.FileObserver
    {
        static FileObserverEvents _Events = (FileObserverEvents.AllEvents);
        const string tag = "StackoverFlow";

        public MyPathObserver (String rootPath) : base(rootPath, _Events)
        {
            Log.Info(tag, String.Format("Watching : {0}", rootPath)); 
        }

        public MyPathObserver (String rootPath, FileObserverEvents events) : base(rootPath, events)
        {
            Log.Info(tag, String.Format("Watching : {0} : {1}", rootPath, events)); 
        }

        public override void OnEvent(FileObserverEvents e, String path)
        {
            Log.Info(tag, String.Format("{0}:{1}",path, e)); 
        }
    }
}
</code></pre>

<p><strong>Example Usage:</strong></p>

<pre><code>var pathToWatch = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);
// Do not let myFileObserver get GC'd, stash it's ref in an activty, or ...
myFileObserver = new MyPathObserver (pathToWatch);
myFileObserver.StartWatching (); // and StopWatching () when you are done...
var document = Path.Combine(pathToWatch, "StackOverFlow.txt");
button.Click += delegate {
    if (File.Exists (document)) {
        button.Text = "Delete File";
        File.Delete (document);
    } else {
        button.Text = "Create File";
        File.WriteAllText (document, "Foobar");
    }
};
</code></pre>

<p><strong>adb logcat Output (when clicking on the test button):</strong></p>

<pre><code>I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
I/StackoverFlow( 3596): StackOverFlow.txt:Delete
I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
I/StackoverFlow( 3596): StackOverFlow.txt:Delete
I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript | Optimizing psc/mcs]]></title>
    <link href="http://sushihangover.github.io/playscript-compiler-optim/"/>
    <updated>2015-10-27T22:20:18-07:00</updated>
    <id>http://sushihangover.github.io/playscript-compiler-optim</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"></p>

<p><a href="http://ericlippert.com">Eric Lippert</a> has a couple of recent posts that I have been reviewing in conjuction with the PlayScript version of Mono&rsquo;s mcs (psc) as some of the things devs do in ActionScript 3.0 are targeted to making Flash&rsquo;s AVM run efficiently does not always make the cut for a C#/CLR oriented compiler. Many of these items revolve around arrays and vector and misuse of the generic (dynamic) Object types, but strings, associative operations, and nulls need some love also and his posts are very insightful as how C# is optimized in certain areas.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p><a href="http://ericlippert.com/2015/10/27/optimizing-associative-operations/">Optimizing associative operations</a></p>

<p><a href="http://ericlippert.com/2013/06/17/string-concatenation-behind-the-scenes-part-one/">String concatenation behind the scenes, part one</a></p>

<p><a href="http://ericlippert.com/2013/06/24/string-concatenation-behind-the-scenes-part-two/">String concatenation behind the scenes, part two</a></p>

<p>He also has a great series on Nullable micro-optimizations that start here:</p>

<p><a href="http://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/">Nullable micro-optimizations, part one</a></p>

<p>PlayScript Github repo is <a href="https://github.com/PlayScriptRedux/playscript">here</a> check it out now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript | Exception Filters]]></title>
    <link href="http://sushihangover.github.io/playscript-exception-filters/"/>
    <updated>2015-08-17T18:34:18-07:00</updated>
    <id>http://sushihangover.github.io/playscript-exception-filters</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"> <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> (.play) now has Exception Filters like C# 6.0.</p>

<p>These are actually really cool and nice addition to ActionScript.</p>

<p>From the <a href="http://blogs.msdn.com/b/csharpfaq">C# Frequently Asked Questions</a> blog:</p>

<blockquote><p>Exception filters are a CLR capability that is exposed in Visual Basic and F#, but hasn’t been in C# – until now. This is what they look like in C#:</p></blockquote>

<pre><code>try { … } 
catch (MyException e) if (myfilter(e)) 
{ 
     … 
}
</code></pre>

<p><a href="http://blogs.msdn.com/b/csharpfaq/archive/2014/11/20/new-features-in-c-6.aspx">New Features in C# 6</a></p>

<p>And here is what they look like in PlayScript:</p>

<h3>play/test-ps-ex-filter-01.play</h3>

<pre><code>package {
    public class Foo {
        public static function Main():int {
        var x:int = 4;
        try {
            throw new Error("Throw");
        } catch (e:Error) if (x &gt; 0) {
            trace("Catch");
            return 0;
        }
        return 1;
        }
    }
}
</code></pre>

<h3>play/test-ps-ex-filter-02.play</h3>

<pre><code>package {
    public class Foo {
        public static function Main():int {
        var x:int = 4;
        try {
            x = 5;
            throw new Error("Throw");
        } catch (e:Error) if (x &lt; 5) {
            trace("No Catch Please");
            return 0;
        } catch (myError:Error) {
            trace("Catch Here");
            return 0;
        }
        return 1;
        }
    }
}
</code></pre>

<p>If you have any problems with them, post an <a href="https://github.com/PlayScriptRedux/playscript/issues">issue</a>.</p>
]]></content>
  </entry>
  
</feed>
