<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: embedded | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/embedded/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-11-13T15:45:31-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is Bare Metal ARM]]></title>
    <link href="http://sushihangover.github.io/what-is-bare-metal-arm/"/>
    <updated>2014-02-16T08:12:02-08:00</updated>
    <id>http://sushihangover.github.io/what-is-bare-metal-arm</id>
    <content type="html"><![CDATA[<h2>What is Bare Metal ARM Development?</h2>

<blockquote><p>Bare-Metal ARM Development, also called <a href="http://en.wikipedia.org/wiki/Bare_machine">Bare-Machine</a> is the development of &lsquo;embedded&rsquo; applications, that run without an operating system or other supporting programs, maybe a bootloader, on an ARM processor. The application sits on top of the “bare metal”, runs ARM instructions (including THUMB), directly controls the processor (MCU) to manage power consumption, GPIOs, ADC, DAC, etc&hellip;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded 'Bare Metal' ARM Development - Part 2]]></title>
    <link href="http://sushihangover.github.io/embedded-bare-metal-arm-development-part-2/"/>
    <updated>2014-02-14T10:12:07-08:00</updated>
    <id>http://sushihangover.github.io/embedded-bare-metal-arm-development-part-2</id>
    <content type="html"><![CDATA[<p>Part 2 of my dive into &lsquo;Bare Metal&rsquo; ARM Development, Part 1 is <a href="/embedded-bare-metal-arm-development-part-1/">here</a></p>

<p>So the compiler shortlist at this point:</p>

<ul>
<li><a href="https://launchpad.net/gcc-arm-embedded">GNU C Compiler</a></li>
<li><a href="http://www.iar.com">IAR</a> ARM C Compiler</li>
<li><a href="https://www.imagecraft.com">ImageCraft</a> C Compiler Tools</li>
<li><a href="http://www.keil.com">[ARM](http://ds.arm.com/)/Kiel</a> ARM C/C++ Compiler</li>
<li><a href="http://clang.llvm.org">Clang</a>/<a href="http://llvm.org">LLVM</a> ARM Compiler</li>
</ul>


<p>Note: That list is in no particular order at all&hellip;</p>

<p>And just to be clear, I am talking about bare-metal C/C++ cross compilers, and all of these world be considered <a href="http://en.wikipedia.org/wiki/Cross_compiler">cross compilers</a> since there is NO operating system on your bare-metal ARM core to actually host a native compiler.</p>

<p>There are complete OSs that run on ARM <a href="http://en.wikipedia.org/wiki/System_on_a_chip">SoC</a>. You can look at hobbyist/entry level boards like <a href="http://en.wikipedia.org/wiki/BeagleBoard">BeagleBoard</a> or <a href="http://en.wikipedia.org/wiki/Raspberry_Pi">Raspberry Pi</a> as just a couple of the many boards that can run a Linux kernel on ARM. <a href="http://en.wikipedia.org/wiki/Windows_CE">Window CE</a>, now called Windows Embedded Compact 2013, is available for ARM (among other cpus) as a real-time operating system with a  licensed shared source code based kernel from Microsoft and there are other no n-Linux/Microsoft OSs (free or not) that are &lsquo;hostable&rsquo; on ARM, but we are looking at bare-metal only, so cross-compiling is we have to do here.</p>

<p>Out of the five on the list, there are two &lsquo;free&rsquo; compilers with no type of restrictions on the binaries that are produced are GCC and LLVM. In terms of OSS support/acceptance, GCC for ARM is the most well known and community supported.</p>

<p>ARM Embedded GCC via <a href="https://launchpad.net/gcc-arm-embedded">launchpad</a> has binary and source downloads. Binaries are available for Windows, OS-X and Linux along with build instructions. My experience so far is most in the embedded hobbyist community will point you to GCC and never tell you about another option. I think this is true mainly do to the fact those people are &lsquo;hobbyist&rsquo; and not professional embedded hardware|software people. The pro will tell you about the market options, plus some will point out that compilers such as from IAR and Kiel will produce faster and/or smaller ARM code then GCC. Efficent code generation and optimization is an art in and off itself but for free, GCC-ARM works &lsquo;well enough&rsquo;.</p>

<p>Note: A while back I was involved in upgrading a existing GCC-AVR based software/hardware project involving an AVR 8-bit and got stuck towards the end of the projects as we had exceeded the chip&rsquo;s 32k of flash. Upscaling the chip at the time with not possible, first BOM cost and new board development and second there was existing field-deployed hardware to deal with). We&rsquo;re looking at removing features some feature to get it &lsquo;out the door&rsquo; but one of the &lsquo;hardware engineers&rsquo; that we were working with (we were all contractors) had a license of IAR-AVR and its code optimizer squeezed our bin by almost 5% with zero source code changes. Thus our customer bought that compiler to produce the firmware for final field deployment&hellip;</p>

<p>But that does not mean you should not try the others on the list, but more on that later.</p>

<p>Clang/LLVM is the newest kid on the block for ARM bare-metal work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded 'Bare-Metal' ARM Development - Part 1]]></title>
    <link href="http://sushihangover.github.io/embedded-bare-metal-arm-development-part-1/"/>
    <updated>2014-02-14T06:01:48-08:00</updated>
    <id>http://sushihangover.github.io/embedded-bare-metal-arm-development-part-1</id>
    <content type="html"><![CDATA[<p>This is a start of a series of posts related to getting into ARM-based Cortex core programming. So I started on a quest to checkout ARM Embedded &lsquo;Bare-Metal&rsquo; compilers and tools and in the end(?) cleared up my confusion about what I can and can not do on a restricted budget and time.</p>

<p>The reasoning behind this is I wanted to do some bare metal ARM C coding for a project that might become some type of OSHW or even a commerical offering so I wanted to keep my options open, try to future proof my decisions.</p>

<p>Instead of falling back to my comfort zone with AVR 8-bit MCU C-codings and forcing a project that really is beyond what AVRs offer (mainly execution speed and size related plus I tired of all the bit-banging to &lsquo;add&rsquo; protocals) and the fact that ARM-based core offerings that are now available have not just tons of digital GPIOs, footprints that are as small, but also have great signal processing options (input and output) that can match or exceed what is available in Amtel&rsquo;s AVR 8-bit line up and<strong> match them at price.</strong></p>

<p>Just compare the Atmel AVR line up to their D20 ARM-core offerings and for non-legacy new embedded projects the decision matrix might be almost equal, but if you are adding &lsquo;future-proofing&rsquo; to the mix and what MCUs will be offering in the next decade, ARM-based MCUs become a clear choice (would love to hear someone&rsquo;s counter-point!).</p>

<p>So first I figured I look at ARM compilers/linkers as if you can not compile/link your code, than you are just screwed ;-) So in terms of ARM compilers available there <strong>is</strong> more than one:</p>

<ul>
<li><a href="https://launchpad.net/gcc-arm-embedded">GNU C Compiler</a>(1)</li>
<li><a href="http://www.freescale.com/codewarrior">CodeWarrior</a> ARM C Compiler(2)</li>
<li><a href="http://www.iar.com">IAR</a> ARM C Compiler</li>
<li><a href="https://www.imagecraft.com">ImageCraft</a> C Compiler Tools</li>
<li><a href="http://www.keil.com">Kiel</a> ARM C/C++ Compiler(3)</li>
<li><a href="http://ds.arm.com">ARM DS-5</a> RealView C/C++ Compiler(3)</li>
<li>ARM <a href="http://clang.llvm.org">Clang</a>/<a href="http://llvm.org">LLVM</a> Compiler</li>
<li>Microsoft Visual Studio C/C++ Native ARM Compiler(4)</li>
</ul>


<h6>* 1: Technically the launchpad link is the &lsquo;output&rsquo; of an ARM version of GCC and binutils but is the best starting point for info on the ARM version as it is the offical distro end-point ;-)</h6>

<p><blockquote><p>ARM employees are maintaining this project. Contributing to this project should be via GCC trunk <a href="http://gcc.gnu.org">http://gcc.gnu.org</a> and binutils trunk <a href="http://www.gnu.org/software/binutils/.">http://www.gnu.org/software/binutils/.</a> This launchpad project is for communication and downloading. No code change is done in lp project.</p></blockquote></p>

<h6>* 2: The &lsquo;Freescale Kinetis Compiler&rsquo; is in maintance mode. The GNU compiler is the &lsquo;active&rsquo; mainline of ARM compiler within CodeWarror now and thus I am not looking at this one at all as it fails my future proofing rules. For existing &lsquo;legacy&rsquo; embedded projects based on it, <a href="http://en.wikipedia.org/wiki/CodeWarrior">MetroWorks</a> was acquired by Motorola which was then included in the Freescale spinoff, so go to Freescale if you need a version&hellip;</h6>

<h6>* 3: ARM acquired Kiel and thus the compiler IP from the two is now within one toolchain simply called &ldquo;ARM Compiler toolchain&rdquo; and thus RealView no longer exists, but some old-timers ;-) still call the new version by the RealView name. Note: There are still different development IDEs from each company; Kiel has uVision and ARM has Eclipse intergation (via a standalone version or plugins for your existing install), but again, they use just the &lsquo;new&rsquo; version of the compiler, but more on the IDEs in a future post of this series.</h6>

<h6>* 4: Yes, you can produce ARM code as you would have to in order to cross-compile Windows RT apps, but can you do bare metal programming with it? I am not sure if you can get a CMSIS setup using it and handle the .S/SystemInit/Reset_Handler/__main() of bare metal programming&hellip;</h6>

<h6>* If I missed one, please let me know!.</h6>

<p>So an ARM compiler choice is not as easy as just saying GNU/GCC as you have other options and while in the end they all produce an ELF/BIN that you flash on your bare-metal ARM, how that binary gets created and the size and speed of the ARM code and/or THUMB instructions that was produced can vary greatly&hellip;</p>

<p>Next time, we look into some compilers&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ellcc.org build fix for OS-X]]></title>
    <link href="http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x/"/>
    <updated>2014-02-12T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x</id>
    <content type="html"><![CDATA[<p>In my ARM Bare Metal searches for using Clang/LLVM I stumbled across <a href="http://ellcc.org">The ELLCC Embedded Compiler Collection</a> that provides a one-stop build enviroment for all the LLVM tools for cross-platform compiling.</p>

<p>I&rsquo;m not sure if they are trying to be a <a href="http://yagarto.org">YAGARTO</a> for LLVM vs. GCC. I waiting for a reply to post on their forum to understand the actual code changes to Clang/LLVM that they include (if any). <del>I will update when I hear back.</del> <strong>(Update: Read Rich&rsquo;s <a href="http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571">full reply</a>, it cleared everything up for me)</strong></p>

<p><blockquote><p>ELLCC is really just a weekly repackaging of clang/LLVM with two minor additions.<br/>1. The triples of the form -ellcc- (where OS is linux for now, but will include others eventually) control how include files and libraries are found. You might notice for example that the #include path for ELLCC&hellip;</p><footer><strong>Rich <a href="http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571">http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571</a> What is ELLCC all about</strong></footer></blockquote></p>

<p>But in the mean time I figured I give it a build and include it in my GCC/ARM vs. Clang/LLVM-ARM testing but hit a build error on OS-X. On the linking of QEMU, libintl (GNU&rsquo;s gettext) is not found:</p>

<pre><code>LINK  i386-softmmu/qemu-system-i386
ld: library not found for -lintl
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[1]: *** [qemu-system-i386] Error 1
make: *** [subdir-i386-softmmu] Error 2
</code></pre>

<p>I do have gettext on my system, but it is in my &ldquo;Cellar&rdquo;&ldquo; as I use <a href="http://brew.sh">HomeBrew</a> as my package manager and try not to install anything to &rdquo;/usr/bin" or other systems places that can muck everything up and thus can run parrallels versions of different applications (i.e. If I have to &lsquo;sudo&rsquo; to an open-source software install, it is not going on my system unless they have a serious reason for it and I trust the code from a security viewpoint).</p>

<p>FYI: Brew does not &lsquo;hard&rsquo; link gettext as compiling software outside of the HomeBrew can cause problems:</p>

<p><blockquote><p>brew link gettext<br/>Warning: gettext is keg-only and must be linked with &ndash;force<br/>Note that doing so can interfere with building software.</p></blockquote></p>

<p>So I mod&rsquo;d the &ldquo;ellcc/gnu/build&rdquo; to force brew to link gettext before compiling/linking qemu and unlink it after.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn diff build&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Index: build&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>mdash<span class="p">;</span> build   <span class="o">(</span>revision 3780<span class="o">)</span>
</span><span class='line'>+++ build   <span class="o">(</span>working copy<span class="o">)</span>
</span><span class='line'>@@ -69,6 +69,10 @@
</span><span class='line'>     ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sparc-linux-user<span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> fi</span>
</span><span class='line'><span class="s2"> echo Configuring package qemu for $targets</span>
</span><span class='line'><span class="s2">+if [!  -e &lt;code&gt;which brew&lt;/code&gt; ]; then</span>
</span><span class='line'><span class="s2">+   ruby -e &amp;ldquo;$(curl -fsSL &lt;a href=&quot;</span>https://raw.github.com/Homebrew/homebrew/go/install<span class="s2">&quot;&gt;https://raw.github.com/Homebrew/homebrew/go/install&lt;/a&gt;)&amp;rdquo;</span>
</span><span class='line'><span class="s2">+fi</span>
</span><span class='line'><span class="s2">+brew link gettext &amp;ndash;force</span>
</span><span class='line'><span class="s2"> qemu_target_list=&lt;code&gt;echo $qemu_target_list | sed -e &quot;</span>s/ /,/g<span class="err">&quot;</span>&lt;/code&gt;
</span><span class='line'> make <span class="nv">DIR</span><span class="o">=</span>src/qemu <span class="nv">CC</span><span class="o">=</span><span class="nv">$cc</span> <span class="nv">HCC</span><span class="o">=</span><span class="nv">$hcc</span> <span class="nv">AR</span><span class="o">=</span><span class="nv">$ar</span> <span class="nv">TARGET</span><span class="o">=</span><span class="nv">$host</span> <span class="nv">OS</span><span class="o">=</span><span class="nv">$os</span> <span class="se">\</span>
</span><span class='line'>     <span class="nv">targetlist</span><span class="o">=</span><span class="nv">$qemu_target_list</span> <span class="nv">haslibs</span><span class="o">=</span><span class="nv">$haslibs</span> <span class="se">\</span>
</span><span class='line'>@@ -76,6 +80,7 @@
</span><span class='line'>     qemu.configure <span class="o">||</span> <span class="nb">exit </span>1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; make -C src/qemu <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>+brew unlink gettext&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="c"># Finally, install into the target specific bin dir.</span>
</span><span class='line'> mkdir -p <span class="nv">$bindir</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Everything builds fine after that&hellip;</p>

<p>The entire file is here:
<div><script src='https://gist.github.com/8949755.js'></script>
<noscript><pre><code>#!/bin/sh
# ELLCC GNU tools build script.

# Get the staging directory.
prefix=`cd ..; pwd`

# Figure out the compilers to use.
. ../build-setup $*

echo Configured to $WHY.
echo C compiler: $cc $CFLAGS
echo C++ compiler: $cxx $CXXFLAGS
echo In: gnu-build$builddir

# Configure for GNU tools.
mkdir -p gnu-build$builddir

# Configure for binutils.
# binutils are build to support all targets in the target list.
echo Configuring package binutils for $targets
make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
    targetlist=$targetlist haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    binutils.configure || exit 1

make -C gnu-build$builddir/binutils || exit 1

# Configure for assemblers for all targets.
for t in $targets; do
  echo Configuring the assembler for $t
  make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
      target=$t haslibs=$haslibs \
      bindir=$bindir prefix=$prefix build=$build \
      gas.configure || exit 1

  make -C gnu-build$builddir/binutils/$t || exit 1
done

# Configure for GDB.
# GDB is built to support all GDB targets.
echo Configuring package gdb for $targets
make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
    targetlist=$targetlist haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    gdb.configure || exit 1

make -C gnu-build$builddir/gdb || exit 1

if [ &quot;$host&quot; != &quot;$build&quot; ] ; then
  # The host system is not the build system.
  # Build only  binutils, the assemblers, and gdb.
  # Finally, install into the target specific bin dir.
  mkdir -p $bindir
  make TARGETDIR=$builddir BINDIR=$bindir installcross || exit 1
  exit 0
fi

# Configure for QEMU.
# The QEMU system targets.
qemu_target_list=&quot;i386-softmmu x86_64-softmmu arm-softmmu \
    microblaze-softmmu mips-softmmu mipsel-softmmu \
    ppc-softmmu ppc64-softmmu sparc-softmmu&quot;

if [ `uname` = &quot;Linux&quot; ] ; then
    # The QEMU Linux user space targets.
    qemu_target_list=&quot;$qemu_target_list i386-linux-user \
    x86_64-linux-user arm-linux-user armeb-linux-user \
    microblaze-linux-user mips-linux-user mipsel-linux-user \
    ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sparc-linux-user&quot;
fi
echo Configuring package qemu for $targets
if [!  -e `which brew` ]; then
        ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;
fi
brew link gettext --force
qemu_target_list=`echo $qemu_target_list | sed -e &quot;s/ /,/g&quot;`
make DIR=src/qemu CC=$cc HCC=$hcc AR=$ar TARGET=$host OS=$os \
    targetlist=$qemu_target_list haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    qemu.configure || exit 1

make -C src/qemu || exit 1
brew unlink gettext

# Finally, install into the target specific bin dir.
mkdir -p $bindir
make TARGETDIR=$builddir BINDIR=$bindir install || exit 1
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X LLVM / CLANG Build]]></title>
    <link href="http://sushihangover.github.io/os-x-llvm-slash-clang-build/"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/os-x-llvm-slash-clang-build</id>
    <content type="html"><![CDATA[<p>I wanted to test out some C code that I am writting for a ARM Bare Metal (Embedded) project in QEMU (qemu-system-arm) and normally would just use the <a href="https://launchpad.net/gcc-arm-embedded">GNU Tools for ARM Embedded Processors</a> but I was wondering what the current state of LLVM is for cross-compiling to bare-metal ARM.</p>

<p>Since this is a new area for me and I am having a <strong>dang hard time</strong> finding what is and isn&rsquo;t supported in CLang/LLVM for embedded ARM development, I figured I would compile the latest version and see the difference in code that gets produced between the gcc and Clang compilers.</p>

<p>Thus I needed to latest and greatest Clang/LLVM and did not feel like nurse-maiding a huge git download and long compile session, so I spent a minute and hacked up a really simple script so I could catch up on &ldquo;Game of Thrones&rdquo; ;-)</p>

<p><div><script src='https://gist.github.com/8946898.js'></script>
<noscript><pre><code>git clone http://llvm.org/git/llvm.git
pushd llvm/tools
git clone http://llvm.org/git/clang.git
popd
pushd llvm/projects
git clone http://llvm.org/git/compiler-rt.git
popd
pushd llvm/projects
git clone http://llvm.org/git/test-suite.git
popd
mkdir llvmbuild
pushd llvmbuild
../llvm/configure --enable-optimized --enable-jit --prefix=/Users/administrator/llvm-install 
make
</code></pre></noscript></div>
</p>

<p>FYI: <a href="http://clang.llvm.org/docs/CrossCompilation.html">Cross-compilation using Clang</a></p>
]]></content>
  </entry>
  
</feed>
