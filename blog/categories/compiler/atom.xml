<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compiler | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/compiler/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-07-17T11:01:12-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Embedded 'Bare Metal' ARM Development - Part 2]]></title>
    <link href="http://sushihangover.github.io/embedded-bare-metal-arm-development-part-2/"/>
    <updated>2014-02-14T10:12:07-08:00</updated>
    <id>http://sushihangover.github.io/embedded-bare-metal-arm-development-part-2</id>
    <content type="html"><![CDATA[<p>Part 2 of my dive into &lsquo;Bare Metal&rsquo; ARM Development, Part 1 is <a href="/embedded-bare-metal-arm-development-part-1/">here</a></p>

<p>So the compiler shortlist at this point:</p>

<ul>
<li><a href="https://launchpad.net/gcc-arm-embedded">GNU C Compiler</a></li>
<li><a href="http://www.iar.com">IAR</a> ARM C Compiler</li>
<li><a href="https://www.imagecraft.com">ImageCraft</a> C Compiler Tools</li>
<li><a href="http://www.keil.com">[ARM](http://ds.arm.com/)/Kiel</a> ARM C/C++ Compiler</li>
<li><a href="http://clang.llvm.org">Clang</a>/<a href="http://llvm.org">LLVM</a> ARM Compiler</li>
</ul>


<p>Note: That list is in no particular order at all&hellip;</p>

<p>And just to be clear, I am talking about bare-metal C/C++ cross compilers, and all of these world be considered <a href="http://en.wikipedia.org/wiki/Cross_compiler">cross compilers</a> since there is NO operating system on your bare-metal ARM core to actually host a native compiler.</p>

<p>There are complete OSs that run on ARM <a href="http://en.wikipedia.org/wiki/System_on_a_chip">SoC</a>. You can look at hobbyist/entry level boards like <a href="http://en.wikipedia.org/wiki/BeagleBoard">BeagleBoard</a> or <a href="http://en.wikipedia.org/wiki/Raspberry_Pi">Raspberry Pi</a> as just a couple of the many boards that can run a Linux kernel on ARM. <a href="http://en.wikipedia.org/wiki/Windows_CE">Window CE</a>, now called Windows Embedded Compact 2013, is available for ARM (among other cpus) as a real-time operating system with a  licensed shared source code based kernel from Microsoft and there are other no n-Linux/Microsoft OSs (free or not) that are &lsquo;hostable&rsquo; on ARM, but we are looking at bare-metal only, so cross-compiling is we have to do here.</p>

<p>Out of the five on the list, there are two &lsquo;free&rsquo; compilers with no type of restrictions on the binaries that are produced are GCC and LLVM. In terms of OSS support/acceptance, GCC for ARM is the most well known and community supported.</p>

<p>ARM Embedded GCC via <a href="https://launchpad.net/gcc-arm-embedded">launchpad</a> has binary and source downloads. Binaries are available for Windows, OS-X and Linux along with build instructions. My experience so far is most in the embedded hobbyist community will point you to GCC and never tell you about another option. I think this is true mainly do to the fact those people are &lsquo;hobbyist&rsquo; and not professional embedded hardware|software people. The pro will tell you about the market options, plus some will point out that compilers such as from IAR and Kiel will produce faster and/or smaller ARM code then GCC. Efficent code generation and optimization is an art in and off itself but for free, GCC-ARM works &lsquo;well enough&rsquo;.</p>

<p>Note: A while back I was involved in upgrading a existing GCC-AVR based software/hardware project involving an AVR 8-bit and got stuck towards the end of the projects as we had exceeded the chip&rsquo;s 32k of flash. Upscaling the chip at the time with not possible, first BOM cost and new board development and second there was existing field-deployed hardware to deal with). We&rsquo;re looking at removing features some feature to get it &lsquo;out the door&rsquo; but one of the &lsquo;hardware engineers&rsquo; that we were working with (we were all contractors) had a license of IAR-AVR and its code optimizer squeezed our bin by almost 5% with zero source code changes. Thus our customer bought that compiler to produce the firmware for final field deployment&hellip;</p>

<p>But that does not mean you should not try the others on the list, but more on that later.</p>

<p>Clang/LLVM is the newest kid on the block for ARM bare-metal work.</p>
]]></content>
  </entry>
  
</feed>
