<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mono | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-01-01T22:03:52-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding nuget packages to your MonoDevelop Addin Templates]]></title>
    <link href="http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates/"/>
    <updated>2016-01-01T21:48:44-08:00</updated>
    <id>http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates</id>
    <content type="html"><![CDATA[<p>I recently created nugets for the PlayScript AOT assemblies as well as a separtate MSBuild target nuget and it ended up working really well in a x-plat way.</p>

<p>But one thing that I could not find quickly was how to tag my templates with the package info so they are automatically installed when the solution/projects are created.</p>

<p>Well the answer was kind-of right under my nose (<a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>):</p>

<blockquote><p>Conditionally Adding a NuGet Package from a Project Template
A NuGet package be conditionally installed based on a boolean parameter defined by the project template wizard.</p></blockquote>

<pre><code>&lt;Packages&gt;
    &lt;Package id="Xamarin.GooglePlayServices" version="19.0.0.1" if="UseGooglePlayServices" /&gt;
&lt;/Packages&gt;
</code></pre>

<blockquote><p>The conditions that can be specified do not support the more complicated condition that grouped templates do.</p></blockquote>

<p>Re: <a href="http://www.monodevelop.com/developers/articles/project-templates/#conditionally-adding-a-nuget-package-from-a-project-template">Conditionally Adding a NuGet Package from a Project Template</a></p>

<p>So in my templates I currently do not have to lock them to a version and want the most recent ones available so I skip the version attribute:</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="PlayScript.AOT" /&gt;
    &lt;package id="PlayScript.MSBuild" /&gt;
&lt;/Packages&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MSBuild / xbuild - Steps of a build]]></title>
    <link href="http://sushihangover.github.io/msbuild-slash-xbuild-steps-of-a-build/"/>
    <updated>2016-01-01T10:22:54-08:00</updated>
    <id>http://sushihangover.github.io/msbuild-slash-xbuild-steps-of-a-build</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on adding MSBuild style building to  PlayScript.</p>

<p>The end goal is two fold.</p>

<p>1st) To support the standard MSBuild process in order to allow VS/MD/XS&rsquo;s IDEs to use this std process via the project file&rsquo;s target import tag.</p>

<p>2nd) Can I replace the <em>compile</em> portion of the process (with the PlayScript compiler) so I directly create Xamarin.Mac, Xamarin.iOS and Xamarin.Android libraries that are written in PlayScript/ActionScript by using Xamarin&rsquo;s custom MSBuild process, but via a different compiler that produces the IL code?</p>

<p>A compiled PlayScript library (or exe) is <strong>just</strong> a standard CIL assembly and can be referenced by C# projects, Xamarin mobile projects or not, but directly referencing Xamarin iOS, Android or Mac libraries will not work as those project types are <em>special</em> (mainly licensing checks and build steps). So the 2nd part of this is really an experient is to see if we are stuck to only linking to PlayScript libraries or can we use PlayScript to directly code against the Xamarin&rsquo;s mobile libraries and still comply with their licensing/build process.</p>

<p>Building via the <code>psc</code> CLI compiler is almost identical to using <code>csc</code> or <code>mcs</code>. There are a few different options are available in order to support <em>some</em> of the ActionScript 3 compiler options, but I digress&hellip;</p>

<p>The normal MSBuild / xbuild steps to compile a CSharp project (<code>.csproj</code>) involved the following high-level Targets:</p>

<ul>
<li>PrepareForBuild:</li>
<li>CopyFilesMarkedCopyLocal:</li>
<li>GenerateSatelliteAssemblies:</li>
<li>CoreCompile:</li>
<li>DeployOutputFiles:</li>
</ul>


<p>Ignoring the multimedia pipeline processing of assets (images, SWFs, vector transformations, 3D models, etc..) the only step that we need to focus on is the <code>CoreCompile</code>:</p>

<p><strong>Import Project=&ldquo;$(MSBuildBinPath)\Microsoft.CSharp.targets&rdquo;</strong></p>

<pre><code>~~~
&lt;Target
        Name="CoreCompile"
        Inputs="$(MSBuildAllProjects);@(Compile);@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile);
                $(KeyOriginatorFile);@(ReferencePath);$(Win32Icon);$(Win32Resource)"
        Outputs="@(DocFileItem);@(IntermediateAssembly)"
        DependsOnTargets="$(CoreCompileDependsOn)"&gt;
        &lt;Csc
                AdditionalLibPaths="$(AdditionalLibPaths)"
                AddModules="@(AddModules)"
                AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
                BaseAddress="$(BaseAddress)"
~~~
                Win32Icon="$(Win32Icon)"
                Win32Resource="$(Win32Resource)"
                Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
                ToolExe="$(CscToolExe)"
                ToolPath="$(CscToolPath)" /&gt;

&lt;/Target&gt;
~~~
</code></pre>

<p>Looking at the <code>Csc</code> section, if I can replace <code>ToolExe</code> and <code>CscToolPath</code> properties then I can have this Target use PlayScript (<code>psc</code>) vs. <code>csc</code> or <code>mcs</code>.</p>

<p>So as a quick test, copying <code>Microsoft.CSharp.targets</code> to PlayScript.MSBuild.Targets<code>and adding this</code>PropertyGroup<code>section with hardcoded paths before the</code>CoreCompile` target section:</p>

<pre><code>    &lt;PropertyGroup&gt;
            &lt;PlayScriptBinPath Condition=" '$(PsBuildBinPath)' == '' "&gt;/Users/sushi/Library/Application Support/XamarinStudio-5.0/LocalInstall/Addins/MonoDevelop.PlayScript.5.10.2/MonoDevelop.PlayScript.SupportPackages&lt;/PlayScriptBinPath&gt;
            &lt;CscToolExe Condition=" '$(CscToolExe)' == '' "&gt;psc&lt;/CscToolExe&gt;
            &lt;CscToolPath Condition=" '$(CscToolPath)' == '' "&gt;$(PsBuildBinPath)&lt;/CscToolPath&gt;
    &lt;/PropertyGroup&gt;
</code></pre>

<p>And replacing:</p>

<pre><code>&lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
</code></pre>

<p>with:</p>

<pre><code>&lt;Import Project="packages\PlayScript.MSBuild.5.10.2.2\build\PlayScript.MSBuild.Targets" /&gt;
</code></pre>

<p><strong>>xbuild nuget-test.psproj</strong></p>

<pre><code>XBuild Engine Version 12.0
Mono, Version 4.2.2.0
Copyright (C) 2005-2013 Various Mono authors

Build started 1/1/2016 11:05:25 AM.
__________________________________________________
Project "/Users/sushi/code/XamTests/nuget-test/nuget-test.psproj" (default target(s)):
    Target PrepareForBuild:
        Configuration: Debug Platform: x86
    Target BeforeResolveReferences:
                         AssemblySearchPaths: {CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{PkgConfig};{GAC};{RawFileName};bin/Debug/;/Users/sushi/mono/play32/bin
    Target GenerateSatelliteAssemblies:
    No input files were specified for target GenerateSatelliteAssemblies, skipping.
    Target GenerateTargetFrameworkMonikerAttribute:
    Skipping target "GenerateTargetFrameworkMonikerAttribute" because its outputs are up-to-date.
    Target CoreCompile:
         psc
         /Users/sushi/mono/play32/bin

        Tool /Users/sushi/mono/play32/bin/psc execution started with arguments: /noconfig /debug:full /debug+ /optimize- /out:obj/x86/Debug/nuget-test.exe Main.play /target:exe /define:DEBUG /nostdlib /platform:x86 /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/System.dll /reference:packages/PlayScript.AOT.5.10.2.0/lib/net45/PlayScript.Dynamic_aot.dll /reference:packages/PlayScript.AOT.5.10.2.0/lib/net45/pscorlib_aot.dll /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/System.Core.dll /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/mscorlib.dll /warn:4
    Target DeployOutputFiles:
        Copying file from '/Users/sushi/code/XamTests/nuget-test/obj/x86/Debug/nuget-test.exe.mdb' to '/Users/sushi/code/XamTests/nuget-test/bin/Debug/nuget-test.exe.mdb'
        Copying file from '/Users/sushi/code/XamTests/nuget-test/obj/x86/Debug/nuget-test.exe' to '/Users/sushi/code/XamTests/nuget-test/bin/Debug/nuget-test.exe'
Done building project "/Users/sushi/code/XamTests/nuget-test/nuget-test.psproj".

Build succeeded.
     0 Warning(s)
     0 Error(s)

Time Elapsed 00:00:01.8555370
</code></pre>

<p>That works, <strong>cool</strong>&hellip;</p>

<p>But that requires mod'ing complete copy of <code>Microsoft.CSharp.targets</code>.</p>

<p>So lets strip out everything but our PlayScript changes and import the std CSharp targets.</p>

<pre><code>&lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
    &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;

    &lt;PropertyGroup&gt;
        &lt;DefaultLanguageSourceExtension&gt;.cs&lt;/DefaultLanguageSourceExtension&gt;
        &lt;Language&gt;PlayScript&lt;/Language&gt;
    &lt;/PropertyGroup&gt;

&lt;!-- PlayScript --&gt;
    &lt;PropertyGroup&gt;
        &lt;PlayScriptBinPath Condition=" '$(PsBuildBinPath)' == '' "&gt;/Users/sushi/Library/Application Support/XamarinStudio-5.0/LocalInstall/Addins/MonoDevelop.PlayScript.5.10.2/MonoDevelop.PlayScript.SupportPackages&lt;/PlayScriptBinPath&gt;
        &lt;CscToolExe Condition=" '$(CscToolExe)' == '' "&gt;psc&lt;/CscToolExe&gt;
        &lt;CscToolPath Condition=" '$(CscToolPath)' == '' "&gt;$(PsBuildBinPath)&lt;/CscToolPath&gt;
    &lt;/PropertyGroup&gt;
&lt;!-- PlayScript --&gt;

&lt;!--
    Note: Microsoft.CSharp.targets already imports Microsoft.Common.targets
          so if we need to override/replacement would need to do it after the 
          Microsoft.CSharp.targets import either in this file or by importing another
          file, i.e. PlayScript.Common.targets
          (this is where we will include our multimedia pipeline tasks)
    &lt;Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" /&gt;
--&gt;

&lt;!-- PlayScript --&gt;
    &lt;Target Name="BeforeResolveReferences"&gt;
        &lt;CreateProperty
            Value="$(AssemblySearchPaths);$(PsBuildBinPath)"&gt;
            &lt;Output TaskParameter="Value" PropertyName="AssemblySearchPaths" /&gt;
        &lt;/CreateProperty&gt;
    &lt;/Target&gt;
&lt;!-- PlayScript --&gt;

    &lt;Import Project="$(MSBuildThisFileDirectory)\PlayScript.MSBuild.Debug.Targets" /&gt;
&lt;/Project&gt;
</code></pre>

<p>That works&hellip;</p>

<p>We still need to look into the custom Xamarin Mobile targets and  remove the hardcoded paths from our PlayScript targets, but lets leave that for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# AppleScript calls with functions, arguments and results]]></title>
    <link href="http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results/"/>
    <updated>2015-12-06T20:06:17-08:00</updated>
    <id>http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results</id>
    <content type="html"><![CDATA[<p>Posted a new C# library to <a href="https://github.com/sushihangover/Sushi.AppleScript">Github</a> to allow the calling of AppleScript by function name, passing in arguments and receiving a return value.</p>

<h1>Sushi.AppleScript</h1>

<p><a href="https://github.com/sushihangover/Sushi.AppleScript">https://github.com/sushihangover/Sushi.AppleScript</a></p>

<p>The C# library allows you to execute AppleScript code that originates from a file or <code>string</code> and:</p>

<ul>
<li>Call function by name (Optional)</li>
<li>Pass multiple arguments to a function (Optional)</li>
<li>Execution success or failure</li>
<li>Return results from the function call</li>
</ul>


<h3>Build:</h3>

<pre><code>cd Sushi.AppleScript.Native
xcodebuild
cd -
xbuild Sushi.AppleScript.sln
</code></pre>

<h3>Test:</h3>

<p><strong>Mono&rsquo;s supplied nunit-console:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>NUnit 3.x console:</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>Note:</strong></p>

<pre><code>AppleScript.cs(7,7): error CS0246: The type or namespace name `MonoMac' could not be found. Are you missing an assembly reference?
</code></pre>

<p>If you do not have a local copy of <a href="https://github.com/mono/monomac">MonoMac</a>, xbuild will fail. It is available via &ldquo;Xamarin Studio&rdquo;:</p>

<pre><code>mdtool build Sushi.AppleScript.sln
</code></pre>

<h4>Example Usage:</h4>

<pre><code>var scptInfo = new FileInfo ("./AppleScripts/FunctionTests.txt");
string funcName = "IsRunning";
List&lt;string&gt; argList = new List&lt;string&gt; () {
    @"Finder",
};
string scriptReturnValue;
var executionSuccess = AppleScript.Run (scptInfo, funcName, argList, out scriptReturnValue);
</code></pre>

<ul>
<li>Consult <a href="https://github.com/sushihangover/Sushi.AppleScript/blob/master/Sushi.AppleScript.Test/Test.cs">Test.cs</a> for more examples</li>
</ul>


<h3>Supports:</h3>

<ul>
<li>MonoMac</li>
<li>Xamarin.Mac</li>
<li>i386 and x86_64 Mono Support</li>
</ul>


<h3>Runtime/Deployment debugging:</h3>

<p>Runtime/Deployment debugging available by setting an environment variable, <code>APPLE_SCRIPT_DEBUG</code>:</p>

<p><code>export APPLE_SCRIPT_DEBUG=true</code></p>

<p>The results are logged with the prefix <code>AppleScript:</code>, output is avaiable via Console.app.</p>

<h3>Sushi.AppleScript</h3>

<p>The C# library that provides the P/Invoke wrapper to execute AppleScript functions</p>

<h3>Sushi.AppleScript.Native</h3>

<p>An OS-X Universial (i386 &amp; x86_64) Shared Library:</p>

<ul>
<li><code>libAppleScriptEvent.dylib</code></li>
</ul>


<h3>Sushi.AppleScript.Test</h3>

<p>NUnit tests for Sushi.AppleScript library</p>

<h3>Sushi.AppleScript.CLI</h3>

<p>TODO: Provides an <code>osascript</code> style CLI utility to execute functions with AppleScript files (<code>osascript</code> does not contain this feature)</p>

<h3>License:</h3>

<ul>
<li>The MIT License (MIT)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Demo / Samples updated]]></title>
    <link href="http://sushihangover.github.io/monomac-samples-updates/"/>
    <updated>2015-11-23T20:51:39-08:00</updated>
    <id>http://sushihangover.github.io/monomac-samples-updates</id>
    <content type="html"><![CDATA[<p>A number of the MonoMac demos were broken in various ways so as I was using some of them in my PlayScript / ActionScript work with Stage3d, Away3d and Starling, I update the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> repo with the corrected versions.</p>

<p><img src="/images/MonoMac-Demos.gif" alt="" /></p>

<pre><code>./AnimatingViews/bin/Debug/AnimatingViews.app
./attic/Hello/Hello.app
./ButtonMadness/bin/Debug/ButtonMadness.app
./CAQuartzComposition/bin/Debug/CAQuartzComposition.app
./CoreAnimationBook/BackgroundFilteredView/bin/Debug/BackgroundFilteredView.app
./CoreAnimationBook/CustomAnimationTiming/bin/Debug/CustomAnimationTiming.app
./CoreAnimationBook/CustomizeAnimation/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/CustomizeAnimation2/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/FilteredView/bin/Debug/FilteredView.app
./CoreAnimationBook/GroupAnimation/bin/Debug/GroupAnimation.app
./CoreAnimationBook/KeyFrameMoveAView/bin/Debug/KeyFrameMoveAView.app
./CoreAnimationBook/LayerBackedControls/bin/Debug/LayerBackedControls.app
./CoreAnimationBook/QCBackground/bin/Debug/QCBackground.app
./CoreAnimationBook/TimedAnimation/bin/Debug/TimedAnimation.app
./CoreTextArcMonoMac/bin/Debug/CoreTextArcMonoMac.app
./CoreWLANWirelessManager/bin/Debug/CoreWLANWirelessManager.app
./DatePicker/bin/Debug/DatePicker.app
./DockAppIcon/bin/Debug/DockAppIcon.app
./DocumentSample/bin/Debug/DocumentSample.app
./DrawerMadness/DrawerMadness/bin/Debug/DrawerMadness.app
./Fire/bin/Debug/Fire.app
./GLFullScreen/bin/Debug/GLFullScreen.app
./GlossyClock/bin/Debug/GlossyClock.app
./GLSLShader/bin/Debug/GLSLShader.app
./ImageKitDemoStep1/bin/Debug/ImageKitDemo.app
./macdoc/bin/Debug/macdoc.app
./MonoMacGameWindow/bin/Debug/MonoMacGameView.app
./NSAlert/bin/Debug/NSAlertSample.app
./NSTableViewBinding/bin/Debug/NSTableViewBinding.app
./OpenGL-NeHe/NeHeLesson1/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson13/bin/Debug/NeHeLesson13.app
./OpenGL-NeHe/NeHeLesson17/bin/Debug/NeHeLesson17.app
./OpenGL-NeHe/NeHeLesson2/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson3/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson4/bin/Debug/NeHeLesson4.app
./OpenGL-NeHe/NeHeLesson5/bin/Debug/NeHeLesson5.app
./OpenGL-NeHe/NeHeLesson6/bin/Debug/NeHeLesson6.app
./OpenGL-NeHe/NeHeLesson7/bin/Debug/NeHeLesson7.app
./OpenGL-NeHe/NeHeLesson8/bin/Debug/NeHeLesson8.app
./OpenGL-NeHe/NeHeLesson9/bin/Debug/NeHeLesson9.app
./OpenGLLayer/bin/Debug/OpenGLLayer.app
./OpenGLViewSample/OpenGLViewSample/bin/Debug/MMOpenTK.app
./PopupBindings/bin/Debug/PopupBindings.app
./PredicateEditorSample/bin/Debug/PredicateEditorSample.app
./QTRecorder/bin/Debug/QTRecorder.app
./RoundedTransparentWindow/bin/Debug/RoundedTransparentWindow.app
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Where is the CAEmitterCell Content propery?]]></title>
    <link href="http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery/"/>
    <updated>2015-11-23T06:01:10-08:00</updated>
    <id>http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/MonoMac-Fire.gif" title="Fire" >
I was trying to integrate ActionScript and Away3d with the CAEmitterCell particles using MonoMac for users that do not have access (a license) to Xamarin.Mac, but&hellip;</p>

<p>The MonoMac project is missing the maccore <code>CoreAnimation/CAEmitterCell.cs</code> in the Make.shared and thus the <code>MonoMac.dll</code> that is distributed via Xamarin Studio is broken in this regard as it is missing the ability to assign an Image to the emitter.</p>

<p>Example:</p>

<pre><code>            // Create the fire emitter cell
            CAEmitterCell fire = CAEmitterCell.EmitterCell ();
            fire.EmissionLongitude = (float)Math.PI;
            fire.BirthRate = 0;
            fire.Velocity = 80;
            fire.VelocityRange = 30;
            fire.EmissionRange = 1.1f;
            fire.AccelerationY = 200;
            fire.ScaleSpeed = 0.3f;

            RectangleF rect = RectangleF.Empty;
            CGColor color = new CGColor (0.8f,0.4f,0.2f,0.10f);
            fire.Color = color;
            fire.Contents = NSImage.ImageNamed ("fire.png").AsCGImage (ref rect, null, null);
</code></pre>

<p>I have updated PlayScript&rsquo;s <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> (forked from <a href="https://github.com/mono/monomac">Mono/MonoMac</a>) to fix this.</p>

<p><strong>git diff src/Make.shared</strong></p>

<pre><code>diff --git a/src/Make.shared b/src/Make.shared
index 986ff28..a84aeae 100644
--- a/src/Make.shared
+++ b/src/Make.shared
@@ -44,6 +44,7 @@ SHARED_SOURCE = \
        ./CoreAnimation/CALayer.cs                      \
        ./CoreAnimation/CATextLayer.cs                  \
        ./CoreAnimation/CAMediaTimingFunction.cs        \
+       ./CoreAnimation/CAEmitterCell.cs                \
        ./CoreFoundation/CFArray.cs                     \
        ./CoreFoundation/CFBoolean.cs                   \
        ./CoreFoundation/CFDictionary.cs                \
</code></pre>
]]></content>
  </entry>
  
</feed>
