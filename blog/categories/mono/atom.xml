<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mono | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-12-14T08:29:40-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# AppleScript calls with functions, arguments and results]]></title>
    <link href="http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results/"/>
    <updated>2015-12-06T20:06:17-08:00</updated>
    <id>http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results</id>
    <content type="html"><![CDATA[<p>Posted a new C# library to <a href="https://github.com/sushihangover/Sushi.AppleScript">Github</a> to allow the calling of AppleScript by function name, passing in arguments and receiving a return value.</p>

<h1>Sushi.AppleScript</h1>

<p><a href="https://github.com/sushihangover/Sushi.AppleScript">https://github.com/sushihangover/Sushi.AppleScript</a></p>

<p>The C# library allows you to execute AppleScript code that originates from a file or <code>string</code> and:</p>

<ul>
<li>Call function by name (Optional)</li>
<li>Pass multiple arguments to a function (Optional)</li>
<li>Execution success or failure</li>
<li>Return results from the function call</li>
</ul>


<h3>Build:</h3>

<pre><code>cd Sushi.AppleScript.Native
xcodebuild
cd -
xbuild Sushi.AppleScript.sln
</code></pre>

<h3>Test:</h3>

<p><strong>Mono&rsquo;s supplied nunit-console:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>NUnit 3.x console:</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>Note:</strong></p>

<pre><code>AppleScript.cs(7,7): error CS0246: The type or namespace name `MonoMac' could not be found. Are you missing an assembly reference?
</code></pre>

<p>If you do not have a local copy of <a href="https://github.com/mono/monomac">MonoMac</a>, xbuild will fail. It is available via &ldquo;Xamarin Studio&rdquo;:</p>

<pre><code>mdtool build Sushi.AppleScript.sln
</code></pre>

<h4>Example Usage:</h4>

<pre><code>var scptInfo = new FileInfo ("./AppleScripts/FunctionTests.txt");
string funcName = "IsRunning";
List&lt;string&gt; argList = new List&lt;string&gt; () {
    @"Finder",
};
string scriptReturnValue;
var executionSuccess = AppleScript.Run (scptInfo, funcName, argList, out scriptReturnValue);
</code></pre>

<ul>
<li>Consult <a href="https://github.com/sushihangover/Sushi.AppleScript/blob/master/Sushi.AppleScript.Test/Test.cs">Test.cs</a> for more examples</li>
</ul>


<h3>Supports:</h3>

<ul>
<li>MonoMac</li>
<li>Xamarin.Mac</li>
<li>i386 and x86_64 Mono Support</li>
</ul>


<h3>Runtime/Deployment debugging:</h3>

<p>Runtime/Deployment debugging available by setting an environment variable, <code>APPLE_SCRIPT_DEBUG</code>:</p>

<p><code>export APPLE_SCRIPT_DEBUG=true</code></p>

<p>The results are logged with the prefix <code>AppleScript:</code>, output is avaiable via Console.app.</p>

<h3>Sushi.AppleScript</h3>

<p>The C# library that provides the P/Invoke wrapper to execute AppleScript functions</p>

<h3>Sushi.AppleScript.Native</h3>

<p>An OS-X Universial (i386 &amp; x86_64) Shared Library:</p>

<ul>
<li><code>libAppleScriptEvent.dylib</code></li>
</ul>


<h3>Sushi.AppleScript.Test</h3>

<p>NUnit tests for Sushi.AppleScript library</p>

<h3>Sushi.AppleScript.CLI</h3>

<p>TODO: Provides an <code>osascript</code> style CLI utility to execute functions with AppleScript files (<code>osascript</code> does not contain this feature)</p>

<h3>License:</h3>

<ul>
<li>The MIT License (MIT)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Demo / Samples updated]]></title>
    <link href="http://sushihangover.github.io/monomac-samples-updates/"/>
    <updated>2015-11-23T20:51:39-08:00</updated>
    <id>http://sushihangover.github.io/monomac-samples-updates</id>
    <content type="html"><![CDATA[<p>A number of the MonoMac demos were broken in various ways so as I was using some of them in my PlayScript / ActionScript work with Stage3d, Away3d and Starling, I update the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> repo with the corrected versions.</p>

<p><img src="/images/MonoMac-Demos.gif" alt="" /></p>

<pre><code>./AnimatingViews/bin/Debug/AnimatingViews.app
./attic/Hello/Hello.app
./ButtonMadness/bin/Debug/ButtonMadness.app
./CAQuartzComposition/bin/Debug/CAQuartzComposition.app
./CoreAnimationBook/BackgroundFilteredView/bin/Debug/BackgroundFilteredView.app
./CoreAnimationBook/CustomAnimationTiming/bin/Debug/CustomAnimationTiming.app
./CoreAnimationBook/CustomizeAnimation/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/CustomizeAnimation2/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/FilteredView/bin/Debug/FilteredView.app
./CoreAnimationBook/GroupAnimation/bin/Debug/GroupAnimation.app
./CoreAnimationBook/KeyFrameMoveAView/bin/Debug/KeyFrameMoveAView.app
./CoreAnimationBook/LayerBackedControls/bin/Debug/LayerBackedControls.app
./CoreAnimationBook/QCBackground/bin/Debug/QCBackground.app
./CoreAnimationBook/TimedAnimation/bin/Debug/TimedAnimation.app
./CoreTextArcMonoMac/bin/Debug/CoreTextArcMonoMac.app
./CoreWLANWirelessManager/bin/Debug/CoreWLANWirelessManager.app
./DatePicker/bin/Debug/DatePicker.app
./DockAppIcon/bin/Debug/DockAppIcon.app
./DocumentSample/bin/Debug/DocumentSample.app
./DrawerMadness/DrawerMadness/bin/Debug/DrawerMadness.app
./Fire/bin/Debug/Fire.app
./GLFullScreen/bin/Debug/GLFullScreen.app
./GlossyClock/bin/Debug/GlossyClock.app
./GLSLShader/bin/Debug/GLSLShader.app
./ImageKitDemoStep1/bin/Debug/ImageKitDemo.app
./macdoc/bin/Debug/macdoc.app
./MonoMacGameWindow/bin/Debug/MonoMacGameView.app
./NSAlert/bin/Debug/NSAlertSample.app
./NSTableViewBinding/bin/Debug/NSTableViewBinding.app
./OpenGL-NeHe/NeHeLesson1/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson13/bin/Debug/NeHeLesson13.app
./OpenGL-NeHe/NeHeLesson17/bin/Debug/NeHeLesson17.app
./OpenGL-NeHe/NeHeLesson2/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson3/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson4/bin/Debug/NeHeLesson4.app
./OpenGL-NeHe/NeHeLesson5/bin/Debug/NeHeLesson5.app
./OpenGL-NeHe/NeHeLesson6/bin/Debug/NeHeLesson6.app
./OpenGL-NeHe/NeHeLesson7/bin/Debug/NeHeLesson7.app
./OpenGL-NeHe/NeHeLesson8/bin/Debug/NeHeLesson8.app
./OpenGL-NeHe/NeHeLesson9/bin/Debug/NeHeLesson9.app
./OpenGLLayer/bin/Debug/OpenGLLayer.app
./OpenGLViewSample/OpenGLViewSample/bin/Debug/MMOpenTK.app
./PopupBindings/bin/Debug/PopupBindings.app
./PredicateEditorSample/bin/Debug/PredicateEditorSample.app
./QTRecorder/bin/Debug/QTRecorder.app
./RoundedTransparentWindow/bin/Debug/RoundedTransparentWindow.app
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Where is the CAEmitterCell Content propery?]]></title>
    <link href="http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery/"/>
    <updated>2015-11-23T06:01:10-08:00</updated>
    <id>http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/MonoMac-Fire.gif" title="Fire" >
I was trying to integrate ActionScript and Away3d with the CAEmitterCell particles using MonoMac for users that do not have access (a license) to Xamarin.Mac, but&hellip;</p>

<p>The MonoMac project is missing the maccore <code>CoreAnimation/CAEmitterCell.cs</code> in the Make.shared and thus the <code>MonoMac.dll</code> that is distributed via Xamarin Studio is broken in this regard as it is missing the ability to assign an Image to the emitter.</p>

<p>Example:</p>

<pre><code>            // Create the fire emitter cell
            CAEmitterCell fire = CAEmitterCell.EmitterCell ();
            fire.EmissionLongitude = (float)Math.PI;
            fire.BirthRate = 0;
            fire.Velocity = 80;
            fire.VelocityRange = 30;
            fire.EmissionRange = 1.1f;
            fire.AccelerationY = 200;
            fire.ScaleSpeed = 0.3f;

            RectangleF rect = RectangleF.Empty;
            CGColor color = new CGColor (0.8f,0.4f,0.2f,0.10f);
            fire.Color = color;
            fire.Contents = NSImage.ImageNamed ("fire.png").AsCGImage (ref rect, null, null);
</code></pre>

<p>I have updated PlayScript&rsquo;s <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> (forked from <a href="https://github.com/mono/monomac">Mono/MonoMac</a>) to fix this.</p>

<p><strong>git diff src/Make.shared</strong></p>

<pre><code>diff --git a/src/Make.shared b/src/Make.shared
index 986ff28..a84aeae 100644
--- a/src/Make.shared
+++ b/src/Make.shared
@@ -44,6 +44,7 @@ SHARED_SOURCE = \
        ./CoreAnimation/CALayer.cs                      \
        ./CoreAnimation/CATextLayer.cs                  \
        ./CoreAnimation/CAMediaTimingFunction.cs        \
+       ./CoreAnimation/CAEmitterCell.cs                \
        ./CoreFoundation/CFArray.cs                     \
        ./CoreFoundation/CFBoolean.cs                   \
        ./CoreFoundation/CFDictionary.cs                \
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp (C# NCurses) Updated]]></title>
    <link href="http://sushihangover.github.io/cursessharp-c-number-ncurses-updated/"/>
    <updated>2015-11-21T15:10:58-08:00</updated>
    <id>http://sushihangover.github.io/cursessharp-c-number-ncurses-updated</id>
    <content type="html"><![CDATA[<p>I made some updates to the CursesSharp project, so check out the update README.md for details:</p>

<h1>CursesSharp</h1>

<p><img src="http://sushihangover.github.io/images/FireworksDemo.gif" alt="" /></p>

<h2>INTRODUCTION</h2>

<p>CursesSharp is a C# wrapper for curses library.
The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.
The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</p>

<p><img src="http://sushihangover.github.io/images/RainDemo.gif" alt="RainDemo" /></p>

<h2>DOCUMENTATION</h2>

<p>CursesSharp consists of a .NET assembly (CursesSharp.dll) and a native wrapper shared library (DLL) which is linked with PDCurses (in Windows) or ncurses  (in Unix-like systems). This wrapper library is called CursesWrapper.dll  in Windows or libCursesWrapper.so in Unix or libCursesWrapper.dylib in OS-X. CursesSharp provides a bit cleaner
API to curses than the original one, although function names remain unchanged for the most part.</p>

<p><img src="http://sushihangover.github.io/images/UnicodeDemo.gif" alt="" /></p>

<h3>CursesSharp namespace contains several important classes:</h3>

<ul>
<li>Defs - contains constants from curses: attribute, color and key definitions
  as well as some macros (COLOR_PAIR, PAIR_NUMBER)</li>
<li>Curses - the main interface to curses; contains methods global to the library,
  a StdScr property that returns the stdscr window, and as a convenience,
  some window-specific functions that operate on stdscr</li>
<li>Window - represents a curses window that can be written to, or read from;
  contains wrappers for most of curses functions with names starting with
  w<em> or mvw</em></li>
<li>CursesException - an exception class, thrown when a curses function
  reports an error</li>
</ul>


<p><em>Documentation is (always) under construction. Help would be much appreciated.</em></p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X.</p>

<p>The build process has been tested on:</p>

<ul>
<li>OS-X 10.10.5</li>
<li>Apple LLVM version 7.0.0 (clang-700.1.76)</li>
<li>Mono JIT compiler version 4.2.1 64-bit build.</li>
</ul>


<h2>0. Prerequisites</h2>

<p>The native library is now built as a &lsquo;fat&rsquo; library so either a Mono 32-bit or 64-bit build can be used.</p>

<p><strong>$> file libCursesWrapper.so</strong></p>

<pre><code>libCursesWrapper.so: Mach-O universal binary with 2 architectures
libCursesWrapper.so (for architecture i386):    Mach-O dynamically linked shared library i386
libCursesWrapper.so (for architecture x86_64):  Mach-O 64-bit dynamically linked shared library x86_64
</code></pre>

<!--A **64-bit build of Mono** as the the native shared library (so/dylib) is of ARCH type x64_86. 

**If you are running the default 32-bit Mono install, you will have to build the native library as ARCH i386. Currently there is not an included build process for this.
**
-->


<h2>1. Getting CursesSharp</h2>

<p>You can clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<h2>2. Make the Native Library</h2>

<pre><code>mdtool build CursesSharp.Native.sln --target:Build --configuration:Release
mdtool build CursesSharp.Native.sln --target:Build --configuration:Debug
</code></pre>

<h2>3. Make the C# Libraries and Demos</h2>

<pre><code>xbuild CursesSharp.sln /target:Clean
xbuild CursesSharp.sln /target:Build
</code></pre>

<p>Note: To run the demos from the CLI, make sure that set the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html"><code>DYLD_FALLBACK_LIBRARY_PATH</code></a>. While still in the repo&rsquo;s root directory:</p>

<pre><code>export DYLD_FALLBACK_LIBRARY_PATH=$(PWD)/CursesSharp.Native/bin/Debug:/usr/lib:$DYLD_FALLBACK_LIBRARY_PATH
</code></pre>

<p>There is also a CI script that can be called via <code>source</code> to setup <code>DYLD_FALLBACK_LIBRARY_PATH</code> and <code>LD_LIBRARY_PATH</code></p>

<pre><code>source CI/libpath-source-me.sh
</code></pre>

<p>To learn more about <code>dyld</code> check out the <code>man</code> page:</p>

<pre><code>man dyld
</code></pre>

<h2>Demos:</h2>

<p>There are various demos available to review:</p>

<ul>
<li>Demo.CursesSharp.Firework</li>
<li>Demo.CursesSharp.Gui.HelloWorld</li>
<li>Demo.CursesSharp.HelloWorld</li>
<li>Demo.CursesSharp.Rain</li>
<li>Demo.CursesSharp.Unicode</li>
<li>Demo.Gui.MessageBox</li>
<li>Demo.Gui.MidnightCommander</li>
<li>Demo.Gui.Timeout</li>
<li>Demo.Native.ResizeTerm</li>
</ul>


<h2>Rain Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.CursesSharp.Rain/bin/x64/Debug/
mono RainDemo.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/RainDemo.gif" alt="RainDemo" /></p>

<h2>FireWorks Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.CursesSharp.Rain/bin/x64/Debug/
mono FireworkDemo.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/FireworksDemo.gif" alt="" /></p>

<h2>MidnightCommander Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.MidnightCommander.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/CursesSharp-Midnight.png" alt="" /></p>

<h2>Installing CursesSharp on Linux</h2>

<h3>0. Prerequisites</h3>

<p>Note: It is assumed you are running 64-bit Linux (ARCH x86_64)</p>

<p>Install some dependencies:</p>

<pre><code>sudo apt-get install lib32ncursesw5-dev
sudo apt-get install lib32ncurses5-dev
sudo apt-get install ncurses-doc
</code></pre>

<h2>1. Getting CursesSharp</h2>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<h3>2. Make the Native Library</h3>

<pre><code>mdtool build CursesSharp.Native.Linux.sln --target:Build --configuration:Release
mdtool build CursesSharp.Native.Linux.sln --target:Build --configuration:Debug
</code></pre>

<h3>3. Make the C# Libraries and Demos</h3>

<pre><code>xbuild CursesSharp.sln /target:Clean /property:configuration=Debug
xbuild CursesSharp.sln /target:Build /property:configuration=Debug
</code></pre>

<h1>Demos:</h1>

<p>Note: To run the demos from the CLI, make sure that set the <a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"><code>LD_LIBRARY_PATH</code></a>. While still in the repo&rsquo;s root directory:</p>

<pre><code>export LD_LIBRARY_PATH=$(PWD)/CursesSharp.Native/bin/Debug:/usr/lib:$LD_LIBRARY_PATH
</code></pre>

<p>There is also a CI script that can be called via <code>source</code> to setup <code>DYLD_FALLBACK_LIBRARY_PATH</code> and <code>LD_LIBRARY_PATH</code></p>

<pre><code>source CI/libpath-source-me.sh
</code></pre>

<p>To learn more about <code>ld</code> check out the <code>man</code> page:</p>

<pre><code>man ld
</code></pre>

<h2>MessageBox Demo:</h2>

<pre><code>cd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.Messagebox.exe
cd -
</code></pre>

<h5>(Ubuntu / Konsole)</h5>

<p><img src="http://sushihangover.github.io/images/CursesSharp-MsgBox-Konsole.png" alt="" /></p>

<h2>MidnightCommander Demo:</h2>

<pre><code>cd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.MidnightCommander.exe
cd -
</code></pre>

<h4>(Ubuntu / Konsole)</h4>

<p><img src="http://sushihangover.github.io/images/CursesSharp-Midnight-Konsole.png" alt="" /></p>

<h2>Installing CursesSharp on Windows</h2>

<p>Refer the original Windows project, source code and instructions are <a href="http://curses-sharp.sourceforge.net/index.php?page=windows">here</a></p>

<h2>CI</h2>

<p>OS-X:</p>

<pre><code>source CI/libpath-source-me.sh
CI/build.osx.sh
</code></pre>

<p>Linux:</p>

<pre><code>{TODO}
</code></pre>

<h2>TODO &amp; Contributors:</h2>

<ul>
<li>Nuget support</li>
<li>MS Window support (via PDCurses)</li>
<li>Documentation</li>
<li>Bug reporting/fixes</li>
</ul>


<p>Looking for contributors in these areas and/or any other areas that you would help out on.</p>

<p><a href="https://github.com/sushihangover/CursesSharp">Fork and Contribute</a> ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio mdtool - Where is it?]]></title>
    <link href="http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it/"/>
    <updated>2015-11-21T08:36:11-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure if it is a bug or not, but older versions of Xamarin Studio (and MonoDevelop) on OS-X (prior to El Capitan) installed a <code>mdtool</code> shell script in <code>/usr/local/bin</code> but that no longer happens(?).</p>

<p><code>mdtool</code> original/missing shell script:</p>

<pre><code>#!/bin/bash
MONO_EXEC="exec mono-sgen"
EXE_PATH="/Applications/Xamarin Studio.app/Contents/Resources/lib/monodevelop/bin/mdtool.exe"
$MONO_EXEC $MONO_OPTIONS "$EXE_PATH" "$@"
</code></pre>

<p>So create the script with the content above and place it into a directory in your path. <code>/usr/local/bin</code> is fine, but I personally install my shell scripts into a <code>$HOME/.scripts</code> directory that is included in my path so I can backup, via a git repo, my personal scripts and distinguish what I have created verus what gets installed in the <code>/usr/local/bin</code> by applications such a <code>brew</code>&hellip;</p>

<p>Note: Make sure that you <code>chmod a+x mdtool</code> in order to make it executable&hellip;</p>

<p>As always, have fun&hellip; ;-)</p>

<pre><code>$mdtool

Xamarin Studio Tool Runner

Usage: mdtool [options] &lt;tool&gt; ... : Runs a tool.
       mdtool setup ... : Runs the setup utility.
       mdtool -q : Lists available tools.

Options:
  --verbose (-v)   Increases log verbosity. Can be used multiple times.
  --no-reg-update  Skip updating addin registry. Faster but results in
                   random errors if registry is not up to date.

Available tools:
- build: Project build tool
- dbgen: Parser database generation tool
- project-export: Project conversion tool
- gsetup: Graphical add-in setup utility
- archive: Project archiving tool
- account: Xamarin account tool
- mac-bundle: Mac application bundle and installer generator.
</code></pre>
]]></content>
  </entry>
  
</feed>
