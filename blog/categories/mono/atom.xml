<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mono | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-24T22:25:20-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mono - NUnit Hello World]]></title>
    <link href="http://sushihangover.github.io/mono-nunit-world-world/"/>
    <updated>2015-06-24T22:11:16-07:00</updated>
    <id>http://sushihangover.github.io/mono-nunit-world-world</id>
    <content type="html"><![CDATA[<p>From my Answer for &ldquo;<a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Run NUnit test on Ubuntu from command line</a>&rdquo; on <a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Stackoverflow</a>:</p>

<p>Lets start from the beginning:</p>

<p>Get the latest and greatest NUnit <strong>AND</strong> it&rsquo;s Runner tools</p>

<pre><code>curl https://api.nuget.org/downloads/nuget.exe -o nuget.exe
mono nuget.exe install NUnit
mono nuget.exe install NUnit.Runners
</code></pre>

<p>Make sure the mono is finding those assemblies <strong>first</strong> (vs the GAC)</p>

<pre><code>export MONO_PATH=$(PWD)/NUnit.Runners.2.6.4/tools;$(PWD)/NUnit.2.6.4/lib
</code></pre>

<p>Create your test example (save it to vi OnlyTest.cs):</p>

<pre><code>using System;
using System.Text;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public class OnlyTest
{
    [Test]
    public void MyTest() 
    {
        int a = 10;
        Assert.AreEqual(10, a);
    }
}
</code></pre>

<p> Compile it:</p>

<pre><code>  mcs OnlyTest.cs -target:library -r:NUnit.2.6.4/lib/nunit.framework.dll -out:OnlyTest.dll
</code></pre>

<p>Run it:</p>

<pre><code>mono ./NUnit.Runners.2.6.4/tools/nunit-console.exe OnlyTest.dll -noresult
</code></pre>

<p>Output:</p>

<pre><code>Using default runtime: v4.0.30319
NUnit-Console version 2.6.4.14350
Copyright (C) 2002-2012 Charlie Poole.
Copyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.
Copyright (C) 2000-2002 Philip Craig.
All Rights Reserved.

Runtime Environment -
   OS Version: Unix 14.3.0.0
  CLR Version: 4.0.30319.17020 ( Mono 4.0 ( 4.3.0 (master/b044a27 Thu Jun 18 15:17:08 PDT 2015) ) )

ProcessModel: Default    DomainUsage: Single
Execution Runtime: mono-4.0
.
Tests run: 1, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.0280499 seconds
  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# - Native Interop Helloworld]]></title>
    <link href="http://sushihangover.github.io/c-number-native-interop-helloworld/"/>
    <updated>2015-06-23T18:40:28-07:00</updated>
    <id>http://sushihangover.github.io/c-number-native-interop-helloworld</id>
    <content type="html"><![CDATA[<h4>The simplest Interop case HelloWorld I can create, give it a try and see what happens:</h4>

<p><code>&gt;cat countbyone.cpp</code></p>

<pre><code>extern "C" int SomeMethod(int num) {
  return num++;
}
</code></pre>

<p><strong>Compile your shared library:</strong></p>

<ul>
<li>Linux:
<code>gcc -g -shared -fPIC countbyone.cpp -o libcountbyone.so</code></li>
<li>OS-X:
<code>clang -dynamiclib countbyone.cpp -o libcoutbyone.dylib</code></li>
</ul>


<p><code>&gt;cat interop.cs</code></p>

<pre><code>using System;
using System.Runtime.InteropServices;
namespace InteropDemo
{
    class MainClass
    {
        [DllImport("countbyone")]
        private static extern int SomeMethod(int num);

        public static void Main (string[] args)
        {
            var x = SomeMethod(0);
            Console.WriteLine(x);
        }
    }
}
</code></pre>

<p><strong>Compile your .Net/Mono app:</strong></p>

<p><code>&gt;mcs interop.cs</code></p>

<p><strong>Run it:</strong></p>

<pre><code>&gt;mono interop.exe
1
</code></pre>

<p><strong>Output should be 1 and no errors&hellip;</strong></p>

<h4>If the shared (native) library is not found, you receive:</h4>

<p><code>XXXXX failed to initialize, the exception is: System.DllNotFoundException
</code></p>

<h4>If you have a entry point mismatch you would receive a:</h4>

<p><code>XXXXX failed to initialize, the exception is: System.EntryPointNotFoundException
</code></p>

<p>From my answer on <a href="http://stackoverflow.com/questions/31013147/check-if-p-invoke-was-successful/31015964#31015964">Stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - Code Coverage Using the New Coverage Filter]]></title>
    <link href="http://sushihangover.github.io/mono-code-coverage-using-the-new-coverage-filter/"/>
    <updated>2015-06-15T21:33:29-07:00</updated>
    <id>http://sushihangover.github.io/mono-code-coverage-using-the-new-coverage-filter</id>
    <content type="html"><![CDATA[<h2>New code coverage filter:</h2>

<p>Using the new coverage filter on the mono log profiler, you can get output like this:</p>

<pre><code>Coverage Summary:
    xCorFlags (/Users/administrator/monocov/lib/xCorFlags.exe) 26% covered (42 methods - 11 covered)
        &lt;Module&gt; ?% covered (0 methods - 1 covered)
        CorFlags.CorFlagsSettings 25% covered (4 methods - 1 covered)
        CorFlags.MainClass 50% covered (2 methods - 1 covered)
        CorFlags.CommandLineParser 40% covered (20 methods - 8 covered)
</code></pre>

<p><blockquote><p>Having a suite of existing unit-tests, you can enable the coverage filter and get some quick answers to your question about how much code you are really exercising and testing.</p></blockquote></p>

<h2>Background:</h2>

<p>Well, it appears that Xamarin has removed the &lsquo;internal&rsquo; cov profiler and monocov will not produce any output (besides mono actually loading the shared library, no functions are called) as the api has changed.</p>

<p>They have added a code coverage filter (Apr 7 2015) to the core log profilers and while I could not find any published documentation(?). It is easy enough to enable.</p>

<pre><code>--profile=log:coverage

coverage             enable collection of code coverage data
covfilter=ASSEMBLY   add an assembly to the code coverage filters
                     add a + to include the assembly or a - to exclude it
                     filter=-mscorlib
covfilter-file=FILE  use FILE to generate the list of assemblies to be filtered
</code></pre>

<p>Git log info on cov removal and log coverage filter addition:</p>

<pre><code>commit 16570265149730ec6a4760cc0fa34decc1a9d981
Author: Alex RÃ¸nne Petersen &lt;alexrp@xamarin.com&gt;
Date:   Tue Apr 7 14:51:27 2015 +0200
        [profiler] Remove old mono-cov profiler.
        We're replacing this with coverage support in the log profiler.

commit e91693fbb87f687a2fdb5a495c945c1872b3066c
Author: iain holmes &lt;iain@xamarin.com&gt;
Date:   Fri Feb 27 10:13:54 2015 +0000
        [cov] Install a coverage filter
</code></pre>

<p>If you are still using Mono 3.x, then my other MonoCov post as it would still work:</p>

<ul>
<li><a href="http://sushihangover.github.io/monocov-building-on-os-x/">http://sushihangover.github.io/monocov-building-on-os-x/</a></li>
<li><a href="http://stackoverflow.com/questions/30847262/how-to-build-and-use-monocov-on-a-mac/30853374#30853374">http://stackoverflow.com/questions/30847262/how-to-build-and-use-monocov-on-a-mac/30853374#30853374</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoCov - Building on OS-X]]></title>
    <link href="http://sushihangover.github.io/monocov-building-on-os-x/"/>
    <updated>2015-06-15T10:52:29-07:00</updated>
    <id>http://sushihangover.github.io/monocov-building-on-os-x</id>
    <content type="html"><![CDATA[<p>My <a href="http://stackoverflow.com/questions/20757444/how-to-compile-c-sharp-code-to-64-bit-in-xamarin-studio-on-os-x/30714801#30714801">answer</a> from Stackoverflow on compiling MonoCov on OS-X and Mono 4.0.x</p>

<pre><code># Clone the MonoCov repo
git clone https://github.com/mono/monocov.git MonoCov
cd MonoCov
# A really old version of cecil and it not available as a nuget
curl http://go-mono.com/archive/cecil/cecil-0.6-bin.zip -o cecil-0.6-bin.zip
unzip cecil-0.6-bin.zip
# Make sure configure can find the Mono.Option source file
export PKG_CONFIG_PATH=/Library/Frameworks/Mono.framework/Versions/4.0.1/lib:/Library/Frameworks/Mono.framework/Versions/4.0.1/lib/pkgconfig:$PKG_CONFIG_PATH
export 
# Config to install to users home dir
/configure --cecil=$PWD/monocov/cecil-0.6/Mono.Cecil.dll --prefix $HOME/monocov
# Fix Makefile, gmcs no longer exists under Mono 4.x and Makefile is hard coded
sed -i.bak s/gmcs/mcs/g Makefile
# Pass -m32 to make since OS-X Mono framework is still 32-bit
CC="cc -m32" make
# Install does not properly create bin dir, do it before the first install
mkdir $HOME/monocov/bin
# Install..
make install
</code></pre>

<h2>Compile a test app and test MonoCov:</h2>

<pre><code>// Save this to a file named Program.cs
using System;
namespace Foobar
{
    class MainClass
    {
        public static void Main (string[] args)
        {
            Console.WriteLine ("Hello MonoCov");
        }
    }
}
</code></pre>

<h2>Profile a Mono (.Net) application</h2>

<pre><code># Compile a sample app
mcs Program.cs
# Update path to include MonoCov so mono can load it as a profiler
export PATH=$HOME/monocov:$PATH
mono --debug --profile=monocov Program.exe
</code></pre>

<h2>Launch the MonoCov GUI</h2>

<pre><code># GUI Framework DllNotFoundException fix (if needed)
export DYLD_FALLBACK_LIBRARY_PATH="/Library/Frameworks/Mono.framework/Versions/Current/lib:/usr/local/lib:/usr/lib"
# Update path to include MonoCov
export PATH=$HOME/monocov/bin:$PATH
monocov
</code></pre>

<p><a href="http://www.mono-project.com/docs/debug+profile/profile/code-coverage/">Mono Code Coverage Profiler : MonoCov</a></p>

<p><a href="http://evain.net/blog/articles/2007/10/05/mono-cecil-0-6">Mono.Cecil 0.6 05 Oct 2007</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CorFlags Conversion Tool - Cross-platform Release on Github]]></title>
    <link href="http://sushihangover.github.io/corflags-cross-platform-release-on-github/"/>
    <updated>2015-06-14T11:24:42-07:00</updated>
    <id>http://sushihangover.github.io/corflags-cross-platform-release-on-github</id>
    <content type="html"><![CDATA[<p>I posted the first (alpha) release of a cross-platform version of Microsoft&rsquo;s CorFlags Conversion tool to<a href="https://github.com/sushihangover/CorFlags"> Github</a>.</p>

<p>This alpha release is read-only and while accepting argument flags to change the CIL image, you will receive a not implemented exception:</p>

<pre><code>corflags : Error CF0999: Unknown exception: The requested feature is not implemented.
</code></pre>

<p>The next release will be feature complete as I just needed to get a backup of the current version to Github for now.</p>

<h1><strong>Repo Readme:</strong></h1>

<h1>xCorFlags.exe (CorFlags Conversion Tool)</h1>

<h2>Mono and .NET Framework 4.5</h2>

<h3>The CorFlags Conversion tool allows you to configure the CorFlags section of the header of a portable executable image.</h3>

<p>This is a <strong>cross-platform</strong> version of the <a href="https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">Microsoft CorFlags</a> tool that is included in the .Net Framework SDK installations.</p>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">MSDN Documentation for CorFlag.exe</a></li>
</ul>


<p>This xplat version strives to be argument option and output compatible (using /nologo) with the Microsoft version.</p>

<p>*Note: Platform independent argument prefixes can be used: <strong>&lsquo;/&rsquo; or &lsquo;-&rsquo;</strong> *</p>

<h2>Usage:</h2>

<pre><code>Mono/.NET Framework CorFlags Conversion Tool.  Version  0.9.5643.21314
Copyright (c) SushiHangover.  All rights reserved.

Windows Usage: xCorflags.exe Assembly [options]
 X-Plat Usage: mono xcorflags.exe Assembly [options]

If no options are specified, the flags for the given image are displayed.

     Options: (/ or - prefixed
     /ILONLY+ /ILONLY-       Sets/clears the ILONLY flag
     /32BITREQ+ /32BITREQ-   Sets/clears the bits indicating 32-bit x86 only
     /32BITPREF+ /32BITPREF- Sets/clears the bits indicating 32-bit preferred
     /UpgradeCLRHeader       Upgrade the CLR Header to version 2.5
     /RevertCLRHeader        Revert the CLR Header to version 2.0
     /Force                  Force an assembly update even if the image is
         strong name signed.
         WARNING: Updating a strong name signed assembly
         will require the assembly to be resigned before
         it will execute properly.
     /nologo                 Prevents corflags from displaying logo
</code></pre>

<h2>Output:</h2>

<p>When running with the nologo option, the output should be compatible with Microsoft&rsquo;s version, a nice to have for those who already are used the output to CorFlags.exe or those that have existing scripts.</p>

<pre><code>mono ./CorFlags.exe /nologo CorFlags.exe
Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x3
ILONLY    : 1
32BITREQ  : 1
32BITPREF : 0
Signed    : 0
</code></pre>

<h2>Without using the nologo argument:</h2>

<pre><code>mono ./CorFlags.exe CorFlags.exe SudoKnights.exe
Mono/.NET Framework CorFlags Conversion Tool.  Version  0.9.5643.21314
Copyright (c) SushiHangover.  All rights reserved.

Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x20003
ILONLY    : 1
32BITREQ  : 1
32BITPREF : 1
Signed    : 0
</code></pre>

<h3>versus:</h3>

<pre><code>PS&gt; .\CorFlags.exe .\Test\x64\Release\ExeForTesting.exe
Microsoft (R) .NET Framework CorFlags Conversion Tool.  Version  4.0.30319.17929
Copyright (c) Microsoft Corporation.  All rights reserved.

Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32+
CorFlags  : 0x1
ILONLY    : 1
32BITREQ  : 0
32BITPREF : 0
Signed    : 0
</code></pre>

<p>Built and tested using Mono 4.0.1 on:</p>

<ul>
<li>Windows</li>
<li>OS-X</li>
<li>Linux</li>
</ul>

]]></content>
  </entry>
  
</feed>
