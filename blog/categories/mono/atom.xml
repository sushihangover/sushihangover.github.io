<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mono | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-09T16:20:28-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mono - 64-bit vs. 32-bit Benchmark Using SciMark]]></title>
    <link href="http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark/"/>
    <updated>2015-06-09T19:42:27-07:00</updated>
    <id>http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> I wanted to compare 64-bit and 32-bit mono versions and PE32 vs PE32+ CIL images and see if 64-bit really is faster, at least on the number crunching side of things.</p>

<p><blockquote><p>This is the C# port of the Scimark benchmark. The original C and Java sources can be found at <a href="http://math.nist.gov/scimark2/.">http://math.nist.gov/scimark2/.</a> The original work to port the benchmark to C# was done by Chris Re and Wener Vogels of the Rotor project.</p><footer><strong><a href="https://code.google.com/p/scimark-csharp">https://code.google.com/p/scimark-csharp</a></strong></footer></blockquote></p>

<p>Running an Apples to Apples comparision across platforms and different mono builds using different llvm versions jitting is not really a valid test-case. So the following benchmark matrix is based on the <strong>same</strong> clang/llvm version compiling the <strong>same</strong> mono version in x64 (PE32+) and i386 (PE32) archs on just one platform (my &lsquo;old&rsquo; &lsquo;MacBookPro).</p>

<h2>Compile four different CIL (exe) images:</h2>

<ul>
<li>x64 and x86 Mono Debug  (<em>Debug Full, no optimize</em>)</li>
<li>x64 and x86 Mono Release (<em>No Debug, Optimized</em>)</li>
</ul>


<h2>Execute 32-bit Mono and 62-bit Mono versions loading the respective CIL (exe) images:</h2>

<ul>
<li><strong>LLVM turned off</strong></li>
<li><strong>LLVM turned on</strong> (&ndash;llvm)</li>
</ul>


<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Get the SciMark repo on my <a href="https://github.com/sushihangover/scimark-csharp">GitHub</a> and run it on your platform.</p>

<div>
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;border-color:#999;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#999;color:#444;background-color:#F7FDFA;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-color:#999;color:#fff;background-color:#26ADE4;}
.tg .tg-s6z2{text-align:center}
.tg .tg-5hgy{background-color:#D2E4FC;text-align:center}
.tg .tg-2xdq{background-color:#D2E4FC;font-weight:bold;color:#009901;text-align:center}
.tg .tg-y9vz{color:#036400}
</style>
</div>




<div class="tg-wrap"><table id="tg-sAgiW" class="tg">
  <tr>
    <th class="tg-s6z2">CPU Arch</th>
    <th class="tg-s6z2">Build Type</th>
    <th class="tg-s6z2">LLVM</th>
    <th class="tg-s6z2">Score (MFlops)</th>
    <th class="tg-031e">Notes:</th>
  </tr>
  <tr>
    <td class="tg-s6z2">x86</td>
    <td class="tg-5hgy">Debug</td>
    <td class="tg-s6z2"></td>
    <td class="tg-5hgy">371.42</td>
    <td class="tg-031e"><br></td>
  </tr>
  <tr>
    <td class="tg-s6z2">x86</td>
    <td class="tg-5hgy">Debug</td>
    <td class="tg-s6z2">Yes</td>
    <td class="tg-5hgy">465.45</td>
    <td class="tg-031e">1.2 times faster using LLVM</td>
  </tr>
  <tr>
    <td class="tg-s6z2">x86</td>
    <td class="tg-5hgy">Release</td>
    <td class="tg-s6z2"></td>
    <td class="tg-5hgy">295.11</td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-s6z2">x86</td>
    <td class="tg-5hgy">Release</td>
    <td class="tg-s6z2">Yes</td>
    <td class="tg-5hgy">448.92</td>
    <td class="tg-031e">1.5 times faster using LLVM over not <br>using it in Release mode</td>
  </tr>
  <tr>
    <td class="tg-s6z2">x64</td>
    <td class="tg-5hgy">Debug</td>
    <td class="tg-s6z2"></td>
    <td class="tg-5hgy">367.22</td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-s6z2">x64</td>
    <td class="tg-5hgy">Debug</td>
    <td class="tg-s6z2">Yes</td>
    <td class="tg-5hgy">559.28</td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-s6z2">x64</td>
    <td class="tg-5hgy">Release</td>
    <td class="tg-s6z2"></td>
    <td class="tg-5hgy">370.79</td>
    <td class="tg-031e"></td>
  </tr>
  <tr>
    <td class="tg-s6z2">x64</td>
    <td class="tg-5hgy">Release</td>
    <td class="tg-s6z2">Yes</td>
    <td class="tg-2xdq">569.46</td>
    <td class="tg-y9vz">1.2 times faster than x86 using LLVM<br>1.5 times faster than x64 without LLVM</td>
  </tr>
</table></div>


<script type="text/javascript" charset="utf-8">var TgTableSort=window.TgTableSort||function(n,t){"use strict";function r(n,t){for(var e=[],o=n.childNodes,i=0;i<o.length;++i){var u=o[i];if("."==t.substring(0,1)){var a=t.substring(1);f(u,a)&&e.push(u)}else u.nodeName.toLowerCase()==t&&e.push(u);var c=r(u,t);e=e.concat(c)}return e}function e(n,t){var e=[],o=r(n,"tr");return o.forEach(function(n){var o=r(n,"td");t>=0&&t<o.length&&e.push(o[t])}),e}function o(n){return n.textContent||n.innerText||""}function i(n){return n.innerHTML||""}function u(n,t){var r=e(n,t);return r.map(o)}function a(n,t){var r=e(n,t);return r.map(i)}function c(n){var t=n.className||"";return t.match(/\S+/g)||[]}function f(n,t){return-1!=c(n).indexOf(t)}function s(n,t){f(n,t)||(n.className+=" "+t)}function d(n,t){if(f(n,t)){var r=c(n),e=r.indexOf(t);r.splice(e,1),n.className=r.join(" ")}}function v(n){d(n,L),d(n,E)}function l(n,t,e){r(n,"."+E).map(v),r(n,"."+L).map(v),e==T?s(t,E):s(t,L)}function g(n){return function(t,r){var e=n*t.str.localeCompare(r.str);return 0==e&&(e=t.index-r.index),e}}function h(n){return function(t,r){var e=+t.str,o=+r.str;return e==o?t.index-r.index:n*(e-o)}}function m(n,t,r){var e=u(n,t),o=e.map(function(n,t){return{str:n,index:t}}),i=e&&-1==e.map(isNaN).indexOf(!0),a=i?h(r):g(r);return o.sort(a),o.map(function(n){return n.index})}function p(n,t,r,o){for(var i=f(o,E)?N:T,u=m(n,r,i),c=0;t>c;++c){var s=e(n,c),d=a(n,c);s.forEach(function(n,t){n.innerHTML=d[u[t]]})}l(n,o,i)}function x(n,t){var r=t.length;t.forEach(function(t,e){t.addEventListener("click",function(){p(n,r,e,t)}),s(t,"tg-sort-header")})}var T=1,N=-1,E="tg-sort-asc",L="tg-sort-desc";return function(t){var e=n.getElementById(t),o=r(e,"tr"),i=o.length>0?r(o[0],"td"):[];0==i.length&&(i=r(o[0],"th"));for(var u=1;u<o.length;++u){var a=r(o[u],"td");if(a.length!=i.length)return}x(e,i)}}(document);document.addEventListener("DOMContentLoaded",function(n){TgTableSort("tg-sAgiW")});</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - Libtool: Version Mismatch Error. This Is Libtool 2.4.6]]></title>
    <link href="http://sushihangover.github.io/mono-libtool-version-mismatch-error-this-is-libtool-2-dot-4-6/"/>
    <updated>2015-06-09T17:20:35-07:00</updated>
    <id>http://sushihangover.github.io/mono-libtool-version-mismatch-error-this-is-libtool-2-dot-4-6</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>" title="" > If you are receiving the following error when compiling mono 4.x &ldquo;Version mismatch error.  This is libtool 2.4.6, but the definition of this LT_INIT comes from libtool 2.4.2.&rdquo;, then the aclocal.m4 file needs to be rebuilt. It appears something in the mono autogen/configure and/or make clean is not deleting and rebuilding it (or is picking an older libtool vs. actually using glibtool).</p>

<p>I have find that the &ldquo;libgc/aclocal.m4&rdquo; has been my main problem:</p>

<pre><code> ....   
    make[4]: Nothing to be done for `all-am'.
    Making all in doc
    make[3]: Nothing to be done for `all'.
      CC       pthread_support.lo
    libtool: Version mismatch error.  This is libtool 2.4.6, but the
    libtool: definition of this LT_INIT comes from libtool 2.4.2.
    libtool: You should recreate aclocal.m4 with macros from libtool 2.4.6
    libtool: and run autoconf again.
    make[3]: *** [pthread_support.lo] Error 63
    make[2]: *** [all-recursive] Error 1
    make[1]: *** [all-recursive] Error 1
    make: *** [all] Error 2
</code></pre>

<p>Remove that file:</p>

<pre><code>rm libgc/aclocal.m4 
</code></pre>

<p>And re-run the make and it will be recreated correctly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - Speeding Up Your Llvm Compile]]></title>
    <link href="http://sushihangover.github.io/mono-speeding-up-your-llvm-compile/"/>
    <updated>2015-06-09T07:42:41-07:00</updated>
    <id>http://sushihangover.github.io/mono-speeding-up-your-llvm-compile</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> If you are building llvm so you can then configure and build mono to use it, then you can speed up the compile by removing the tests as they take as long, if not longer, then the llvm runtime binaries.</p>

<p>I could not find a llvm configure option to skip the <strong>test</strong> directory, but you you just delete it (or move it out of the llvm directory) before you configure/compile llvm, then you will receive a warning that it was not find, but the compile will proceed normally.</p>

<p>Note: You could also mod the llvm configuration (configure/Makefile) to skip the tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - Using Llvm? Make Sure Your Targets Match]]></title>
    <link href="http://sushihangover.github.io/mono-using-llvm/"/>
    <updated>2015-06-09T07:21:58-07:00</updated>
    <id>http://sushihangover.github.io/mono-using-llvm</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> When configuring Mono to use llvm, if you receive the error:</p>

<p><strong>configure: error: Cross compiling is not supported for target i386-apple-darwin11.2.0</strong></p>

<p>Then the llvm-config that is currently the first hit in your path and that is begin picked up by the mono autogen/configure script is does not match the target that you are trying to build in mono.</p>

<p><strong>llvm-config &ndash;host-target</strong> should help you out and change your path so the correct llvm bin directory is first in the list so when mono&rsquo;s configure runs llvm-config it gets the correct info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripping the Build Prefix From Cross-compiled Binaries]]></title>
    <link href="http://sushihangover.github.io/stripping-the-build-prefix-from-cross-compiled-b-binaries/"/>
    <updated>2015-06-09T06:14:24-07:00</updated>
    <id>http://sushihangover.github.io/stripping-the-build-prefix-from-cross-compiled-b-binaries</id>
    <content type="html"><![CDATA[<h2>Remove a filename prefix from a directory of files</h2>

<p>When cross-compiling and using the standard autogen/configure &ldquo;-build=&rdquo; option, you end up with binaries that have the arch prefix on your binaries. While this makes sense in order to distinguish that the binaries are different, there are times you do not want to deal with the issue of using these prefixes all the time.</p>

<p>Here is a simple script to strip those prefixes:</p>

<pre><code>#!/bin/bash
if [ -z "$1" ]
then
  prefix="i386-apple-darwin14.3.0-"
else
  prefix=$1
fi
for filename in `ls $prefix*`
do
   newfilename=${filename:${#prefix}}
   echo $filename $newfilename
   mv $filename $newfilename
done
</code></pre>

<p>I seem to be stripping &ldquo;i386-apple-darwin14.3.0-&rdquo; lately so that is the default if no prefix is passed as an argument&hellip;</p>
]]></content>
  </entry>
  
</feed>
