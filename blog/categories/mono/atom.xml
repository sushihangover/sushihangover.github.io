<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mono | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/mono/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-06T07:31:47-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NRefactory | PlayScript & ActionScript]]></title>
    <link href="http://sushihangover.github.io/nrefactory-playscript-and-actionscript/"/>
    <updated>2015-11-05T16:51:17-08:00</updated>
    <id>http://sushihangover.github.io/nrefactory-playscript-and-actionscript</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"></p>

<p>I posted up the initial fork of <a href="https://github.com/PlayScriptRedux/NRefactory">NRefactory</a> that replaces the parser with the <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> mcs compiler to allow PlayScript &amp; ActionScript parsing. This will be used within the <a href="https://github.com/PlayScriptRedux/PlayScript.Addin">Xamarin Studio / MonoDevelop PlayScript Language Addin</a>.</p>

<p>Fork and clone it and give the <code>ICSharpCode.NRefactory.GtkDemo</code> project a try.
<img src="/images/ICSharpCode.NRefactory.GtkDemo.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript | Xamarin / Monodevelop Language Addin (Part 1)]]></title>
    <link href="http://sushihangover.github.io/playscript-cmonodevelop-language-addin-part-1/"/>
    <updated>2015-11-01T01:22:10-08:00</updated>
    <id>http://sushihangover.github.io/playscript-cmonodevelop-language-addin-part-1</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"></p>

<h2>Goal:</h2>

<p>In this first part we are going to create an Addin that does the most basic language syntax highlighing using a SyntaxMode xml file.</p>

<h2>Prerequisites</h2>

<p>You have the <a href="https://github.com/mono/mono-addins">MonoDevelop.AddinMaker</a> installed and enabled within Xamarin Studio/MonoDevelop (XS/MD).</p>

<h2>Create the Solution/Project</h2>

<p>With XS/MD, create a new solution/project. In this example we are using version 1.21 of the Addin Maker.</p>

<p><img src="images/XamarinStudioAddin.png" alt="" /></p>

<h2>Add the Syntax files</h2>

<p>Language syntax files are XML documents that describe how the visual representation of language will appear within the editor.</p>

<p>i.e.</p>

<pre><code>&lt;Keywords color = "Keyword(Jump)"&gt;
    &lt;Word&gt;break&lt;/Word&gt;
    &lt;Word&gt;continue&lt;/Word&gt;
    &lt;Word&gt;return&lt;/Word&gt;
&lt;/Keywords&gt;
</code></pre>

<p>Note: A definition of the contents of these XML files is out of scope for this posting. The best reference is the files themself. There are quite a number of them in the MonoDevelop <code>./main/src/core/Mono.Texteditor/SyntaxModes</code> directory, you should start the C# <a href="https://github.com/mono/monodevelop/blob/bc908c9e791b0ee6f4951fb65495f82735bc95b7/main/src/core/Mono.Texteditor/SyntaxModes/CSharpSyntaxMode.xml">one</a>.</p>

<p>In our case we are adding two syntax mode files, one for ActionScript and one for PlayScript.</p>

<p>Each file contains also has an mime-type attribute that will be used within our addin to provide a reference of the sourcefile extension to its mime type.</p>

<p>i.e.</p>

<pre><code>&lt;SyntaxMode name = "ActionScript" mimeTypes="text/x-actionscript"&gt;

&lt;SyntaxMode name = "PlayScript" mimeTypes="text/x-playscript"&gt;
</code></pre>

<p><strong>Note</strong>: Make sure you flag these files as <code>EmbeddedResources</code> so that they are included in the addin assembly.</p>

<h2>Mime-type to file ext. linkage</h2>

<pre><code>&lt;Extension path = "/MonoDevelop/Core/MimeTypes"&gt;
    &lt;MimeType id="text/x-actionscript" _description="ActionScript source code" icon="md-actionscript-file" isText="true"&gt;
        &lt;File pattern="*.as" /&gt;
    &lt;/MimeType&gt;     
    &lt;MimeType id="text/x-playscript" _description="PlayScript source code" icon="md-playscript-file" isText="true"&gt;
        &lt;File pattern="*.play" /&gt;
    &lt;/MimeType&gt;     
&lt;/Extension&gt;
</code></pre>

<h2>Add the File Filter Extension</h2>

<p>This will allow the IDE to provide filter options to the various file dialogs.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/FileFilters"&gt;
    &lt;FileFilter id = "ActionScript"
                insertbefore = "Assemblies"
                _label = "ActionScript Files"
                extensions = "*.as"/&gt;
    &lt;FileFilter id = "PlayScript"
                insertbefore = "Assemblies"
                _label = "PlayScript Files"
                extensions = "*.play"/&gt;                                     
&lt;/Extension&gt;
</code></pre>

<p>If you debug the project you will now find the ActionScript and PlayScript file filters are available:</p>

<p><img src="images/MD-Addin-FileFilter.png" alt="" /></p>

<h2>Add the Syntaxmode Extension</h2>

<p>Add the extension templates to the <code>Manifest.addin.xml</code> file.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/SourceEditor2/SyntaxModes"&gt;
    &lt;Templates resource="ActionScriptSyntaxMode.xml" /&gt;
    &lt;Templates resource="PlayScriptSyntaxMode.xml" /&gt;
&lt;/Extension&gt;
</code></pre>

<h2>Add the mime-type resolver extension</h2>

<p>Add the resolver extension class to the  <code>Manifest.addin.xml</code> file.</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/TextEditorResolver"&gt;
    &lt;Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-actionscript" /&gt;
    &lt;Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-playscript" /&gt;
&lt;/Extension&gt;
</code></pre>

<h2>ProjectParameters Class</h2>

<p>Add a new class called <code>PlayScriptProjectParameters</code>, this class will inherit from <code>MonoDevelop.Projects.ProjectParameters</code> and for now will be completely empty. We will be adding code to it in a future posting, but right now we just need to be able to create the class object.</p>

<h2>ActionScriptLanguageBinding Class</h2>

<p>This class inherits from IDotNetLanguageBinding and other then stubbing out some methods and assigning the file extension that this class is related to (<code>.as</code>), the other thing that we need to do it call the static method <code>SyntaxModeService.LoadStylesAndModes</code> in the constructor in other for the Editor to load and parse the embedded xml file that contains our language&rsquo;s syntax:</p>

<pre><code>    public ActionScriptLanguageBinding() {
        SyntaxModeService.LoadStylesAndModes (Assembly.GetExecutingAssembly ());
    }

    public string Language {
        get {
            return "ActionScript";
        }
    }

    public string ProjectStockIcon {
        get { 
            return "md-project";
        }
    }

    public FilePath GetFileName (FilePath baseName)
    {
        return baseName + ".as";
    }

    public bool IsSourceCodeFile (FilePath fileName)
    {
        return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".as");
    }
</code></pre>

<h2>PlayScriptScriptLanguageBinding Class</h2>

<p>This is a repeat of the ActionScriptLanguageBinding class, but updated for the PlayScript <code>.play</code> extension.</p>

<pre><code>    public string Language {
        get {
            return "PlayScript";
        }
    }

    public string ProjectStockIcon {
        get { 
            return "md-project";
        }
    }

    public FilePath GetFileName (FilePath baseName)
    {
        return baseName + ".play";
    }

    public bool IsSourceCodeFile (FilePath fileName)
    {
        return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".play");
    }
</code></pre>

<p>Running this and you will have very basic language highlighting in any <code>.as</code> and <code>.play</code> that you add to Xamarin Studio or MonoDevelop.</p>

<p><img src="images/ActionScript-highlighting.png" alt="" /></p>

<h3>Addition Required Reading:</h3>

<h4>Michael Hutchinson&rsquo;s MonoDevelop.AddinMaker References:</h4>

<p><a href="http://www.monodevelop.com/developers/articles/creating-a-simple-add-in/">Creating a Simple Add-in</a></p>

<p><a href="https://mhut.ch/addinmaker/1.2">MonoDevelop.AddinMaker 1.2</a></p>

<p><a href="https://mhut.ch/addinmaker/1.2.1">MonoDevelop.AddinMaker 1.2.1</a></p>

<p><a href="https://mhut.ch/journal/2015/03/12/monodevelopaddinmaker_12">MonoDevelop.AddinMaker 1.2</a></p>

<p>Source : <a href="https://github.com/mhutch/MonoDevelop.AddinMaker">mhutch/MonoDevelop.AddinMaker</a></p>

<h4>Mono.Addin References:</h4>

<p>Documentation : <a href="http://monoaddins.codeplex.com/">Mono.Addins</a></p>

<p>Source : <a href="https://github.com/mono/mono-addins">mono/mono-addins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono | Ubuntu Broken Packages]]></title>
    <link href="http://sushihangover.github.io/mono-ubuntu-broken/"/>
    <updated>2015-10-30T21:55:07-07:00</updated>
    <id>http://sushihangover.github.io/mono-ubuntu-broken</id>
    <content type="html"><![CDATA[<p><a href="http://www.mono-project.com"><img class="left" src="http://sushihangover.github.io/images/mono-logo.png"></a></p>

<p>I do not normally use a Linux Desktop, more of a CLI kind-of guy, but in trying to support some C# projects that are using MonoDevelop, I needed to get the beta/alpha Mono builds installed&hellip; It turns out to be a <a href="http://www.urbandictionary.com/define.php?term=pita&amp;page=1">P.I.T.A.</a> to do it from packages and not source.</p>

<p>Broken packages always seem to be a problem when dealing with pre-built Linux software and I usually build from source so I do not see them, but installing the <code>mono-devel</code> package fails due to <code>libjpeg62-turbo</code> and <code>libjpeg62</code> not being avialable in the normal Ubuntu repos. They have been replaced by bundle <code>8</code> of libraries but <code>libgdiplus</code> that Mono references is pinned to <code>libjpeg6*</code> packages&hellip;</p>

<h3>So the errors:</h3>

<pre><code>sudo apt-get install mono-devel
</code></pre>

<pre><code>The following packages have unmet dependencies:
 mono-devel : Depends: libgdiplus (&gt;= 2.6.7) but it is not going to be installed
              Depends: libmono-system-design4.0-cil (&gt;= 1.0) but it is not going to be installed
              Depends: libmono-system-drawing4.0-cil (&gt;= 3.0.6) but it is not going to be installed
              Depends: libmono-system-messaging4.0-cil (&gt;= 2.10.1) but it is not going to be installed
              Depends: libmono-system-runtime4.0-cil (&gt;= 2.10.1) but it is not going to be installed
              Depends: libmono-system-servicemodel-activation4.0-cil (&gt;= 1.0) but it is not going to be installed
              Depends: libmono-system-servicemodel-web4.0-cil (&gt;= 3.2.1) but it is not going to be installed
              Depends: libmono-system-servicemodel4.0a-cil (&gt;= 3.2.3) but it is not going to be installed
              Depends: libmono-system-web-extensions4.0-cil (&gt;= 2.10.3) but it is not going to be installed
              Depends: libmono-system-web-services4.0-cil (&gt;= 1.0) but it is not going to be installed
              Depends: libmono-system-web4.0-cil (&gt;= 2.10.3) but it is not going to be installed
              Depends: libmono-system-windows-forms4.0-cil (&gt;= 1.0) but it is not going to be installed
              Depends: libmono-cil-dev (= 4.2.1.91-0xamarin1) but it is not going to be installed
E: Unable to correct problems, you have held broken packages.
</code></pre>

<pre><code>sudo apt-get install libgdiplus
</code></pre>

<pre><code>Reading package lists... Done
Building dependency tree       
Reading state information... Done
Some packages could not be installed. This may mean that you have requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:
The following packages have unmet dependencies:
libgdiplus : Depends: libjpeg62-turbo (&gt;= 1.3.1) but it is not installable
E: Unable to correct problems, you have held broken packages.
</code></pre>

<pre><code>sudo apt-get install libjpeg62-turbo
</code></pre>

<pre><code>Reading package lists... Done
Building dependency tree       
Reading state information... Done
Package libjpeg62-turbo is not available, but is referred to by another package.
This may mean that the package is missing, has been obsoleted, or is only available from another source E: 
Package 'libjpeg62-turbo' has no installation candidate
</code></pre>

<h3>The Fix:</h3>

<h4>Get the older <code>libjpeg62-turbo</code> package:</h4>

<p><a href="http://pkgs.org/debian-sid/debian-main-amd64/libjpeg62-turbo_1.4.1-2_amd64.deb.html">libjpeg62-turbo - libjpeg-turbo JPEG runtime library</a></p>

<pre><code> wget http://ftp.br.debian.org/debian/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.4.1-2_amd64.deb
</code></pre>

<h4>Get the older <code>libjpeg62</code> package:</h4>

<p><a href="http://pkgs.org/debian-sid/debian-main-amd64/libjpeg62_6b2-2_amd64.deb.html">libjpeg62 - Independent JPEG Group&rsquo;s JPEG runtime library (version 6.2)</a></p>

<pre><code> wget http://ftp.br.debian.org/debian/pool/main/libj/libjpeg6b/libjpeg62_6b2-2_amd64.deb
</code></pre>

<h4><a href="http://www.cyberciti.biz/faq/ubuntu-linux-how-do-i-install-deb-packages/">Install</a> the deb packages:</h4>

<pre><code>sudo dpkg --install --recursive --auto-deconfigure libjpeg62-turbo_1.4.1-2_amd64.deb 
</code></pre>

<h4>Update and fix the &lsquo;now broken&rsquo; dependencies:</h4>

<pre><code>apt-get update
sudo apt-get -f install
</code></pre>

<h4>Finally, install <code>mono</code> (and <code>monodevelop</code>) from package:</h4>

<pre><code>sudo apt-get install mono-devel
sudo apt-get isntall monodevelop
</code></pre>

<h4>Ahhh, <code>mono 4.2.1</code> is now installed:</h4>

<pre><code>mono --version
Mono JIT compiler version 4.2.1 (Stable 4.2.1.91/8862921 Fri Oct 30 17:04:13 UTC 2015)
Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com
    TLS:           __thread
    SIGSEGV:       altstack
    Notifications: epoll
    Architecture:  amd64
    Disabled:      none
    Misc:          softdebug 
    LLVM:          supported, not enabled.
    GC:            sgen
</code></pre>

<p>Almost would be easier to install from source ;-)</p>

<p>Have fun.</p>

<p><a href="http://www.monodevelop.com"><img src="http://sushihangover.github.io/images/monodevelop.png"></a></p>

<p><a href="https://github.com/PlayScriptRedux/playscript"><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript | Optimizing psc/mcs]]></title>
    <link href="http://sushihangover.github.io/playscript-exception-filters/"/>
    <updated>2015-10-27T22:20:18-07:00</updated>
    <id>http://sushihangover.github.io/playscript-exception-filters</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/PlayscriptLogo_small.png">http://sushihangover.github.io/images/PlayscriptLogo_small.png</a>"></p>

<p><a href="http://ericlippert.com">Eric Lippert</a> has a couple of recent posts that I have been reviewing in conjuction with the PlayScript version of Mono&rsquo;s mcs (psc) as some of the things devs do in ActionScript 3.0 are targeted to making Flash&rsquo;s AVM run efficiently does not always make the cut for a C#/CLR oriented compiler. Many of these items revolve around arrays and vector and misuse of the generic (dynamic) Object types, but strings, associative operations, and nulls need some love also and his posts are very insightful as how C# is optimized in certain areas.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p><a href="http://ericlippert.com/2015/10/27/optimizing-associative-operations/">Optimizing associative operations</a></p>

<p><a href="http://ericlippert.com/2013/06/17/string-concatenation-behind-the-scenes-part-one/">String concatenation behind the scenes, part one</a></p>

<p><a href="http://ericlippert.com/2013/06/24/string-concatenation-behind-the-scenes-part-two/">String concatenation behind the scenes, part two</a></p>

<p>He also has a great series on Nullable micro-optimizations that start here:</p>

<p><a href="http://ericlippert.com/2012/12/20/nullable-micro-optimizations-part-one/">Nullable micro-optimizations, part one</a></p>

<p>PlayScript Github repo is <a href="https://github.com/PlayScriptRedux/playscript">here</a> check it out now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono's new TLS Provider]]></title>
    <link href="http://sushihangover.github.io/monos-new-tls-provider/"/>
    <updated>2015-10-26T23:10:57-07:00</updated>
    <id>http://sushihangover.github.io/monos-new-tls-provider</id>
    <content type="html"><![CDATA[<p>Great news, the new pluggable TLS provider is available for security review.</p>

<p><a href="http://mono.1490590.n4.nabble.com/Mono-s-new-TLS-provider-tt4666825.html">Mono’s new TLS provider</a></p>

<blockquote><p> Hello,</p>

<p>As described by Miguel in the “State of Tls in Mono” [1] we have been working on a new TLS implementation for Mono, one that would upgrade our TLS stack, and one that would allow us to reuse some of the higher level pieces from Microsoft’s networking stack, read that post for more details on the scope of the project.</p>

<p>Mono’s master branch now has the ability to load alternative TLS implementations.   We added this code so we can start testing our new TLS implementation side-by-side the code that is in use today, and also so that we can provide both platform-specific backends or allow developers to choose a different TLS implementation (like BoringSSL, OpenSSL or Amazon’s s2n).</p>

<p>This is achieved by making our SSL transport pluggable, this allows HttpWebRequest and other classes to use the new TLS stack.</p>

<p>Today, a regular Mono checkout will default to the existing Mono SSL/TLS implementation which supports a number of ciphers and TLS levels up to 1.0, so nothing has changed and we have one alternative implementation available: mono-tls.</p>

<p>mono-tls is a purely managed implementation of TLS 1.0, 1.1 and 1.2 (filling the gap that we had).   To use it, you need to build the mono-tls [2] module, once this is build, you will have to reference the following libraries: Mono.Security.NewTls, Mono.Security.NewTls.Interface, Mono.Security.Providers.NewTls.</p>

<p>Once you have these, you should add this code to your main program:</p>

<pre><code>  MonoTlsProviderFactory.InstallProvider (new NewTlsProvider ());
</code></pre>

<p>Then uses of HttpWebRequest, FtpWebRequest and the Smtp client will all use the new TLS stack.</p>

<p>More details are available in the architecture document [3].</p>

<p>TLS State
While we have added an extensive test suite to this new TLS implementation and tested this against a wide variety of TLS servers and configurations, we have not completed a security audit of its implementation.   While we have taken every step to ensure that we follow all the best practices when implementing a security stack, we want to get this code reviewed by third parties, and we want to complete a comprehensive security audit of the code before we would even consider transitioning this as the default.</p>

<p>Future Work - Pluggability/SslStream
We are going to be making the SslStream the proxy endpoint, for two reasons: (a) it would make SslStream usable with the new provider interface and (b) it would simplify some of the special code that lives in different places in the class libraries to use the new TLS implementation.</p>

<p>We will also likely introduce a MONO_TLS_PROVIDER environment variable that controls the implementation, so that we make it easier to test the implementations during the testing phase.</p>

<p>Future Work - Other Providers
We are currently developing a provider for Apple platforms that will use Apple’s unmanaged SSL implementation, and we will be adding an implementation that use Google’s BoringSSL.   The idea being that on Apple, you get to use the system provided implementation, and on other platforms, we use the Google maintained one.</p>

<p>Please let me know if you have any questions, comments, feedback.   In particular, we would like to get you to find security holes in the implementation.  We can offer a Xamarin shirt or a Xamarin monkey as a prize for finding holes in the new implementation.</p>

<p>References
[1] <a href="http://tirania.org/blog/archive/2015/Aug-27.html">http://tirania.org/blog/archive/2015/Aug-27.html</a>
[2] <a href="http://github.com/mono/mono-tls">http://github.com/mono/mono-tls</a>
[3] <a href="https://github.com/mono/mono-tls/blob/master/ARCHITECTURE.md">https://github.com/mono/mono-tls/blob/master/ARCHITECTURE.md</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
