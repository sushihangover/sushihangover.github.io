<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Llvm | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/llvm/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-05T17:00:41-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mono   Another Benchmark Between 32 Bit And 64 Bit Mono / Llvm]]></title>
    <link href="http://sushihangover.github.io/mono-another-benchmark-between-32-bit-and-64-bit-mono-and-llvm/"/>
    <updated>2015-06-09T20:24:45-07:00</updated>
    <id>http://sushihangover.github.io/mono-another-benchmark-between-32-bit-and-64-bit-mono-and-llvm</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> While I was still in the []benchmark mood](<a href="http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark/">http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark/</a>), I thought I would run a perf test that someone wrote years ago. Not sure where it came from originally, but it includes 5 simple tests with only one being numeric related.</p>

<p>Per the <a href="http://www.mono-project.com/docs/advanced/mono-llvm/">Mono LLVM web page</a>, LLVM is not able to support some of the features that Mono needs, so in those cases the JIT compiler will still fall back to Monoâ€™s JIT engine (i.e. Methods that contain try/catch clauses or methods that do interface calls).</p>

<p>One of the included tests is throwing and catching 100,000 exceptions and the 32/64-bit results show that enabling LLVM does not help.</p>

<pre><code>    Note: The Mono web pages are notorious for begin out of date or lacking of details, even the 'new' ones, so I usually like confirmation. 
</code></pre>

<p>As the <a href="http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark/">SciMark test</a> showed, numeric operations under LLVM native code jit totally rocks over the built-in one, over 2x faster in this simple test.</p>

<p>String related functions can be 2x faster in the 64-bit mono, but enabling LLVM for either 32 or 64-bit does not really help that much, LLVM is still better but by micro-seconds (uS).</p>

<p>Enabling LLVM in Mono:</p>

<ul>
<li>Methods with Exceptions: No Help at all</li>
<li>Numerics: Still rule</li>
<li>String functions: No much help using LLVM, but 64-bit Mono kicks its 32-bit brother in the butt.</li>
<li>Refection: Not much help either, as expected, but again 64-bit rules.</li>
</ul>


<p>Net Results:</p>

<p>I am still not seeing a reason not to use a 64-bit version of Mono and not enabling LLVM as I am not using any 32-bit frameworks on OS-X (i.e.: OS-X Carbon API wrappers or GTK# 2.x).</p>

<p>Try it yourself: <a href="https://gist.github.com/sushihangover/3d4d9d53770c501bf054">Gist</a></p>

<pre><code>mcs -optimize+ -debug- -sdk:4.5 -target:exe -platform:x64 perftest.cs -out:perftest-64-release.exe
</code></pre>

<p>Next up: <a href="http://sushihangover.github.io/mono-32-bit-vs-64-bit-ahead-of-time-compilation-aot/">How much does AOT'ing your CIL exe/dll images help&hellip;or not.</a>)</p>

<h2>Additional Reading:</h2>

<ul>
<li><a href="http://www.mono-project.com/docs/advanced/mono-llvm/">Mono LLVM</a></li>
<li><a href="http://www.mono-project.com/docs/advanced/runtime/docs/llvm-backend/">LLVM Backend</a></li>
<li><a href="http://sushihangover.github.io/mono-64-bit-vs-32-bit-benchmark-using-scimark/">Mono - 64-bit vs. 32-bit Benchmark Using SciMark</a></li>
</ul>


<h2>Sample output:</h2>

<pre><code>$which mono
/Users/administrator/mono/mono-llvm-64/bin/mono

$mcs -optimize+ -debug- -sdk:4.5 -target:exe -platform:x64 perftest.cs -out:perftest-64-release.exe

$mono perftest-64-release.exe 
ArrayList strings test.............408 ms
StringBuilder test.................499 ms
Integer &amp; Floating ADD.............3616 ms
Exception test.....................375 ms
Reflection and recursion...........2730 ms

$ mono --llvm perftest-64-release.exe 
ArrayList strings test.............497 ms
StringBuilder test.................505 ms
Integer &amp; Floating ADD.............1620 ms
Exception test.....................407 ms
Reflection and recursion...........2790 ms

$which mono
/Users/administrator/mono/mono-llvm-32/bin/mono

$mcs -optimize+ -debug- -sdk:4.5 -target:exe -platform:x86 perftest.cs -out:perftest-32-release.exe

$mono perftest-32-release.exe 
ArrayList strings test.............777 ms
StringBuilder test.................958 ms
Integer &amp; Floating ADD.............3610 ms
Exception test.....................589 ms
Reflection and recursion...........4557 ms

mono --llvm perftest-32-release.exe 
ArrayList strings test.............830 ms
StringBuilder test.................873 ms
Integer &amp; Floating ADD.............1731 ms
Exception test.....................617 ms
Reflection and recursion...........4441 ms
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono   Speeding Up Your Llvm Compile]]></title>
    <link href="http://sushihangover.github.io/mono-speeding-up-your-llvm-compile/"/>
    <updated>2015-06-09T07:42:41-07:00</updated>
    <id>http://sushihangover.github.io/mono-speeding-up-your-llvm-compile</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> If you are building llvm so you can then configure and build mono to use it, then you can speed up the compile by removing the tests as they take as long, if not longer, then the llvm runtime binaries.</p>

<p>I could not find a llvm configure option to skip the <strong>test</strong> directory, but you you just delete it (or move it out of the llvm directory) before you configure/compile llvm, then you will receive a warning that it was not find, but the compile will proceed normally.</p>

<p>Note: You could also mod the llvm configuration (configure/Makefile) to skip the tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono   Using Llvm? Make Sure Your Targets Match]]></title>
    <link href="http://sushihangover.github.io/mono-using-llvm/"/>
    <updated>2015-06-09T07:21:58-07:00</updated>
    <id>http://sushihangover.github.io/mono-using-llvm</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>"> When configuring Mono to use llvm, if you receive the error:</p>

<p><strong>configure: error: Cross compiling is not supported for target i386-apple-darwin11.2.0</strong></p>

<p>Then the llvm-config that is currently the first hit in your path and that is begin picked up by the mono autogen/configure script is does not match the target that you are trying to build in mono.</p>

<p><strong>llvm-config &ndash;host-target</strong> should help you out and change your path so the correct llvm bin directory is first in the list so when mono&rsquo;s configure runs llvm-config it gets the correct info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stripping The Build Prefix From Cross Compiled Binaries]]></title>
    <link href="http://sushihangover.github.io/stripping-the-build-prefix-from-cross-compiled-b-binaries/"/>
    <updated>2015-06-09T06:14:24-07:00</updated>
    <id>http://sushihangover.github.io/stripping-the-build-prefix-from-cross-compiled-b-binaries</id>
    <content type="html"><![CDATA[<h2>Remove a filename prefix from a directory of files</h2>

<p>When cross-compiling and using the standard autogen/configure &ldquo;-target=&rdquo; option, you end up with binaries that have the arch prefix on your binaries. While this makes sense in order to distinguish that the binaries are different, there are times you do not want to deal with the issue of using these prefixes all the time.</p>

<p>Here is a simple script to strip those prefixes:</p>

<pre><code>#!/bin/bash
if [ -z "$1" ]
then
  prefix="i386-apple-darwin14.3.0-"
else
  prefix=$1
fi
for filename in `ls $prefix*`
do
   newfilename=${filename:${#prefix}}
   echo $filename $newfilename
   mv $filename $newfilename
done
</code></pre>

<p>I seem to be stripping &ldquo;i386-apple-darwin14.3.0-&rdquo; lately so that is the default if no prefix is passed as an argument&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Llvm 3.4.1]]></title>
    <link href="http://sushihangover.github.io/llvm-3-dot-4-1/"/>
    <updated>2014-04-12T06:05:07-07:00</updated>
    <id>http://sushihangover.github.io/llvm-3-dot-4-1</id>
    <content type="html"><![CDATA[<p><a href="http://heartbleed.com"><img class="left" src="/images/llvm_logo_small.png" title="&ldquo;LLVM&rdquo;" ></a>Point releases are coming to the <a href="http://www.llvm.org">LLVM</a> compiler infrastructure with the LLVM 3.4.1 release just a few days away.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>The official LLVM 3.4.1 release is planned for 4-18 assuming that all of the testing goes well. Details for testing can be found via the<a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-April/072066.html"> LLVM mailing list</a>.</p>

<p>I am staying on the bleeding-edge for my bare metal ARM work, so I will continue to stay on the master branch (3.5.0):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./clang &ndash;version
</span><span class='line'>clang version 3.5.0
</span><span class='line'>Target: arm-none&ndash;eabi
</span><span class='line'>Thread model: posix</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
