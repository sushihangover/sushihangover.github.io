<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xamarin | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/xamarin/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-12-06T20:09:26-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# AppleScript calls with functions, arguments and results]]></title>
    <link href="http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results/"/>
    <updated>2015-12-06T20:06:17-08:00</updated>
    <id>http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results</id>
    <content type="html"><![CDATA[<p>Posted a new C# library to <a href="https://github.com/sushihangover/Sushi.AppleScript">Github</a> to allow the calling of AppleScript by function name, passing in arguments and receiving a return value.</p>

<h1>Sushi.AppleScript</h1>

<p><a href="https://github.com/sushihangover/Sushi.AppleScript">https://github.com/sushihangover/Sushi.AppleScript</a></p>

<p>The C# library allows you to execute AppleScript code that originates from a file or <code>string</code> and:</p>

<ul>
<li>Call function by name (Optional)</li>
<li>Pass multiple arguments to a function (Optional)</li>
<li>Execution success or failure</li>
<li>Return results from the function call</li>
</ul>


<h3>Build:</h3>

<pre><code>cd Sushi.AppleScript.Native
xcodebuild
cd -
xbuild Sushi.AppleScript.sln
</code></pre>

<h3>Test:</h3>

<p><strong>Mono&rsquo;s supplied nunit-console:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>NUnit 3.x console:</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>Note:</strong></p>

<pre><code>AppleScript.cs(7,7): error CS0246: The type or namespace name `MonoMac' could not be found. Are you missing an assembly reference?
</code></pre>

<p>If you do not have a local copy of <a href="https://github.com/mono/monomac">MonoMac</a>, xbuild will fail. It is available via &ldquo;Xamarin Studio&rdquo;:</p>

<pre><code>mdtool build Sushi.AppleScript.sln
</code></pre>

<h4>Example Usage:</h4>

<pre><code>var scptInfo = new FileInfo ("./AppleScripts/FunctionTests.txt");
string funcName = "IsRunning";
List&lt;string&gt; argList = new List&lt;string&gt; () {
    @"Finder",
};
string scriptReturnValue;
var executionSuccess = AppleScript.Run (scptInfo, funcName, argList, out scriptReturnValue);
</code></pre>

<ul>
<li>Consult <a href="https://github.com/sushihangover/Sushi.AppleScript/blob/master/Sushi.AppleScript.Test/Test.cs">Test.cs</a> for more examples</li>
</ul>


<h3>Supports:</h3>

<ul>
<li>MonoMac</li>
<li>Xamarin.Mac</li>
<li>i386 and x86_64 Mono Support</li>
</ul>


<h3>Runtime/Deployment debugging:</h3>

<p>Runtime/Deployment debugging available by setting an environment variable, <code>APPLE_SCRIPT_DEBUG</code>:</p>

<p><code>export APPLE_SCRIPT_DEBUG=true</code></p>

<p>The results are logged with the prefix <code>AppleScript:</code>, output is avaiable via Console.app.</p>

<h3>Sushi.AppleScript</h3>

<p>The C# library that provides the P/Invoke wrapper to execute AppleScript functions</p>

<h3>Sushi.AppleScript.Native</h3>

<p>An OS-X Universial (i386 &amp; x86_64) Shared Library:</p>

<ul>
<li><code>libAppleScriptEvent.dylib</code></li>
</ul>


<h3>Sushi.AppleScript.Test</h3>

<p>NUnit tests for Sushi.AppleScript library</p>

<h3>Sushi.AppleScript.CLI</h3>

<p>TODO: Provides an <code>osascript</code> style CLI utility to execute functions with AppleScript files (<code>osascript</code> does not contain this feature)</p>

<h3>License:</h3>

<ul>
<li>The MIT License (MIT)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android C# bindings for Java CIFS (jCIFS) Client Library (Samba)]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library/"/>
    <updated>2015-12-05T20:19:59-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library</id>
    <content type="html"><![CDATA[<p>I posted a Samba/JCIFS binding library to my <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">Github</a> account&hellip;</p>

<h1>Xamarin.Android.jCIFS</h1>

<p>This is a <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">C# binding library</a> for the The Java CIFS (jCIFS) Client Library (version 1.3.18).</p>

<p><a href="http://jcifs.samba.org">JCIFS</a> is an Open Source client library that implements the CIFS/SMB networking protocol in 100% Java.</p>

<blockquote><p>You can read/write, delete, make directories, rename, list contents of a directory, list the workgroups/ntdomains and servers on the network, list the shares of a server, open named pipes, authenticate web clients &hellip;etc.</p></blockquote>

<h3>License:</h3>

<p>As <a href="http://www.gnu.org/licenses/lgpl-2.1.txt">JCIFS</a> is Licensed Under the LGPL, so is this project&rsquo;s <a href="http://opensource.org/licenses/LGPL-3.0">license</a>.</p>

<h3>API Documentation:</h3>

<p>Consult the jCIFS site for <a href="http://jcifs.samba.org/src/docs/api/">API</a> documention and usage, this is a C# binding library and does not implement/change anything within the <code>jcifs-1.3.18.jar</code>.</p>

<h3>Example:</h3>

<h4>Usage of <code>Jcifs.Smb.SmbFileInputStream</code>:</h4>

<pre><code>// This is NOT best-practice code, just showing a demo Jcifs api call
public async Task getFileContents ()
{
    await Task.Run (() =&gt; {
        var smbStream = new SmbFileInputStream ("smb://guest@10.10.10.5/code/test.txt");
        byte[] b = new byte[8192];
        int n;
        while ((n = smbStream.Read (b)) &gt; 0) {
            Console.Write (Encoding.UTF8.GetString (b).ToCharArray (), 0, n);
        }
        Button button = FindViewById&lt;Button&gt; (Resource.Id.myButton);
        RunOnUiThread(() =&gt; {
            button.Text = Encoding.UTF8.GetString (b);
        });
    }
    ).ContinueWith ((Task arg) =&gt; {
        Console.WriteLine (arg.Status);
        if (arg.Status == TaskStatus.Faulted)
            Console.WriteLine (arg.Exception);
    }
    );
}
</code></pre>

<h3>Note:</h3>

<p><strong>The entire jCIFS library is not bound by this project, consult the &ldquo;Metadata.xml&rdquo; file in the binding project for method renames and class exclusions.
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin C# UIPickerView]]></title>
    <link href="http://sushihangover.github.io/xamarin-c-number-uipickerview/"/>
    <updated>2015-11-25T13:23:13-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-c-number-uipickerview</id>
    <content type="html"><![CDATA[<p>A real quickie example of a <a href="https://developer.xamarin.com/api/type/MonoTouch.UIKit.UIPickerView/">UIPickerView</a>: (<a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html">iOS SDK</a>)</p>

<p><img src="/images/Xamarin-iPhone-Picker.gif" alt="" /></p>

<p>Add a <code>UIPickerView</code> to your xib or Storyboard called <code>slotMachineView</code> and a label (named <code>selectedLbl</code>) to show the currently selected items.</p>

<pre><code>using System;
using UIKit;

namespace Slots
{
    public partial class ViewController : UIViewController
    {
        public ViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
                slotMachineView.Model = new StackOverflowModel (selectedLbl);
        }

        public override void DidReceiveMemoryWarning ()
        {
            base.DidReceiveMemoryWarning ();
        }
    }

    public class StackOverflowModel : UIPickerViewModel
    {
        static string[] names = new string [] {
            "pscorlib.dll",
            "pscorlib_aot.dll",
            "Mono.PlayScript.dll",
            "PlayScript.Dynamic.dll",
            "PlayScript.Dynamic_aot.dll",
            "PlayScript.Optimization.dll",
            "playshell.exe",
            "psc.exe"
        };

        UILabel lbl;

        public StackOverflowModel (UILabel lbl)
        {
            this.lbl = lbl;
        }

        public override nint GetComponentCount (UIPickerView v)
        {
            return 3;
        }

        public override nint GetRowsInComponent (UIPickerView pickerView, nint component)
        {
            return names.Length;
        }

        public override string GetTitle (UIPickerView picker, nint row, nint component)
        {
            switch (component) {
            case 0:
                return names [row];
            case 1:
                return row.ToString ();
            case 2:
                return new string ((char)('A' + row), 1);
            default:
                throw new NotImplementedException ();
            }
        }

        public override void Selected (UIPickerView picker, nint row, nint component)
        {
            lbl.Text = String.Format ("{0} : {1} : {2}",
                names [picker.SelectedRowInComponent (0)],
                picker.SelectedRowInComponent (1),
                picker.SelectedRowInComponent (2));
        }

        public override nfloat GetComponentWidth (UIPickerView picker, nint component)
        {
            if (component == 0)
                return 220f;
            else
                return 30f;
        }
    }
}
</code></pre>

<p>From my <a href="http://stackoverflow.com/a/33902474/4984832">answer</a> on StackOverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android Player / Genymotion - Foobar 101]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-player-delete/"/>
    <updated>2015-11-18T15:16:42-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-player-delete</id>
    <content type="html"><![CDATA[<p>I was really happy with Xamarin&rsquo;s Android Player (XAP) on OS-X 10.11 (and 10.10.x before I upgraded). It is much better the Google&rsquo;s plain-jane Android emulator, way way faster, easier setup as the images are pre-packaged Nexus images, etc&hellip; But you can not create custom images and that ends up being a problem as you need to test different configurations.</p>

<p>Someone recommended Genymotion and everything seemed fine, I could create custom Genymotion images and still use XAP for the basic testing&hellip;</p>

<p>BUT after a reboot of OS-X, <strong>everything went to @#$@#$@#</strong>. Android sessions in either player would take 10 minutes or more to start up and get to the lock screen and when I say &lsquo;more&rsquo;, I mean up to 20 minutes&hellip;or MORE. Even then, services would die, the VirtualBox instance would hang, Xamarin Studio would not connect, XAP would report that the OpenGL server is not available, Genymotion would report no IP address could be retrieved&hellip;</p>

<p>Removing Genymotion did not help. Deleting and re-install XAP did not help. Installing the latest VirtualBox did not help. Uninstall VirtualBox via their installer, deleting the XAP app and restarting from stratch did not help&hellip;. Removing all the original XAP Andriod images and re-downloading them did not help (I thought maybe the new VirtualBox updated them and caused a XAP issue, but no to that idea)&hellip;</p>

<p>Seems that I am not alone, if you started with Genymotion and later installed XAP, you could be in the same boot&hellip; after you reboot the first time. Seems Geny users call it <strong>&ldquo;surviving the reboot&rdquo;</strong>, if you make it past a reboot and everything is still working you should be golden, if not, your system is @#$#@$#.</p>

<p>I&rsquo;m still looking for a solution other then <strong>re-installing the OS as some people have resorted to</strong>&hellip; I just do not have time do a fresh OS-X install so right now I can only test via actual physical devices :-(</p>

<p><strong>AHHHHHHHHHHHHHH!!!!!!!!!!!!!!!!!!!!!!!!!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android Shared Preferences]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-shared-preferences/"/>
    <updated>2015-11-18T13:56:58-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-shared-preferences</id>
    <content type="html"><![CDATA[<p>While I do not directly recommend this technique, it seems using the <code>PreferenceManager.GetDefaultSharedPreferences</code> is really popular in saving values between different activities. While you can create multiple names that do not conflict between different activities, it can get messy real fast.</p>

<p>Instead of using <code>GetDefaultSharedPreferences</code>, create multiple <code>GetSharedPreferences</code> with different names and thus you can store values with the same names without overwriting your values from a different activity. (Again, I am not a big fan of this technique either for anything more than some simple UI preference settings, see notes at bootom of post)</p>

<p>i.e.</p>

<pre><code>        var title = "stack"; float price = 123.34f; long weight = 23; 
        var editor = GetSharedPreferences ("MyFirstActivity", Android.Content.FileCreationMode.Private);
        var edit = editor.Edit ();
        edit.PutString ("title", title);
        edit.PutFloat ("price", price);
        edit.PutLong ("weight", weight);
        edit.Apply ();

        title = "overflow"; price = 99.99f; weight = 99;
        editor = GetSharedPreferences ("MySecondActivity", Android.Content.FileCreationMode.Private);
        edit = editor.Edit ();
        edit.PutString ("title", title);
        edit.PutFloat ("price", price);
        edit.PutLong ("weight", weight);
        edit.Apply ();

        editor = GetSharedPreferences("MyFirstActivity", Android.Content.FileCreationMode.Private);
        title = editor.GetString("title", "empty");
        price = editor.GetFloat("price", 0);
        weight = editor.GetLong("weight", 0);
        Log.Info("activity1", string.Format("{0}:{1}:{2}", title, price, weight));

        editor = GetSharedPreferences("MySecondActivity", Android.Content.FileCreationMode.Private);
        title = editor.GetString("title", "empty");
        price = editor.GetFloat("price", 0);
        weight = editor.GetLong("weight", 0);
        Log.Info("activity2", string.Format("{0}:{1}:{2}", title, price, weight));
</code></pre>

<p><strong>adb logcat output:</strong></p>

<pre><code>[activity1] stack:123.34:23
[activity2] overflow:99.99:99
</code></pre>

<p><strong>Notes:</strong></p>

<p>Personally when I see someone saving shopping cart data, using JSON to serialize objects in and out of SharedPerferences string values, etc&hellip;, my head starts to pound in a <em>bad way</em>. At that time you should really start looking for an <strong>asynchronous</strong>, persistent key-value store, like <a href="https://github.com/akavache/Akavache">Akavache</a>.</p>
]]></content>
  </entry>
  
</feed>
