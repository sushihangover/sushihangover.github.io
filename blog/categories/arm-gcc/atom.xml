<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: arm-gcc | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/arm-gcc/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-08T10:10:03-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARM Cortex-M Semihosting]]></title>
    <link href="http://sushihangover.github.io/arm-cortex-m-semihosting-with-qemu/"/>
    <updated>2014-02-24T21:02:34-08:00</updated>
    <id>http://sushihangover.github.io/arm-cortex-m-semihosting-with-qemu</id>
    <content type="html"><![CDATA[<p><a href="/images/ARM_Semihosting_large.png">{% img left /images/ARM_Semihosting.png &ldquo;ARM Semihosting&rdquo; %}</a> <strong><a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjjgij.html">What is semihosting?</a></strong> <em>&hellip;Examples of these facilities include keyboard input, screen output, and disk I/O. For example, you can use this mechanism to enable functions in the C library, such as printf() and scanf(), to use the screen and keyboard of the host instead of having a screen and keyboard on the target system&hellip;</em></p>

<p>So you need to output some debug messages via your host debugging session (via JTAG or such) or working with QEMU to prototype some ARM code? Well semihosting is simple use, but it can come at a large price in memory and overhead if you use stdio to do it&hellip;</p>

<p>You can skip the &ldquo;#include &lt;stdio.h>&rdquo; and linking the semihosting newlib library (assuming you have the syscalls inplementated) and just use some simple inline assembly to get the job done.</p>

<p>Lets take a quick look at two of the twenty-some service calls (SVC) that are available, SYS_WRITEC (0x03) and WRITE0 (0x04).</p>

<h5>* SYS_WRITEC outputs a single character, an address pointer to that character is loaded in register R1. Register R0 is loaded with 0x03 and then you can execute a <em>SuperVisor Call</em> (SVC 0x00123456).</h5>

<h5>* SYS_WRITE0 outputs a null-term string, the string&rsquo;s beginning address is stored in R1, R0 is loaded with 0x04 and you execute a supervisor call again.</h5>

<p>If we translate that knowledge into inline assembly:
{% codeblock lang:c++ main.c %}
void main() {
  int SYS_WRITEC = 0x03;
  int SYS_WRITE0 = 0x04;
  register int reg0 asm(&ldquo;r0&rdquo;);
  register int reg1 asm(&ldquo;r1&rdquo;);
  char outchar = &lsquo;_&rsquo;;</p>

<p>  // A &lsquo;NOP&rsquo; so we can &lsquo;see&rsquo; the start of the folllowing svc call
  asm volatile(&ldquo;mov r0,r0&rdquo;);</p>

<p>  outchar = &lsquo;!&rsquo;;
  reg0 = SYS_WRITEC;
  reg1 = (int)&outchar;
  asm(&ldquo;svc 0x00123456&rdquo;);</p>

<p>  // A &lsquo;NOP&rsquo; so we can &lsquo;see&rsquo; the start of the folllowing svc call
  asm volatile(&ldquo;mov r0,r0&rdquo;);
  reg0 = SYS_WRITEC;
  outchar = &lsquo;\n&rsquo;;
  reg1 = (int)&outchar;
  asm(&ldquo;svc 0x00123456&rdquo;);</p>

<p>  // A &lsquo;NOP&rsquo; so we can &lsquo;see&rsquo; the start of the folllowing svc call
  asm volatile(&ldquo;mov r0, r0&rdquo;);</p>

<p>  reg0 = SYS_WRITE0;
  reg1 = (int)&amp;&ldquo;Print this to my jtag debugger\n&rdquo;;
  asm(&ldquo;svc 0x00123456&rdquo;);
}
{% endcodeblock %}</p>

<h6>Note: This is not pretty inline styling as it is meant to break each step down. Normally you would create a couple of functions (i.e: a &lsquo;PutChar&rsquo; for SYS_WRITEC) and include the R0/R1 clobbers, etc&hellip;</h6>

<p>And the output that we get:
<code>
qemu-system-arm -nographic -monitor null -serial null -semihosting -kernel main.axf
!
Print this to my jtag debugger
</code></p>

<p>{% codeblock lang:c-objdump main.o: file format elf32-littlearm %}
00000000 <main>:
   0:   e52db004    push    {fp}        ; (str fp, [sp, #-4]!)
   4:   e28db000    add fp, sp, #0
   8:   e24dd014    sub sp, sp, #20
   c:   e3a03003    mov r3, #3
  10:   e50b3008    str r3, [fp, #-8]
  14:   e3a03004    mov r3, #4
  18:   e50b300c    str r3, [fp, #-12]
  1c:   e3a0305f    mov r3, #95 ; 0x5f
  20:   e54b300d    strb    r3, [fp, #-13]
  24:   e1a00000    nop         ; (mov r0, r0)
  28:   e3a03021    mov r3, #33 ; 0x21
  2c:   e54b300d    strb    r3, [fp, #-13]
  30:   e51b0008    ldr r0, [fp, #-8]
  34:   e24b300d    sub r3, fp, #13
  38:   e1a01003    mov r1, r3
  3c:   ef123456    svc 0x00123456
  40:   e1a00000    nop         ; (mov r0, r0)
  44:   e51b0008    ldr r0, [fp, #-8]
  48:   e3a0300a    mov r3, #10
  4c:   e54b300d    strb    r3, [fp, #-13]
  50:   e24b300d    sub r3, fp, #13
  54:   e1a01003    mov r1, r3
  58:   ef123456    svc 0x00123456
  5c:   e1a00000    nop         ; (mov r0, r0)
  60:   e51b000c    ldr r0, [fp, #-12]
  64:   e59f3010    ldr r3, [pc, #16]   ; 7c &lt;main+0x7c>
  68:   e1a01003    mov r1, r3
  6c:   ef123456    svc 0x00123456
  70:   e28bd000    add sp, fp, #0
  74:   e8bd0800    ldmfd   sp!, {fp}
  78:   e12fff1e    bx  lr
  7c:   00000000    .word   0x00000000
{% endcodeblock %}</p>

<p>PS: SYS_TMPNAM and SYS_READC are not implemented in Qemu (up to and including 1.7.0), so consult the &ldquo;qemu/target-arm/arm-semi.c&rdquo; source if you are have questions about how those SVC calls are implemented.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLVM and the ARM ELF .ARM.exidx* section]]></title>
    <link href="http://sushihangover.github.io/llvm-and-the-arm-elf-arm-dot-exidx-star-section/"/>
    <updated>2014-02-23T06:39:45-08:00</updated>
    <id>http://sushihangover.github.io/llvm-and-the-arm-elf-arm-dot-exidx-star-section</id>
    <content type="html"><![CDATA[<p>In my last <a href="http://sushihangover.github.io/arm-bare-metal-comparing-llvm-to-arm-gcc/">post</a> I did a very basic comparsion of ARM code generation between LLVM and GCC compilers and testing the AXF in Qemu. The stand out difference was LLVM produced a *.ARM.exidx** section in the AXF/ELF while arm-gcc did not. The code is very simple, one .s and one .c file, no .cpp/.h involved.</p>

<p>So what is a <em>.ARM.exidx</em> section?</p>

<p>ARM ELF manual show this under the special sections chapter:</p>

<p>| Name |￼Type |￼Attributes |
| - | - | - |
| ARM.exidx |￼ SHT_ARM_EXIDX | SHF_ALLOC + SHF_LINK_ORDER |
_</p>

<blockquote><p>Names beginning .ARM.exidx name sections containing index entries for section unwinding. Names beginning .ARM.extab name sections containing exception unwinding information. See [EHABI] for details.</p></blockquote>

<p>Table 4_4 from that manual shows the Processor specific section types and our attribute is:</p>

<p>| Name | Value | Comment |
| - | - | - |
| &ldquo;SHT_ARM_EXIDX&rdquo; | 0x70000001 | |
_</p>

<p>So the question remains, what is in the section and what is being created? Lets dump HelloWorldSimple.o and only look at that section:
{% codeblock %}Relocation section &lsquo;.rel.ARM.exidx&rsquo; at offset 0x580 contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
00000000  00000b2a R_ARM_PREL31      00000000   .text
00000008  00000b2a R_ARM_PREL31      00000000   .text
Unwind table index &lsquo;.ARM.exidx&rsquo; at offset 0xcc contains 2 entries:
0x0 <print_uart0>: 0x1 [cantunwind]
0x54 <c_entry>: 0x1 [cantunwind]
{% endcodeblock %}</p>

<p>So it added both function calls to the table, but are marked <em>cantunwind</em>, which makes sense, but since nothing in the section can be unwound, why include the section? Using gc-sections during linking does not remove it as it has references to functions that are being used&hellip;</p>

<p>{% pullquote %}
Let do a quick test and add <em>-funwind-tables</em>, recompile and yes we get a fully populated unwind table and using <em>-fno-unwind-tables</em> produces the results from above, so that is the default one that is being use. {&ldquo; Research is on-going on this one&hellip; &rdquo;}
{% endpullquote %}</p>

<p>{% codeblock %}
Relocation section &lsquo;.rel.ARM.exidx&rsquo; at offset 0x5a4 contains 4 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
00000000  00000b2a R_ARM_PREL31      00000000   .text
00000000  00001600 R_ARM_NONE        00000000   <strong>aeabi_unwind_cpp_pr0
00000008  00000b2a R_ARM_PREL31      00000000   .text
00000008  00001600 R_ARM_NONE        00000000   </strong>aeabi_unwind_cpp_pr0
Unwind table index &lsquo;.ARM.exidx&rsquo; at offset 0xcc contains 2 entries:
0x0 <print_uart0>: 0x8001b0b0
  Compact model index: 0
  0x01      vsp = vsp + 8
  0xb0      finish
  0xb0      finish
0x54 <c_entry>: 0x809b8480
  Compact model index: 0
  0x9b      vsp = r11
  0x84 0x80 pop {r11, r14}
{% endcodeblock %}</p>

<p>Additional Reading: <a href="https://sourceware.org/ml/binutils/2009-05/msg00048.html">ARM unwind table linker processing</a>; this concerns a patch to bintutils/ld:</p>

<blockquote><p>The patch below implements linker processing of ARM unwinding tables
(SHT_ARM_EXIDX).</p>

<p>ARM exception index tables only define the start address of each region. This
means that code with no unwinding information is effectively covered by the
preceding unwinding table entry.</p>

<p>For normal exceptions that doesn&rsquo;t matter so much - the user should ensure
that any code they throw exceptions through has proper unwinding information.</p></blockquote>

<p>Just as a quick check, I grep&rsquo;d some source and the *.ARM.exidx** section is generated by the ARMELFStreamer:</p>

<p>{% codeblock %}
<a href="http://llvm.org/docs/doxygen/html/ARMELFStreamer_8cpp_source.html">http://llvm.org/docs/doxygen/html/ARMELFStreamer_8cpp_source.html</a>
00274 inline void ARMELFStreamer::SwitchToExIdxSection(const MCSymbol &amp;FnStart) {
00275   SwitchToEHSection(&ldquo;.ARM.exidx&rdquo;,
00276                     ELF::SHT_ARM_EXIDX,
00277                     ELF::SHF_ALLOC | ELF::SHF_LINK_ORDER,
00278                     SectionKind::getDataRel(),
00279                     FnStart);
00280 }
{% endcodeblock %}
{% codeblock %}<a href="http://llvm.org/docs/doxygen/html/Support_2ELF_8h_source.html01145">http://llvm.org/docs/doxygen/html/Support_2ELF_8h_source.html01145</a>   // Fixme: All this is duplicated in MCSectionELF. Why??
01146   // Exception Index table
01147   SHT_ARM_EXIDX           = 0x70000001U,
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM Bare Metal Hello World: Comparing LLVM & ARM-GCC]]></title>
    <link href="http://sushihangover.github.io/arm-bare-metal-comparing-llvm-to-arm-gcc/"/>
    <updated>2014-02-22T20:43:28-08:00</updated>
    <id>http://sushihangover.github.io/arm-bare-metal-comparing-llvm-to-arm-gcc</id>
    <content type="html"><![CDATA[<p>With the ever maturing and stable ARM backend of LLVM it is hard to find information using it vs. the well known ARM-GCC release.</p>

<p>So lets start with the most simple HelloWorld example and compare LLVM and <a href="https://launchpad.net/gcc-arm-embedded">ARM-GCC</a>.</p>

<p><a href="http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/">Balau&rsquo;s post</a> is a popular one showing an ARM bare metal Hello World and test using QEMU, so lets start with that one. First, lets reproduce the compile/link steps to make sure it works:</p>

<pre><code>arm-none-eabi-as -mcpu=arm926ej-s src/startup.s -o obj/startup.o
arm-none-eabi-gcc -c -mcpu=arm926ej-s -O0 src/HelloWorldSimple.c -o obj/HelloWorldSimple.o
arm-none-eabi-ld -T src/HelloWorldSimple.ld obj/HelloWorldSimple.o obj/startup.o -o bin/HelloWorldSimple.axf_gcc
arm-none-eabi-size bin/HelloWorldSimple.axf_gcc
qemu-system-arm -M versatilepb -m 128M -nographic -kernel bin/HelloWorldSimple.axf_gcc
Hello world!
QEMU: Terminated
</code></pre>

<p>Works just fine, so lets reproduce that using   my <a href="https://github.com/sushihangover/llvm_baremetal">LLVM bare metal build</a>. All the compiler options are being shown even though some are defaulted in my build of LLVM so you can see everything it is required to get the LLVM bitcode conversion to produce a valid object file for our ARM target (I&rsquo;m using the Clang driver, but you can use LLVM and pipe bitcode through the various tools so you can deeply control the optimization phase):
<code>
clang -c -target arm-none-eabi -mcpu=arm926ej-s -O0 -mfloat-abi=soft -g startup.s -o startup.o
clang -c -target arm-none-eabi -mcpu=arm926ej-s -O0 -mfloat-abi=soft -g HelloWorldSimple.c -o main.o
arm-none-eabi-ld -T HelloWorldSimple.ld main.o startup.o -o main.axf_llvm
qemu-system-arm -M versatilepb -m 128M -nographic -kernel main.axf_llvm
Hello world!
QEMU: Terminated
</code>
* target : Option providing the triple that you are &lsquo;targeting&rsquo;
* mpcu : Option provding the ARM core that will be flashed
* mfloat-abi : Soft or Hard depending upon if your ARM core has an FPU implementation on it. Cores that can support an FPU does not mean your vendor&rsquo;s core has one, comes down to features/price of the core.</p>

<h6>Note: In both, I am turning off the optimizers via the compile drivers.</h6>

<p>Lets look at the size of the AXF (ARM Executable Format) produced by:</p>

<pre><code>   text    data     bss     dec     hex filename
    140       0       0     140      8c bin/HelloWorldSimple.axf_gcc

   text    data     bss     dec     hex filename
    150       0       0     150      96 bin/HelloWorldSimple.axf
</code></pre>

<p>There is a 10 byte difference, interesting&hellip; lets look at that a little more:</p>

<table>
<thead>
<tr>
<th> llvm </th>
<th></th>
<th></th>
<th> arm-gcc </th>
<th> </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> section  </td>
<td> size </td>
<td> addr</td>
<td>section </td>
<td>size</td>
<td> addr</td>
</tr>
<tr>
<td>.startup  </td>
<td>16</td>
<td>   65536</td>
<td>.startup </td>
<td> 16 </td>
<td>65536</td>
</tr>
<tr>
<td>.text </td>
<td>             108 </td>
<td>  65552</td>
<td>.text              </td>
<td>104   </td>
<td>65552</td>
</tr>
<tr>
<td>.ARM.exidx</td>
<td>           8 </td>
<td>  65660</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>.rodata   </td>
<td>           4 </td>
<td>  65668</td>
<td>.rodata  </td>
<td>           20  </td>
<td> 65656</td>
</tr>
<tr>
<td>.rodata.str1.1</td>
<td>      14 </td>
<td>  65672</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>.ARM.attributes</td>
<td>     40 </td>
<td>      0</td>
<td>.ARM.attributes </td>
<td>    46 </td>
<td>      0</td>
</tr>
<tr>
<td>.comment       </td>
<td>     19 </td>
<td>      0</td>
<td>.comment  </td>
<td>         112  </td>
<td>     0</td>
</tr>
<tr>
<td>Total          </td>
<td>    209</td>
<td></td>
<td>Total              </td>
<td>298</td>
<td></td>
</tr>
</tbody>
</table>


<h6>Note: I ran strip on the arm-gcc version to remove the empty debug sections that gcc inserts automatically</h6>

<p>The <strong>.startup</strong> are the same size since this code is assembly and no codegen or optimization will happen there.</p>

<p>It is interesting that LLVM inserts a <strong>.ARM.exidx</strong> section even though this is <em>only</em> .c code. I&rsquo;ll have to look at LLVM to see if <em>-funwind-tables</em> and/or <em>-fexceptions</em> are defaulted to on, but I disassemble it below so we can look at that as that is 8 bytes and accounts for the size difference in this really basic example.</p>

<blockquote><p>.ARM.exidx is the section containing information for unwinding the stack</p></blockquote>

<h6>Note: Understanding the <a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044e/IHI0044E_aaelf.pdf">ARM ELF format</a> is not really required to do bare metal programming, but, understanding how your code is allocated and loaded can maek a world of differences when you are writting linker definitions files for different cores, so send a few minutes and read the 46 pages :-)</h6>

<p>First the gcc disassembly so we can compare the LLVM version to it:
<code>
bin/HelloWorldSimple.axf_gcc:     file format elf32-littlearm
Disassembly of section .startup:
00010000 &lt;_Reset&gt;:
   10000:   e59fd004    ldr sp, [pc, #4]    ; 1000c &lt;_Reset+0xc&gt;
   10004:   eb000015    bl  10060 &lt;c_entry&gt;
   10008:   eafffffe    b   10008 &lt;_Reset+0x8&gt;
   1000c:   00011090    .word   0x00011090
Disassembly of section .text:
00010010 &lt;print_uart0&gt;:
   10010:   e52db004    push    {fp}        ; (str fp, [sp, #-4]!)
   10014:   e28db000    add fp, sp, #0
   10018:   e24dd00c    sub sp, sp, #12
   1001c:   e50b0008    str r0, [fp, #-8]
   10020:   ea000006    b   10040 &lt;print_uart0+0x30&gt;
   10024:   e59f3030    ldr r3, [pc, #48]   ; 1005c &lt;print_uart0+0x4c&gt;
   10028:   e51b2008    ldr r2, [fp, #-8]
   1002c:   e5d22000    ldrb    r2, [r2]
   10030:   e5832000    str r2, [r3]
   10034:   e51b3008    ldr r3, [fp, #-8]
   10038:   e2833001    add r3, r3, #1
   1003c:   e50b3008    str r3, [fp, #-8]
   10040:   e51b3008    ldr r3, [fp, #-8]
   10044:   e5d33000    ldrb    r3, [r3]
   10048:   e3530000    cmp r3, #0
   1004c:   1afffff4    bne 10024 &lt;print_uart0+0x14&gt;
   10050:   e24bd000    sub sp, fp, #0
   10054:   e49db004    pop {fp}        ; (ldr fp, [sp], #4)
   10058:   e12fff1e    bx  lr
   1005c:   101f1000    .word   0x101f1000
00010060 &lt;c_entry&gt;:
   10060:   e92d4800    push    {fp, lr}
   10064:   e28db004    add fp, sp, #4
   10068:   e59f0004    ldr r0, [pc, #4]    ; 10074 &lt;c_entry+0x14&gt;
   1006c:   ebffffe7    bl  10010 &lt;print_uart0&gt;
   10070:   e8bd8800    pop {fp, pc}
   10074:   0001007c    .word   0x0001007c
</code>
Now the LLVM version:
<code>
bin/HelloWorldSimple.axf:     file format elf32-littlearm
Disassembly of section .startup:
00010000 &lt;_Reset&gt;:
   10000:   e59fd004    ldr sp, [pc, #4]    ; 1000c &lt;_Reset+0xc&gt;
   10004:   eb000016    bl  10064 &lt;c_entry&gt;
   10008:   eafffffe    b   10008 &lt;_Reset+0x8&gt;
   1000c:   00011098    .word   0x00011098
Disassembly of section .text:
00010010 &lt;print_uart0&gt;:
   10010:   e24dd008    sub sp, sp, #8
   10014:   e1a01000    mov r1, r0
   10018:   e58d0004    str r0, [sp, #4]
   1001c:   e58d1000    str r1, [sp]
   10020:   e59d0004    ldr r0, [sp, #4]
   10024:   e5d00000    ldrb    r0, [r0]
   10028:   e3500000    cmp r0, #0
   1002c:   0a000009    beq 10058 &lt;print_uart0+0x48&gt;
   10030:   eaffffff    b   10034 &lt;print_uart0+0x24&gt;
   10034:   e59d0004    ldr r0, [sp, #4]
   10038:   e5d00000    ldrb    r0, [r0]
   1003c:   e59f101c    ldr r1, [pc, #28]   ; 10060 &lt;print_uart0+0x50&gt;
   10040:   e5911000    ldr r1, [r1]
   10044:   e5810000    str r0, [r1]
   10048:   e59d0004    ldr r0, [sp, #4]
   1004c:   e2800001    add r0, r0, #1
   10050:   e58d0004    str r0, [sp, #4]
   10054:   eafffff1    b   10020 &lt;print_uart0+0x10&gt;
   10058:   e28dd008    add sp, sp, #8
   1005c:   e12fff1e    bx  lr
   10060:   00010084    .word   0x00010084
00010064 &lt;c_entry&gt;:
   10064:   e92d4800    push    {fp, lr}
   10068:   e1a0b00d    mov fp, sp
   1006c:   e59f0004    ldr r0, [pc, #4]    ; 10078 &lt;c_entry+0x14&gt;
   10070:   ebffffe6    bl  10010 &lt;print_uart0&gt;
   10074:   e8bd8800    pop {fp, pc}
   10078:   00010088    .word   0x00010088
</code>
<a href="/images/llvm-gcc-diff_large.png">{% img left /images/llvm-gcc-diff_small.png &ldquo;LLVM vs. GCC Hello World ARM Bare Metal&rdquo; %}</a> We can ignore the _Reset section as that is hand coded assembly and the same for both.</p>

<p>The c_entry is interesting as LLVM uses a move to copy the stack register to fp (r11 = frame pointer) which I what I would do, but arm-gcc does an &ldquo;"add&rdquo;&ldquo; to get fp into the sp and does that by adding fp to register #4(?) This is flagged as general variable for gcc&hellip; I am slightly confused by gcc&rsquo;s choice to do that, now that question is when would #4 not contain zero? The rest of this function is the same between the two compilers.</p>

<p>The print_uart0 function is a hack function as it does not implement FIFO/flow-control to an actual UART, but in this case it points to a memory address where the discontinued ARM Versatile PB dev-board does have a UART and QEMU board simulation echos those writes. I am not going to do a line by line comparision of the generated code as for un-optimized code they are both getting the job done, but in slightly different ways in almost the same number of instructions.</p>

<p>So we are able to produce a working bare metal ARM AXF from LLVM and next time, I will spend a little time on compiler optimizations to see how the two code generators/optimizisers compare&hellip;</p>
]]></content>
  </entry>
  
</feed>
