<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os-x | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-11-21T14:12:12-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NUnit Console 2.4.8 vs 3.0 using .csproj files]]></title>
    <link href="http://sushihangover.github.io/nunit-console-2-dot-4-8-vs-3-dot-0/"/>
    <updated>2015-11-19T21:14:42-08:00</updated>
    <id>http://sushihangover.github.io/nunit-console-2-dot-4-8-vs-3-dot-0</id>
    <content type="html"><![CDATA[<p>When using NUnit console 2.4.x and 3.x with <code>.csproj</code> files, it expects a valid and fairly complete MSBuild/xbuild project to determine the assembly name, dir location, and namespace that it will test in the Library-based project (Exe-based projects are possible if you have defined the proper entry point). In this example I used NUnit 2.4.x and 3.x <strong>console</strong> as there are execution differences but the same <code>.csproj</code> is being used so if you are using MonoDevelop/Xamarin Studio the IDE&rsquo;s built-in NUnit 2.4.x test pad will also work.</p>

<p><strong>NUnit 3.0 console (Install via nuget):</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe  nunit-lib/nunit-lib.csproj --config=Debug

NUnit Console Runner 3.0.5797 
Copyright (C) 2015 Charlie Poole

Runtime Environment
   OS Version: MacOSX 15.0.0.0 
  CLR Version: 4.0.30319.17020

Test Files
    nunit-lib/nunit-lib.csproj

Errors and Failures

1) Failed : nunitlib.Test.TestCase
  Expected string length 8 but was 5. Strings differ at index 0.
  Expected: "Overflow"
  But was:  "Stack"
  -----------^
at nunitlib.Test.TestCase () in &lt;filename unknown&gt;:line 0

Test Run Summary
    Overall result: Failed
   Tests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0
     Not run: 0, Invalid: 0, Ignored: 0, Explicit: 0, Skipped: 0
  Start time: 2015-11-20 12:36:28Z
    End time: 2015-11-20 12:36:28Z
    Duration: 0.132 seconds
</code></pre>

<p><strong>NUnit 2.4.8 (installed via Mono):</strong></p>

<p><strong>NOTE</strong>: NUnit console 2.4.x is <code>broken</code> due a hard-coded Windows-style Directory Separator when parsing <code>.csproj</code> files and creating the expected CIL/assembly location, use <code>MONO_IOMAP</code> to work around it. This is not a issue in 3.0.</p>

<p><strong>NUnit Console 2.4.x w/o MONO_IOMAP:</strong></p>

<pre><code>nunit-console nunit-lib/nunit-lib.csproj -config=Debug
~~~~
Unhandled Exception:
System.IO.DirectoryNotFoundException: Directory "/Users/sushi/code/XamTests/nunit-lib/nunit-lib/bin\Debug" not found.
~~~~
</code></pre>

<p><strong>NUnit Console 2.4.x with MONO_IOMAP:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console nunit-lib/nunit-lib.csproj -config=Debug

NUnit version 2.4.8
Copyright (C) 2002-2007 Charlie Poole.
Copyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.
Copyright (C) 2000-2002 Philip Craig.
All Rights Reserved.

Runtime Environment - 
   OS Version: Unix 15.0.0.0
  CLR Version: 4.0.30319.17020 ( 4.2.1 (explicit/8862921 Thu Oct 29 17:09:16 EDT 2015) )

.F
Tests run: 1, Failures: 1, Not run: 0, Time: 0.115 seconds

Test Case Failures:
1) nunitlib.Test.TestCase :   Expected string length 8 but was 5. Strings differ at index 0.
  Expected: "Overflow"
  But was:  "Stack"
  -----------^
</code></pre>

<p><strong>.csproj example used in for example:</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
    &lt;ProjectGuid&gt;{944946CD-39B2-4A16-A8A8-9F70F0450506}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;RootNamespace&gt;nunitlib&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;nunit-lib&lt;/AssemblyName&gt;
    &lt;TargetFrameworkVersion&gt;v4.5&lt;/TargetFrameworkVersion&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release&lt;/OutputPath&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="nunit.framework"&gt;
      &lt;HintPath&gt;..\packages\NUnit.2.6.4\lib\nunit.framework.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="Test.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
  &lt;ItemGroup&gt;
    &lt;None Include="packages.config" /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>Ref: This was my <a href="http://stackoverflow.com/a/33827575/4984832">answer</a> on StackOverflow</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX 10.11 El Capitan, Which Mono version?]]></title>
    <link href="http://sushihangover.github.io/osx-10-dot-11-el-capitan-which-mono-version/"/>
    <updated>2015-10-14T05:49:56-07:00</updated>
    <id>http://sushihangover.github.io/osx-10-dot-11-el-capitan-which-mono-version</id>
    <content type="html"><![CDATA[<p>Moving to El Capitan? Then you need <a href="http://www.mono-project.com/download/">Mono</a> version 4.2.x or 4.0.4.4.</p>

<p>From the Mono mailing list:</p>

<blockquote><p>What is the difference between the latest Mono 4.0.4.4 package for Mac and the 4.2.1 El Capitan Preview?
The changelog of 4.0.4.4 includes &ldquo;33585: El Capitan System Integrity
Protection support.&rdquo; so i suppose that the 4.0.4.4 also works on El
Capitan?.</p></blockquote>

<p>Reply from Miguel de Icaza:</p>

<blockquote><p>One is based on Mono 4.0 series, with minimal changes just to enable the support on El Capitan;   The 4.2 has the same changes, on top of the latest Mono 4.2, available on Alpha and the release candidate.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X + Mono + Rosyln + CodeFormatter]]></title>
    <link href="http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter/"/>
    <updated>2015-06-25T06:20:17-07:00</updated>
    <id>http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter</id>
    <content type="html"><![CDATA[<p>CodeFormatter is a tool that uses Roslyn to automatically rewrite the source to follow Microsoft&rsquo;s coding styles, which are <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-style.md">documented here</a>.</p>

<p>CodeFormatter has been released as open-source for 6 months now, but I have not had a chance to look at it.</p>

<p>With Roslyn compiling on OS-X and I had a couple of projects that really needed to be cleaned up, I thought I would give it a try.</p>

<p>15 minutes in total to clone the repo and get things built properly, would have been quicker but the VS solution file is not very Xamanin Studio/MonoDevelop friendly as it includes ToolVersion 14 items (That would be included in VS 2015 beta).</p>

<p>But those projects are not needed to get the main program working&hellip;</p>

<h3>mono ./CodeFormatter.exe</h3>

<pre><code>Must specify at least one project / solution / rsp to format
CodeFormatter [/file:&lt;filename&gt;] [/lang:&lt;language&gt;] [/c:&lt;config&gt;[,&lt;config&gt;...]&gt;]
    [/copyright:&lt;file&gt; | /nocopyright] [/tables] [/nounicode]
    [/rule(+|-):rule1,rule2,...]  [/verbose]
    &lt;project, solution or response file&gt;

    /file        - Only apply changes to files with specified name
    /lang        - Specifies the language to use when a responsefile is
                   specified. i.e. 'C#', 'Visual Basic', ... (default: 'C#')
    /c           - Additional preprocessor configurations the formatter
                   should run under.
    /copyright   - Specifies file containing copyright header.
                   Use ConvertTests to convert MSTest tests to xUnit.
    /nocopyright - Do not update the copyright message.
    /tables      - Let tables opt out of formatting by defining
                   DOTNET_FORMATTER
    /nounicode   - Do not convert unicode strings to escape sequences
    /rule(+|-)   - Enable (default) or disable the specified rule
    /rules       - List the available rules
    /verbose     - Verbose output
</code></pre>

<h3>mono ./CodeFormatter.exe /rules</h3>

<pre><code>Name                 Description
==============================================
BraceNewLine         :Ensure all braces occur on a new line
Copyright            :Insert the copyright header into every file
NewLineAbove         :Ensure there is a new line above the first namespace and using in the file
CustomCopyright      :Remove any custom copyright header from the file
UsingLocation        :Place using directives outside namespace declarations
UnicodeLiterals      :Use unicode escape sequence instead of unicode literals
ExplicitVisibility   :Ensure all members have an explicit visibility modifier
IllegalHeaders       :Remove illegal headers from files
FormatDocument       :Run the language specific formatter on every document
ExplicitThis         :Remove explicit this/Me prefixes on expressions except where necessary
ReadonlyFields       :Mark fields which can be readonly as readonly
FieldNames           :Prefix private fields with _ and statics with s_
</code></pre>

<p> I&rsquo;ll be checking next to see if it really works on some source code. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - NUnit Hello World]]></title>
    <link href="http://sushihangover.github.io/mono-nunit-world-world/"/>
    <updated>2015-06-24T22:11:16-07:00</updated>
    <id>http://sushihangover.github.io/mono-nunit-world-world</id>
    <content type="html"><![CDATA[<p>From my Answer for &ldquo;<a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Run NUnit test on Ubuntu from command line</a>&rdquo; on <a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Stackoverflow</a>:</p>

<p>Lets start from the beginning:</p>

<p>Get the latest and greatest NUnit <strong>AND</strong> it&rsquo;s Runner tools</p>

<pre><code>curl https://api.nuget.org/downloads/nuget.exe -o nuget.exe
mono nuget.exe install NUnit
mono nuget.exe install NUnit.Runners
</code></pre>

<p>Make sure the mono is finding those assemblies <strong>first</strong> (vs the GAC)</p>

<pre><code>export MONO_PATH=$(PWD)/NUnit.Runners.2.6.4/tools;$(PWD)/NUnit.2.6.4/lib
</code></pre>

<p>Create your test example (save it to vi OnlyTest.cs):</p>

<pre><code>using System;
using System.Text;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public class OnlyTest
{
    [Test]
    public void MyTest() 
    {
        int a = 10;
        Assert.AreEqual(10, a);
    }
}
</code></pre>

<p> Compile it:</p>

<pre><code>  mcs OnlyTest.cs -target:library -r:NUnit.2.6.4/lib/nunit.framework.dll -out:OnlyTest.dll
</code></pre>

<p>Run it:</p>

<pre><code>mono ./NUnit.Runners.2.6.4/tools/nunit-console.exe OnlyTest.dll -noresult
</code></pre>

<p>Output:</p>

<pre><code>Using default runtime: v4.0.30319
NUnit-Console version 2.6.4.14350
Copyright (C) 2002-2012 Charlie Poole.
Copyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.
Copyright (C) 2000-2002 Philip Craig.
All Rights Reserved.

Runtime Environment -
   OS Version: Unix 14.3.0.0
  CLR Version: 4.0.30319.17020 ( Mono 4.0 ( 4.3.0 (master/b044a27 Thu Jun 18 15:17:08 PDT 2015) ) )

ProcessModel: Default    DomainUsage: Single
Execution Runtime: mono-4.0
.
Tests run: 1, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.0280499 seconds
  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp - 64-bit NCurses on OS-X and Mono]]></title>
    <link href="http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono/"/>
    <updated>2015-06-15T21:07:53-07:00</updated>
    <id>http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/FireworksDemo.gif">http://sushihangover.github.io/images/FireworksDemo.gif</a>">CursesSharp is a C# wrapper for curses library.</p>

<ul>
<li>The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.</li>
<li>The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</li>
</ul>


<p>I updated this to work for &lsquo;modern&rsquo; autotools so allow autoreconf and configure to actual run without throwing errors and then I updated the Makefile.am&rsquo;s files to allow compiling under OS-X and with Mono 4.0.x. Linux and Windows should still work, but I have not at this time tested those other flavors.</p>

<p>Let me know via Github <a href="https://github.com/sushihangover/CursesSharp/issues/new">issues</a> if you have any problems. ;-)</p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X. The build <img class="right <a" src="href="http://sushihangover.github.io/images/RainDemo.gif">http://sushihangover.github.io/images/RainDemo.gif</a>">CursesSharp is a C# wrapper for curses library.
process has been tested on 10.10.3 using Apple LLVM version 6.1.0 and a Mono 4.0.1 64-bit build.</p>

<h3>0. Prerequisites</h3>

<ol>
<li>Subversion - if you intend to build CursesSharp from SVN repository. If you use the source code package, you don&rsquo;t need Subversion.</li>
<li>autoconf/automake/libtool - only if you are building from SVN. You don&rsquo;t need these tools if you use the source code package.</li>
<li>Standard development tools - a C compiler (e.g. GCC) and GNU make (gmake).</li>
<li>Ncurses library and headers (development files) - typically this package is called ncurses-dev.</li>
<li>Mono - the .NET runtime and development framework</li>
<li>pkg-config - typically required by Mono, but make sure it&rsquo;s installed</li>
</ol>


<h3>1. Getting CursesSharp</h3>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<p>Original SVN Repo:</p>

<pre><code>https://curses-sharp.svn.sourceforge.net/svnroot/curses-sharp/trunk
</code></pre>

<p>The following section describes the former case. If you downloaded the source code package, extract it and you may skip to step 4.</p>

<p><img class="left <a" src="href="http://sushihangover.github.io/images/UnicodeDemo.gif">http://sushihangover.github.io/images/UnicodeDemo.gif</a>"></p>

<h3>2. Git clone</h3>

<p>Execute the following command:</p>

<pre><code>git clone https://github.com/sushihangover/CursesSharp.git cursessharp
</code></pre>

<p><em>You may substitute the final cursessharp for any other directory of your liking.</em></p>

<h3>3. Bootstrapping</h3>

<p>In order to proceed with the build, you will have to create the configure script. Cd into the directory containing CursesSharp sources and execute the following command:</p>

<p>brew link gettext &ndash;force  <br/>
autoreconf -if</p>

<h3>4. Configure</h3>

<p>In the top source directory execute the command:</p>

<pre><code>LIBS="-lncurses -liconv -lpanel" ./configure
</code></pre>

<p>By default CursesSharp is installed in /usr/local. To change the target directory,<strong> which you really should do,</strong> you can use the &ldquo;&ndash;prefix=&rdquo; option:</p>

<pre><code># Following all on one line:    
LIBS="-lncurses -liconv -lpanel" ./configure --prefix=$HOME/cursessharp
</code></pre>

<p>You can also use other options. For a complete list execute:</p>

<pre><code>./configure --help
</code></pre>

<h4>5. Make</h4>

<p>After you executed configure, run (in the same directory):</p>

<pre><code>#I am using a locally built/installed 64-bit version of mono, so I add it to the path
export PATH=/Users/administrator/mono/mono-llvm-64/bin:$PATH
make
# remove brew's version of gettext 
brew unlink gettext
</code></pre>

<p>To compile the source code.</p>

<h3>6. Installation</h3>

<p>Execute the command:</p>

<pre><code>make install
</code></pre>

<p>This will install CursesSharp. Make sure you have appropriate privileges.</p>

<h3>7. Testing</h3>

<p>By default CursesSharp will install a few demonstration programs. At this time, these are: FireworkDemo and RainDemo. You can try running the demos to check if CursesSharp works.</p>

<p>Running the demos:</p>

<p>Add your cursessharp&rsquo;s bin install location to your path, i.e.</p>

<pre><code>export PATH=$HOME/cursessharp/bin:$PATH
</code></pre>

<p>And you can run them from anywhere:</p>

<pre><code>RainDemo
FireworksDemo
UnicodeDemo
</code></pre>

<p>Have fun ;-)</p>
]]></content>
  </entry>
  
</feed>
