<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Os-x | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-09T09:49:57-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mono - Using Llvm? Make Sure Your Targets Match]]></title>
    <link href="http://sushihangover.github.io/mono-using-llvm/"/>
    <updated>2015-06-09T07:21:58-07:00</updated>
    <id>http://sushihangover.github.io/mono-using-llvm</id>
    <content type="html"><![CDATA[<p>When configuring Mono to use llvm, if you receive the error:</p>

<p><strong>configure: error: Cross compiling is not supported for target i386-apple-darwin11.2.0</strong></p>

<p>Then the llvm-config that is currently the first hit in your path and that is begin picked up by the mono autogen/configure script is does not match the target that you are trying to build in mono.</p>

<p><strong>llvm-config &ndash;host-target</strong> should help you out and change your path so the correct llvm bin directory is first in the list so when mono&rsquo;s configure runs llvm-config it gets the correct info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X 64-bit Mono : Midnight Commander]]></title>
    <link href="http://sushihangover.github.io/os-x-64-bit-mono-midnight-commander/"/>
    <updated>2015-06-08T18:43:29-07:00</updated>
    <id>http://sushihangover.github.io/os-x-64-bit-mono-midnight-commander</id>
    <content type="html"><![CDATA[<p><img src="/images/midnightcommander.png" alt="" /></p>

<p>In testing out 64-bit ncurses on OS-X, I grabbed the C# version of <a href="https://github.com/migueldeicaza/mc">Midnight Commander</a> to do some manual testing.</p>

<p>After tweaking the Makefile for PE32+ images, I ended up with a 64-bit exe, dll, and dylib:</p>

<pre><code>file *.exe *.dll *.dylib
mc.exe:               PE32+ executable for MS Windows (console) Mono/.Net assembly
mono-curses.dll:      PE32+ executable for MS Windows (DLL) (console) Mono/.Net/assembly
libmono-curses.dylib: Mach-O 64-bit dynamically linked shared library x86_64
</code></pre>

<p>There are some minor painting issues which I do not know if they are related to the arch type, OS-X or bugs in the actual C# code (mc or the ncurses wrapper), but overall it works very well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X Mono - Unable to Find the Dylib Native Library]]></title>
    <link href="http://sushihangover.github.io/mono-unable-to-find-the-ldylib-native-library/"/>
    <updated>2015-06-08T10:41:32-07:00</updated>
    <id>http://sushihangover.github.io/mono-unable-to-find-the-ldylib-native-library</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://sushihangover.github.io/images/mono-logo.png">http://sushihangover.github.io/images/mono-logo.png</a>" title="" > Using Mono/.Net libraries that have native binding and you are receiving errors like
&ldquo;<strong>Unable to find the xxxx native library</strong>&rdquo; or &ldquo;<strong>DllImport error loading library</strong>&rdquo;.</p>

<p>You can easily find where mono is looking for that native library by setting the MONO_LOG_LEVEL to debug and MONO_LOG_MASK filtering to only DLL related messages.</p>

<pre><code>export MONO_LOG_LEVEL=debug
export MONO_LOG_MASK=dll
mono yourprogram.exe
</code></pre>

<p>I was recently using the <a href="https://github.com/mono/mono-curses">mono-curses</a> wrapper, or at least trying to ;-) and I knew my DYLD_LIBRARY_PATH was set properly to pick up the &ldquo;libmono-curses.dylib&rdquo; that I just built. But the program failed to run so I set the MONO_LOG_LEVEL and MONO_LOG_MASK env vars and re-ran the program. Yes it was finding the dylib OK <strong>but</strong> it was complaining about it being the wrong architecture&hellip;</p>

<pre><code>Mono: DllImport attempting to load: 'libmono-curses.dylib'.
Mono: DllImport error loading library '/Users/administrator/Documents/Code/github/mono-curses/libmono-curses.dylib': 'dlopen(/Users/administrator/Documents/Code/github/mono-curses/libmono-curses.dylib, 9): no suitable image found.
Did find:  /Users/administrator/Documents/Code/github/mono-curses/libmono-curses.dylib: mach-o, but wrong architecture        
</code></pre>

<p>Checking with <strong>file</strong> and yes, it was a 32-bit version of the library:</p>

<pre><code>file libmono-curses.dylib
libmono-curses.dylib: Mach-O dynamically linked shared library i386
</code></pre>

<p>I am compiling using a 64-bit version of Mono on OS-X and need 64-bit libraries (and native libs), so a quick fix in the mono-curses Makefile and re-compile and I have a 64-bit version (I&rsquo;ll fork and fix the <a href="https://github.com/mono/mono-curses">mono-curses</a> project and post it to my GitHub).</p>

<pre><code>file libmono-curses.dylib 
libmono-curses.dylib: Mach-O 64-bit dynamically linked shared library x86_64
</code></pre>

<p>After that, testing the C# ncurses wrapper went fine&hellip; ;-)</p>

<h2><a href="http://www.mono-project.com/docs/advanced/pinvoke/#mac-os-x-framework-and-dylib-search-path">Mac OS X Framework and .dylib Search Path</a></h2>

<h3>The Framework and library search path is:</h3>

<ul>
<li>A colon-separated list of directories in the user’s DYLD_FRAMEWORK_PATH environment variable.</li>
<li>A colon-separated list of directories in the user’s DYLD_LIBRARY_PATH environment variable.</li>
<li><p>A colon-separated list of directories in the user’s DYLD_FALLBACK_FRAMEWORK_PATH environment variable, which defaults to the directories:</p>

<pre><code>  ~/Library/Frameworks
  /Library/Frameworks
  /Network/Library/Frameworks
  /System/Library/Frameworks
</code></pre></li>
<li><p>A colon-separated list of directories in the user’s DYLD_FALLBACK_LIBRARY_PATH environment variable, which defaults to the directories:</p>

<pre><code>  ~/lib
  /usr/local/lib
  /lib
  /usr/lib
</code></pre></li>
</ul>


<p>Note: Mono will automatically append the appropriate suffix depending on the platform (.dylib on Mac, .so on Linux and .dll on Windows).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X Brew : Clean It Up]]></title>
    <link href="http://sushihangover.github.io/os-x-brew-clean-it-up/"/>
    <updated>2015-06-07T20:10:40-07:00</updated>
    <id>http://sushihangover.github.io/os-x-brew-clean-it-up</id>
    <content type="html"><![CDATA[<p><img src="/images/Homebrew_logo.png" alt="" /></p>

<p>I&rsquo;m a big fan of <a href="http://brew.sh">Homebrew</a> on OS-X and it normally it works so well that you just do not think about it. That is a very good thing, it just works, does not get in your way and anything is good.</p>

<p>While I was updating/upgrading packages today, I ended up running &lsquo;brew info&rsquo;:</p>

<pre><code>brew info 
146 kegs, 171208 files, 8.0G
</code></pre>

<p>I was surprised that I had 8 GBs of hard drive space consumed by brew packages. If you did not know it, brew does not auto-purge older packages.</p>

<p><blockquote><p>From  FAQ:<br/>By default, Homebrew does not uninstall old versions of a formula, so over time you will accumulate old versions.</p></p><p><p><a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md">https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md</a></p></blockquote></p>

<p>It had been a long time since I did a cleanup in brew and I had well over a hundred older versions of various packages that I was not using (i.e. one that were not pinned; <em>brew pin {FORMULA</em>), so I ran the cleanup and freed up 7.3 GB of drive space.</p>

<pre><code>brew info 
146 kegs, 63167 files, 2.7G
</code></pre>

<p>Clean up everything at once:</p>

<pre><code>brew cleanup
</code></pre>

<p>Clean up just one formula:</p>

<pre><code>brew cleanup {FORMULA}
</code></pre>

<p>Do a dry run to see what would be cleaned up:</p>

<pre><code>brew cleanup -n
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X : Using DiffMerge as Your Git Visual Merge and Diff Tool]]></title>
    <link href="http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool/"/>
    <updated>2014-02-19T20:56:11-08:00</updated>
    <id>http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool</id>
    <content type="html"><![CDATA[<p><a href="/images/diffmerge_large.png"><img class="right" src="/images/diffmerge_small.png" title="&ldquo;LLVM vs. GCC code generation for Bare Metal ARM development&rdquo;" ></a>
I tend to stay on the cmd line as much as possible, but for visual diffs, an ncurses console diff tool just does not cut it for me. <a href="http://www.scootersoftware.com/moreinfo.php">Beyond Compare Pro</a> by <a href="http://www.scootersoftware.com/index.php">Scooter</a> on Windows is one of best that I have ever used and with licenses at work I never had to worry about not having it on a work desktop or laptop.</p>

<p>But on OS-X at home, Beyond Compare was not available. There is a 4.0 release in the works (beta now), but $50.00 USD for a personal-use copy on OS-X and not having feature parity with Windows Pro features(?), I just can not pull the trigger on that purchuse when there are other
(cheaper) options that work just as well for personal development.</p>

<p>So, normally for a <strong>free</strong> visual diff, you can not beat <a href="http://meldmerge.org">meld</a>, it is a great open-source tool, but on OS-X it fires up X (Quartz for me) and it getting long in the tooth in terms of the GUI&rsquo;s human factors (feature set is still great). If there was a Qt version of this, the search would be over&hellip; free or not!</p>

<p>So some searching landed me on an old post by <a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">Todd Huss</a> about using DiffMerge as your visual diff/merge for git and it was actually what I was looking for, well almost ;-) It is missing a few features, but they have a free version and it works really well and has a great OS-X interface&hellip; search is over for now&hellip;</p>

<blockquote><p><a href="http://www.sourcegear.com/diffmerge/">SourceGear</a> has a $19.00 USD version that include file export with HTML formatting and if I could see example HTML code that it produces, I pay for that feature in a heart-beat, but the feature is completely locked out till you actaully register, bummer&hellip;</p></blockquote>

<p>Todd recommends using the DiffMerge installer version vs. the dmg version, I go the other way on that. Download the dmg version, open it and drag/drop the app to your Applications. Then in a term window you can copy the <em>Extras/diffmerge.sh</em> to your <em>/usr/local/bin</em> directory (Execute attrib is already set, so no chmod needed..), but I copied it as just <em>vdiff</em> as that is quicker to type. No admin rights are need to install it that way and that makes me happy&hellip; I can <em>vdiff file1.c file2.c</em> on the cmd line to pop the GUI open and populate it.</p>

<p>I then used the git setup he has listed and everything is working great so far. Click on the image above to it comparing the disassembly of <a href="/images/diffmerge_large.png">LLVM vs. GCC code generation for bare metal ARM</a> development.</p>

<p><figure class='code'><figcaption><span>Your git setup is: </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config <span class="p">&amp;</span>ndash<span class="p">;</span>global diff.tool diffmerge
</span><span class='line'>git config <span class="p">&amp;</span>ndash<span class="p">;</span>global difftool.diffmerge.cmd <span class="p">&amp;</span>lsquo<span class="p">;</span>diffmerge <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$LOCAL</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$REMOTE</span><span class="p">&amp;</span>rdquo<span class="p">;&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>git config <span class="p">&amp;</span>ndash<span class="p">;</span>global merge.tool diffmerge
</span><span class='line'>git config <span class="p">&amp;</span>ndash<span class="p">;</span>global mergetool.diffmerge.cmd <span class="p">&amp;</span>lsquo<span class="p">;</span>diffmerge <span class="p">&amp;</span>ndash<span class="p">;</span>merge <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nv">result</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$MERGED</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$LOCAL</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">$(if</span> <span class="nb">test</span> -f <span class="p">&amp;</span>rdquo<span class="p">;</span><span class="nv">$BASE</span><span class="s2">&quot;; then echo &amp;ldquo;$BASE&amp;rdquo;; else echo &amp;ldquo;$LOCAL&amp;rdquo;; fi)&amp;ldquo; &amp;rdquo;$REMOTE&quot;</span><span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>git config <span class="p">&amp;</span>ndash<span class="p">;</span>global mergetool.diffmerge.trustExitCode <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Your git shortcuts are: linenos:false </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;diff the <span class="nb">local </span>file.m against the checked-in version&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git difftool file.m&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;diff the <span class="nb">local </span>file.m against the version in some-feature-branch&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git difftool some-feature-branch file.m&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;diff the file.m from the Build-54 tag to the Build-55 tag&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git difftool Build-54..Build-55 file.m&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;To resolve merge conflicts, just run git mergetool:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git mergetool
</span></code></pre></td></tr></table></div></figure></p>

<p>Thanks <a href="http://twobitlabs.com">Todd</a>, works great.</p>
]]></content>
  </entry>
  
</feed>
