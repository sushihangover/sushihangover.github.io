<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS-X | SushiHangover]]></title>
  <link href="http://sushihangover.github.io/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2014-04-22T16:01:21-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[Robert N.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS-X : Using DiffMerge as Your Git Visual Merge and Diff Tool]]></title>
    <link href="http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool"/>
    <updated>2014-02-19T20:56:11-08:00</updated>
    <id>http://sushihangover.github.io/using-diffmerge-as-your-git-visual-merge-and-diff-tool</id>
    <content type="html"><![CDATA[<p><a href="/images/diffmerge_large.png">{% img right /images/diffmerge_small.png &ldquo;LLVM vs. GCC code generation for Bare Metal ARM development&rdquo; %}</a>
I tend to stay on the cmd line as much as possible, but for visual diffs, an ncurses console diff tool just does not cut it for me. <a href="http://www.scootersoftware.com/moreinfo.php">Beyond Compare Pro</a> by <a href="http://www.scootersoftware.com/index.php">Scooter</a> on Windows is one of best that I have ever used and with licenses at work I never had to worry about not having it on a work desktop or laptop.</p>

<p>But on OS-X at home, Beyond Compare was not available. There is a 4.0 release in the works (beta now), but $50.00 USD for a personal-use copy on OS-X and not having feature parity with Windows Pro features(?), I just can not pull the trigger on that purchuse when there are other
(cheaper) options that work just as well for personal development.</p>

<p>So, normally for a <strong>free</strong> visual diff, you can not beat <a href="http://meldmerge.org">meld</a>, it is a great open-source tool, but on OS-X it fires up X (Quartz for me) and it getting long in the tooth in terms of the GUI&rsquo;s human factors (feature set is still great). If there was a Qt version of this, the search would be over&hellip; free or not!</p>

<p>So some searching landed me on an old post by <a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">Todd Huss</a> about using DiffMerge as your visual diff/merge for git and it was actually what I was looking for, well almost ;&ndash;) It is missing a few features, but they have a free version and it works really well and has a great OS-X interface&hellip; search is over for now&hellip;</p>

<blockquote><p><a href="http://www.sourcegear.com/diffmerge/">SourceGear</a> has a $19.00 USD version that include file export with HTML formatting and if I could see example HTML code that it produces, I pay for that feature in a heart-beat, but the feature is completely locked out till you actaully register, bummer&hellip;</p></blockquote>

<p>Todd recommends using the DiffMerge installer version vs. the dmg version, I go the other way on that. Download the dmg version, open it and drag/drop the app to your Applications. Then in a term window you can copy the <em>Extras/diffmerge.sh</em> to your <em>/usr/local/bin</em> directory (Execute attrib is already set, so no chmod needed..), but I copied it as just <em>vdiff</em> as that is quicker to type. No admin rights are need to install it that way and that makes me happy&hellip; I can <em>vdiff file1.c file2.c</em> on the cmd line to pop the GUI open and populate it.</p>

<p>I then used the git setup he has listed and everything is working great so far. Click on the image above to it comparing the disassembly of <a href="/images/diffmerge_large.png">LLVM vs. GCC code generation for bare metal ARM</a> development.</p>

<p>{% codeblock lang:bash Your git setup is: %}
git config &mdash;global diff.tool diffmerge
git config &mdash;global difftool.diffmerge.cmd &lsquo;diffmerge &ldquo;$LOCAL&rdquo; &ldquo;$REMOTE&rdquo;&rsquo;
git config &mdash;global merge.tool diffmerge
git config &mdash;global mergetool.diffmerge.cmd &lsquo;diffmerge &mdash;merge &mdash;result=&ldquo;$MERGED&rdquo; &ldquo;$LOCAL&rdquo; &ldquo;$(if test -f &rdquo;$BASE"; then echo &ldquo;$BASE&rdquo;; else echo &ldquo;$LOCAL&rdquo;; fi)&ldquo; &rdquo;$REMOTE"&rsquo;
git config &mdash;global mergetool.diffmerge.trustExitCode true
{% endcodeblock %}</p>

<p>{% codeblock lang:bash Your git shortcuts are: linenos:false %}</p>

<h1>diff the local file.m against the checked-in version</h1>

<p>git difftool file.m</p>

<h1>diff the local file.m against the version in some-feature-branch</h1>

<p>git difftool some-feature-branch file.m</p>

<h1>diff the file.m from the Build-54 tag to the Build-55 tag</h1>

<p>git difftool Build-54..Build-55 file.m</p>

<h1>To resolve merge conflicts, just run git mergetool:</h1>

<p>git mergetool
{% endcodeblock %}</p>

<p>Thanks <a href="http://twobitlabs.com">Todd</a>, works great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUILDING LLDB on MAC OS X]]></title>
    <link href="http://sushihangover.github.io/building-lldb-on-mac-os-x"/>
    <updated>2014-02-18T08:21:07-08:00</updated>
    <id>http://sushihangover.github.io/building-lldb-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>```
/llvm/tools/lldb/tools/debugserver/source/MacOSX/dbgnub-mig.defs:13:10: fatal error: &lsquo;DNBConfig.h&rsquo; file not found</p>

<h1>include &ldquo;DNBConfig.h&rdquo;</h1>

<pre><code>     ^
</code></pre>

<p>1 error generated.
```</p>

<p>I was trying to build LLDB &lsquo;out-of-source&rsquo; at the same time as LLVM, Polly, cloog, libcxx, etc&hellip; using ninja and got the error above. Missing source from a LLVM sub-project? I really doubted that and was right&hellip;</p>

<blockquote><p>DNBConfig.h is autogenerated by a perl script that is run as a build script in XCode. XCode is responsible for calling the script and setting the include paths correctly to locate it. The file will exist in the derived sources directory in the build folder.</p></blockquote>

<p>Well, the <a href="http://lldb.llvm.org/build.html">LLDB build instructions</a> are <em>clear</em> in that you need to build lldb from Xcode when on OS-X but I &lsquo;assumed&rsquo; that the <em>make</em> would call &ldquo;"xcodebuild -workspace lldb.xcworkspace -configuration Release -scheme LLVB clean build&rdquo; or some like that to build it&hellip; but I assumed wrong :&ndash;( &hellip; thus your ninja/make build will always fail&hellip;</p>

<p>I also can not find a disable option for LLDB when running llvm&rsquo;s &lsquo;configure&rsquo;, so if you have the lldb source in llvm/tools your configure will always include it and thus your build will always fail..?&hellip;</p>

<p>Why is this? Is this due to Apple preventing an <strong><em>un-codesigned</em></strong> version to be built/run on OS-X? Really confused by the whole thing. If someone knows, ping me&hellip; thanks&hellip;</p>

<p>Note: This is only on OS-X, building LLDB that has been included under llvm/tools under Linux/FreeBSD works as expected&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GtkSharp-Explorer Update for Irony]]></title>
    <link href="http://sushihangover.github.io/gtksharp-explorer-update-for-irony"/>
    <updated>2014-02-12T08:14:14-08:00</updated>
    <id>http://sushihangover.github.io/gtksharp-explorer-update-for-irony</id>
    <content type="html"><![CDATA[<p><a href="images/Irony-GtkSharp-Explorer-OS-X-ScreenCap.png">{% img left images/Irony-GtkSharp-Explorer-OS-X-ScreenCap.png  360 240 &lsquo;Irony.GtkSharp.Explorer&rsquo; &lsquo;Irony GtkSharp Explorer&rsquo; %}</a> I was working on a <a href="https://irony.codeplex.com">Irony/C#</a> based DSL that I wrote awhile back and noticed that I had some strange NameSpace issues with the GTK UI (exposed only within Xamarin&rsquo;s Stetic Designer, not sure how those naming conflicts were not a compile time error&hellip;).</p>

<p>Updated source for my Gtk# addition to Irony is on GitHub now. <strong>Remember that my additions are on the &ldquo;gtksharp-explorer&rdquo; branch.</strong>
``` bash
git branch &mdash;all
* master
  remotes/origin/HEAD &ndash;> origin/master
  remotes/origin/gtksharp-explorer
  remotes/origin/master
  remotes/origin/xplat-nunit-fix
git checkout gtksharp-explorer
  Branch gtksharp-explorer set up to track remote branch gtksharp-explorer from origin.
  Switched to a new branch &lsquo;gtksharp-explorer&rsquo;</p>

<p>git branch &mdash;all
* gtksharp-explorer
  master
  remotes/origin/HEAD &ndash;> origin/master
  remotes/origin/gtksharp-explorer
  remotes/origin/master
  remotes/origin/xplat-nunit-fix<br/>
open Irony_All.MonoDevelop.sln
```</p>

<p>==============================</p>

<h1>Grammar Explorer based on Gtk#</h1>

<p><em>For cross-platform Irony work in Mono 3.2.X and MonoDevelop/Xamarin 4.1.X/4.2.X</em>
Instructions for building on Mono:</p>

<h2>Via MonoDevelop/Xamarin IDE:</h2>

<ul>
<li>Release or Debug Targets:
      Load and build via the Irony_All.MonoDevelop.sln
Via cmd line:</li>
</ul>


<hr />

<ul>
<li><p>Release:
xbuild /p:Configuration=Release Irony_All.MonoDevelop.sln
mono Irony.GrammarExplorer.GtkSharp/bin/Release/Irony.GrammarExplorer.GtkSharp.exe</p></li>
<li><p>Debug:
xbuild /p:Configuration=Release Irony_All.MonoDevelop.sln
mono Irony.GrammarExplorer.GtkSharp/bin/Debug/Irony.GrammarExplorer.GtkSharp.exe</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ellcc.org Build Fix for OS-X]]></title>
    <link href="http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x"/>
    <updated>2014-02-12T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x</id>
    <content type="html"><![CDATA[<p>In my ARM Bare Metal searches for using Clang/LLVM I stumbled across <a href="http://ellcc.org">The ELLCC Embedded Compiler Collection</a> that provides a one-stop build enviroment for all the LLVM tools for cross-platform compiling.</p>

<p>I&rsquo;m not sure if they are trying to be a <a href="http://yagarto.org">YAGARTO</a> for LLVM vs. GCC. I waiting for a reply to post on their forum to understand the actual code changes to Clang/LLVM that they include (if any). <del>I will update when I hear back.</del> <strong>(Update: Read Rich&rsquo;s <a href="http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571">full reply</a>, it cleared everything up for me)</strong></p>

<p>{% blockquote Rich <a href="http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571">http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571</a> What is ELLCC all about %}
ELLCC is really just a weekly repackaging of clang/LLVM with two minor additions.
1. The triples of the form -ellcc- (where OS is linux for now, but will include others eventually) control how include files and libraries are found. You might notice for example that the #include path for ELLCC&hellip;
{% endblockquote %}</p>

<p>But in the mean time I figured I give it a build and include it in my GCC/ARM vs. Clang/LLVM-ARM testing but hit a build error on OS-X. On the linking of QEMU, libintl (GNU&rsquo;s gettext) is not found:</p>

<p><code>
LINK  i386-softmmu/qemu-system-i386
ld: library not found for -lintl
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[1]: *** [qemu-system-i386] Error 1
make: *** [subdir-i386-softmmu] Error 2
</code>
I do have gettext on my system, but it is in my &ldquo;Cellar&rdquo;&ldquo; as I use <a href="http://brew.sh">HomeBrew</a> as my package manager and try not to install anything to &rdquo;/usr/bin" or other systems places that can muck everything up and thus can run parrallels versions of different applications (i.e. If I have to &lsquo;sudo&rsquo; to an open-source software install, it is not going on my system unless they have a serious reason for it and I trust the code from a security viewpoint).</p>

<p>FYI: Brew does not &lsquo;hard&rsquo; link gettext as compiling software outside of the HomeBrew can cause problems:</p>

<p>{% blockquote %}
brew link gettext
Warning: gettext is keg-only and must be linked with &mdash;force
Note that doing so can interfere with building software.
{% endblockquote %}</p>

<p>So I mod&rsquo;d the &ldquo;ellcc/gnu/build&rdquo; to force brew to link gettext before compiling/linking qemu and unlink it after.</p>

<p>``` bash
svn diff build</p>

<h1>Index: build</h1>

<p>&mdash;&ndash; build   (revision 3780)
+++ build   (working copy)
@@ -69,6 +69,10 @@</p>

<pre><code> ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sparc-linux-user"
</code></pre>

<p> fi
 echo Configuring package qemu for $targets
+if [!  -e <code>which brew</code> ]; then
+   ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a>)&rdquo;
+fi
+brew link gettext &mdash;force
 qemu_target_list=<code>echo $qemu_target_list | sed -e "s/ /,/g"</code>
 make DIR=src/qemu CC=$cc HCC=$hcc AR=$ar TARGET=$host OS=$os \</p>

<pre><code> targetlist=$qemu_target_list haslibs=$haslibs \
</code></pre>

<p>@@ -76,6 +80,7 @@</p>

<pre><code> qemu.configure || exit 1
</code></pre>

<p> make -C src/qemu || exit 1
+brew unlink gettext</p>

<p> # Finally, install into the target specific bin dir.
 mkdir -p $bindir
```
Everything builds fine after that&hellip;</p>

<p>The entire file is here:
{% gist 8949755 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X LLVM / CLANG Build]]></title>
    <link href="http://sushihangover.github.io/os-x-llvm-slash-clang-build"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/os-x-llvm-slash-clang-build</id>
    <content type="html"><![CDATA[<p>I wanted to test out some C code that I am writting for a ARM Bare Metal (Embedded) project in QEMU (qemu-system-arm) and normally would just use the <a href="https://launchpad.net/gcc-arm-embedded">GNU Tools for ARM Embedded Processors</a> but I was wondering what the current state of LLVM is for cross-compiling to bare-metal ARM.</p>

<p>Since this is a new area for me and I am having a <strong>dang hard time</strong> finding what is and isn&rsquo;t supported in CLang/LLVM for embedded ARM development, I figured I would compile the latest version and see the difference in code that gets produced between the gcc and Clang compilers.</p>

<p>Thus I needed to latest and greatest Clang/LLVM and did not feel like nurse-maiding a huge git download and long compile session, so I spent a minute and hacked up a really simple script so I could catch up on &ldquo;Game of Thrones&rdquo; ;&ndash;)</p>

<p>{% gist 8946898 %}</p>

<p>FYI: <a href="http://clang.llvm.org/docs/CrossCompilation.html">Cross-compilation using Clang</a></p>
]]></content>
  </entry>
  
</feed>
