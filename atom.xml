<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SushiHangover]]></title>
  <link href="http://sushihangover.github.io/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-07-17T10:56:36-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git - Squash Last X Commits Into One]]></title>
    <link href="http://sushihangover.github.io/git-squash-last-x-commits-into-one/"/>
    <updated>2015-07-17T10:35:06-07:00</updated>
    <id>http://sushihangover.github.io/git-squash-last-x-commits-into-one</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"></p>

<p>Use git rebase -i <after> and replace &ldquo;pick&rdquo; on the second and subsequent commits with &ldquo;squash&rdquo; or &ldquo;fixup&rdquo;, as described in the Git <a href="http://git-scm.com/docs/git-rebase#_interactive_mode">manual</a>.</p>

<p><after> is the commit after the last one that you wish squash together, i.e. parent of the oldest commit you want to squash.</p>

<p>Example:</p>

<p>You want to squash the last three commits into one, so lets look at the log to make sure that you want you want and to grab the commit SHA:</p>

<blockquote><p>git log -n 4 &ndash;pretty=oneline</p></blockquote>

<pre><code>f57f7f9c28646d5049aa6b90f33de23e1e53ad2e More test cleanups
07074c8058ed69224670987860c9db47858dab6e PlayScript compiler tests using a variant of compiler-tester
3b80dc06b990553042b4b0cde486e36522f4171b Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
db6506ca17e49f0829ca9859a7994ddf840dbff4 * Tamarin-Redux Test Cleanup * Remove old Tamarin tests, the redux versions are the last released version
</code></pre>

<p>I want to squash the first three commits, so grab the forth SHA and:</p>

<blockquote><p>git rebase -i db6506ca17e49f0829ca9859a7994ddf840dbff4</p></blockquote>

<pre><code>pick 3b80dc0 Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
pick 07074c8 PlayScript compiler tests using a variant of compiler-tester
pick f57f7f9 More test cleanups

# Rebase db6506c..f57f7f9 onto db6506c (3 command(s))
</code></pre>

<p>Following the directions in the commentted text. In this example: change the second and third items to squash:</p>

<pre><code>pick 3b80dc0 Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
squash 07074c8 PlayScript compiler tests using a variant of compiler-tester
squash f57f7f9 More test cleanups

# Rebase db6506c..f57f7f9 onto db6506c (3 command(s))
</code></pre>

<p>Save those changes and exit the editor and the rebase will execute</p>

<pre><code>[detached HEAD ~~~
~~~
Successfully rebased and updated refs/heads/play-tests.
</code></pre>

<p>Confirm via:</p>

<blockquote><p>git log -n 2</p></blockquote>

<p>FYI: This is something you should do to your feature branch before pushing to your fork to make that <a href="http://github.com/playscriptredux/playscript">PlayScript</a> pull request. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript : Tests Are Now Structured Like Mono's]]></title>
    <link href="http://sushihangover.github.io/playscript-tests-are-now-structured-like-monos/"/>
    <updated>2015-07-16T20:08:45-07:00</updated>
    <id>http://sushihangover.github.io/playscript-tests-are-now-structured-like-monos</id>
    <content type="html"><![CDATA[<p>I <a href="https://github.com/PlayScriptRedux/playscript/pull/8">moved all the .play and .as tests</a> under the play_test directory. They are in two separtate dirs now, <strong>play</strong> for the extended PlayScript language/format and <strong>as</strong> for the standard ActionScript tests.</p>

<p>In doing this and making them conform to how Mono&rsquo;s compiler tests are written and run, I ended up copying the tools/compiler-tester to tools/playc-tester. The number of changes I was making to the program seems out of place to keep in within Mono&rsquo;s version and long term this will keep up with trying to keep any changes to the actual Mono code base at a minimun to allow faster and cleaner merging of their master branch. This tool will have very little commit activity compared to the mcs.exe/playc.exe compilers.</p>

<h3>Playc-tester.exe</h3>

<pre><code>mono playc-tester.exe
PlayScript compiler tester, (C) 2009 Novell, Inc. (C) SushiHangover/RobertN
playc-tester -mode:[pos|neg] -compiler:FILE -files:file-list [options]

   -compiler:FILE   The file which will be used to compiler tests
   -compiler-options:OPTIONS  Add global compiler options
   -il:IL-FILE      XML file with expected IL details for each test
   -issues:FILE     The list of expected failures
   -log:FILE        Writes any output also to the file
   -help            Lists all options
   -mode:[pos|neg]  Specifies compiler test mode
   -safe-execution  Runs compiled executables in separate app-domain
   -update-il       Updates IL-FILE to match compiler output
   -update-ref      Updates the debug xml to match debug compiler mdb output
   -verbose         Prints more details during testing
</code></pre>

<p>Example test run of the current as tests:</p>

<pre><code>make astest
~~~
./as/test-debug-015.as...   NOT TESTED
./as/test-debug-AllowDynamics.as... KNOWN ISSUE (Execution error)
./as/test-debug-DivideByZeroTest.as...      KNOWN ISSUE (Compilation error)
./as/test-debug-UntypedVariableTest.as...   KNOWN ISSUE (Compilation error)
Done

40 test cases passed (93.02%)
1 test(s) ignored
3 known issue(s)
</code></pre>

<p>With these changes and the addition of the playshell REPL in the last set of changes will allow the Tamarin Redux tests to start coming online. Then CI deployment will be the step after that.</p>

<p>As always <a href="https://github.com/PlayScriptRedux/playscript/issues">post</a> any isses that you find. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript - Now Has a REPL (Playshell)]]></title>
    <link href="http://sushihangover.github.io/playscript-now-has-a-repl-playshell/"/>
    <updated>2015-07-15T06:35:49-07:00</updated>
    <id>http://sushihangover.github.io/playscript-now-has-a-repl-playshell</id>
    <content type="html"><![CDATA[<p>PlayScript now has a REPL for ActionScript scripting. This is very <strong>alpha</strong> right now and needs a lot of love. It will be used for running the <a href="http://hg.mozilla.org/tamarin-redux">Tamarin Redux</a> <a href="https://www.mozilla.org/projects/tamarin/">acceptance tests</a> so it will be evolving as those regression tests come online.</p>

<p>It is available in the <a href="https://github.com/PlayScriptRedux/playscript">master branch</a> : 17aac5473528370b96e3349751bd2a8a017e6779</p>

<p>Check it out and post any <a href="https://github.com/PlayScriptRedux/playscript/issues/new">issues</a> that you find.</p>

<pre><code>* Added playshell : This is a PlayScript REPL (aka: like csharp REPL)
  - For use with Tamarin Redux test; they use Asset scripts with a test package
  - Very alpha at this point
  - Need to add PlayScript style 'import'
* Added PsOnlyMode to compiler setting
  - Whether to enable PlayScript compiler only mode. Defaults to false.
* mcs.master.mdw : XS/MD Workspace that will hold Solutions for all mcs
  - Added tools/csharp and tools/playshell
* CSProj files updated via Make2CSProjUpdater to allow use in XS/MD:
  - Mono.PlayScript.csproj (and .sln)
  - Mono.CSharp.csproj (and .sln)
  - tools/charp.csproj (and .sln)
  - tools/playshell.csproj (and .sln)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript Redux - Make2CSProjUpdater]]></title>
    <link href="http://sushihangover.github.io/playscript-redux-make2csprojupdater/"/>
    <updated>2015-07-14T15:06:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-redux-make2csprojupdater</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> I just posted a new tool project on <a href="https://github.com/PlayScriptRedux/Make2CSProjUpdater">Github</a> that I am using with Mono and PlayScript to make things easier with Xamarin Studio / MonoDevelop.</p>

<h2>Make2CSProjUpdater</h2>

<h4>Update the .csproj ItemGroup/Compile elements from a sourcefile list.</h4>

<p>This project takes a source list of file, usually from an external Makefile source (i.e. Mono.CSharp.dll.sources) and a C# (.csproj) project file and will update/sync the source list into the project file.</p>

<p>As an author of the <a href="http://github.com/playscriptredux/playscript">PlayScript Redux</a> project, there are a large number of Mono .csproj files that are not keep up to date with the Makefile source lists. The Makefile source lists are a known good source as they are used to build Mono and the project files are not used in that capicity. But in development and debugging of the Mono Compiler (mcs.exe) and PlayScript Compiler (playc.exe), the use of Xamarian Studio / MonoDevelop IDE makes life so much easier and thus the need for up to date project (.csproj) files. :-)</p>

<p>Note: This project is generic, just a text file containing a list of filenames and a .csproj file.</p>

<p>Note: Found another use; dumping a list of files via find/ls/etc. to a file and updating a blank project file with that source. This provided a quick jumpstart for a few projects that did not include project files or were so outdated that the project files had to be recreated.</p>

<h3>Usage:</h3>

<pre><code>make2csprojupdater.exe -h
Make2CSProjectUpdate / ©SushiHangover 2015
Update the .csproj ItemGroup/Compile elements from a sourcefile list.

Options:
  -p, --proj=VALUE           The project filename (.csproj) to update.
  -s, --sources=VALUE        The filename of the Makefile source list.
  -i, --interactive          Confirmation prompt to update/save the project
                               file.
  -v, --verbose              Increase message verbosity.
  -h, --help                 Show this message and exit
</code></pre>

<p>Sample Usage:</p>

<pre><code>  mono make2csprojupdater.exe -p Sample/Mono.CSharp.csproj -s Sample/Mono.CSharp.dll.sources -v -i
# Make source files : 68
# Project source files  : 58

# Project needs the following changes    : Sample/Mono.CSharp.csproj
# Delete:   ..\..\mcs\doc-bootstrap.cs
# Delete:   cs-parser.cs
# Delete:   ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Add:  ../../mcs/ps-lang.cs
# Add:  ../../mcs/ps-tokenizer.cs
# Add:  ../../mcs/ps-codegen.cs
# Add:  ../../mcs/cxx-emit.cs
# Add:  ../../mcs/cxx-target.cs
# Add:  ../../mcs/inliner.cs
# Add:  ../../mcs/intrinsics.cs
# Add:  ../../mcs/js-emit.cs
# Add:  ../../mcs/js-target.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Add:  ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Add:  ../../build/common/Consts.cs
# Add:  ../../mcs/cs-parser.cs
# Add:  ../../mcs/ps-parser.cs
# Add:  Assembly/AssemblyInfo.cs

Make changes? [y/n]:y
# Saving backup:    Sample/Mono.CSharp.csproj.bak
# Deleting: ..\..\mcs\doc-bootstrap.cs
# Deleting: cs-parser.cs
# Deleting: ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Adding:   ../../mcs/ps-lang.cs
# Adding:   ../../mcs/ps-tokenizer.cs
# Adding:   ../../mcs/ps-codegen.cs
# Adding:   ../../mcs/cxx-emit.cs
# Adding:   ../../mcs/cxx-target.cs
# Adding:   ../../mcs/inliner.cs
# Adding:   ../../mcs/intrinsics.cs
# Adding:   ../../mcs/js-emit.cs
# Adding:   ../../mcs/js-target.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Adding:   ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Adding:   ../../build/common/Consts.cs
# Adding:   ../../mcs/cs-parser.cs
# Adding:   ../../mcs/ps-parser.cs
# Adding:   Assembly/AssemblyInfo.cs
# Saving project:   Sample/Mono.CSharp.csproj
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Turn Multiple Commits Into a Single Commit]]></title>
    <link href="http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit/"/>
    <updated>2015-06-30T18:10:36-07:00</updated>
    <id>http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> Getting ready for an upstream pull request? You really need to turn it into a single commit for a clean request that will result in a fast-forward merge.</p>

<h3>Switch to the upstream/master branch and make sure you are up to date.</h3>

<pre><code>git checkout master
git fetch upstream/master   
git merge master
</code></pre>

<h3>Create a new feature/topic branch:</h3>

<pre><code>git checkout -b MyPullRequest
git merge MyMultiCommitBranch
</code></pre>

<h3>Reset the branch to origin&rsquo;s state.</h3>

<pre><code>git reset origin/MyPullRequest
git status
</code></pre>

<p><strong>Note: Git now considers all changes as unstaged changes.</strong></p>

<h3>We can add these changes as one commit.</h3>

<pre><code>git add --all
git commit
</code></pre>

<p>You can push those changes to your remote repo and then issue that pull request to the upstream that you forked from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Create a New Branch With Non-commited Changes]]></title>
    <link href="http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes/"/>
    <updated>2015-06-29T05:28:05-07:00</updated>
    <id>http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> Have you started making changes and than realize that you should have created a new branch first. Well, there is a slick way to create a new branch and have those changes &lsquo;moved&rsquo; to from master to your topic (the new branch).</p>

<pre><code>git branch newbranch
git reset --hard HEAD
git checkout newbranch
</code></pre>

<p>This works even if you have made commits to your local branch, just subsititute <strong>HEAD</strong> with the number of commits back you would like to go, i.e. <strong>HEAD~2</strong>, or use the SHA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X + Mono + Rosyln + CodeFormatter]]></title>
    <link href="http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter/"/>
    <updated>2015-06-25T06:20:17-07:00</updated>
    <id>http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter</id>
    <content type="html"><![CDATA[<p>CodeFormatter is a tool that uses Roslyn to automatically rewrite the source to follow Microsoft&rsquo;s coding styles, which are <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-style.md">documented here</a>.</p>

<p>CodeFormatter has been released as open-source for 6 months now, but I have not had a chance to look at it.</p>

<p>With Roslyn compiling on OS-X and I had a couple of projects that really needed to be cleaned up, I thought I would give it a try.</p>

<p>15 minutes in total to clone the repo and get things built properly, would have been quicker but the VS solution file is not very Xamanin Studio/MonoDevelop friendly as it includes ToolVersion 14 items (That would be included in VS 2015 beta).</p>

<p>But those projects are not needed to get the main program working&hellip;</p>

<h3>mono ./CodeFormatter.exe</h3>

<pre><code>Must specify at least one project / solution / rsp to format
CodeFormatter [/file:&lt;filename&gt;] [/lang:&lt;language&gt;] [/c:&lt;config&gt;[,&lt;config&gt;...]&gt;]
    [/copyright:&lt;file&gt; | /nocopyright] [/tables] [/nounicode]
    [/rule(+|-):rule1,rule2,...]  [/verbose]
    &lt;project, solution or response file&gt;

    /file        - Only apply changes to files with specified name
    /lang        - Specifies the language to use when a responsefile is
                   specified. i.e. 'C#', 'Visual Basic', ... (default: 'C#')
    /c           - Additional preprocessor configurations the formatter
                   should run under.
    /copyright   - Specifies file containing copyright header.
                   Use ConvertTests to convert MSTest tests to xUnit.
    /nocopyright - Do not update the copyright message.
    /tables      - Let tables opt out of formatting by defining
                   DOTNET_FORMATTER
    /nounicode   - Do not convert unicode strings to escape sequences
    /rule(+|-)   - Enable (default) or disable the specified rule
    /rules       - List the available rules
    /verbose     - Verbose output
</code></pre>

<h3>mono ./CodeFormatter.exe /rules</h3>

<pre><code>Name                 Description
==============================================
BraceNewLine         :Ensure all braces occur on a new line
Copyright            :Insert the copyright header into every file
NewLineAbove         :Ensure there is a new line above the first namespace and using in the file
CustomCopyright      :Remove any custom copyright header from the file
UsingLocation        :Place using directives outside namespace declarations
UnicodeLiterals      :Use unicode escape sequence instead of unicode literals
ExplicitVisibility   :Ensure all members have an explicit visibility modifier
IllegalHeaders       :Remove illegal headers from files
FormatDocument       :Run the language specific formatter on every document
ExplicitThis         :Remove explicit this/Me prefixes on expressions except where necessary
ReadonlyFields       :Mark fields which can be readonly as readonly
FieldNames           :Prefix private fields with _ and statics with s_
</code></pre>

<p> I&rsquo;ll be checking next to see if it really works on some source code. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - NUnit Hello World]]></title>
    <link href="http://sushihangover.github.io/mono-nunit-world-world/"/>
    <updated>2015-06-24T22:11:16-07:00</updated>
    <id>http://sushihangover.github.io/mono-nunit-world-world</id>
    <content type="html"><![CDATA[<p>From my Answer for &ldquo;<a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Run NUnit test on Ubuntu from command line</a>&rdquo; on <a href="http://stackoverflow.com/questions/31038629/run-nunit-test-on-ubuntu-from-command-line/31041709#31041709">Stackoverflow</a>:</p>

<p>Lets start from the beginning:</p>

<p>Get the latest and greatest NUnit <strong>AND</strong> it&rsquo;s Runner tools</p>

<pre><code>curl https://api.nuget.org/downloads/nuget.exe -o nuget.exe
mono nuget.exe install NUnit
mono nuget.exe install NUnit.Runners
</code></pre>

<p>Make sure the mono is finding those assemblies <strong>first</strong> (vs the GAC)</p>

<pre><code>export MONO_PATH=$(PWD)/NUnit.Runners.2.6.4/tools;$(PWD)/NUnit.2.6.4/lib
</code></pre>

<p>Create your test example (save it to vi OnlyTest.cs):</p>

<pre><code>using System;
using System.Text;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public class OnlyTest
{
    [Test]
    public void MyTest() 
    {
        int a = 10;
        Assert.AreEqual(10, a);
    }
}
</code></pre>

<p> Compile it:</p>

<pre><code>  mcs OnlyTest.cs -target:library -r:NUnit.2.6.4/lib/nunit.framework.dll -out:OnlyTest.dll
</code></pre>

<p>Run it:</p>

<pre><code>mono ./NUnit.Runners.2.6.4/tools/nunit-console.exe OnlyTest.dll -noresult
</code></pre>

<p>Output:</p>

<pre><code>Using default runtime: v4.0.30319
NUnit-Console version 2.6.4.14350
Copyright (C) 2002-2012 Charlie Poole.
Copyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.
Copyright (C) 2000-2002 Philip Craig.
All Rights Reserved.

Runtime Environment -
   OS Version: Unix 14.3.0.0
  CLR Version: 4.0.30319.17020 ( Mono 4.0 ( 4.3.0 (master/b044a27 Thu Jun 18 15:17:08 PDT 2015) ) )

ProcessModel: Default    DomainUsage: Single
Execution Runtime: mono-4.0
.
Tests run: 1, Errors: 0, Failures: 0, Inconclusive: 0, Time: 0.0280499 seconds
  Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Review a Merge Before Committing]]></title>
    <link href="http://sushihangover.github.io/git-review-a-merge-before-committing/"/>
    <updated>2015-06-24T09:44:07-07:00</updated>
    <id>http://sushihangover.github.io/git-review-a-merge-before-committing</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> After you perform a fetch on an upstream or someone&rsquo;s forked repo, you want to review the changes before committing them.</p>

<p>You can not do a what-if or a dry-run merge but it does not matter as git is your friend in this matter. Just do the merge and review it, BUT, do not let it commit or fast forward during the merge.</p>

<pre><code>git merge --no-commit --no-ff branchname
</code></pre>

<p>Without the <strong>&ndash;no-ff</strong> flag, if Git can do a fast-forward then it will do that and commit anyway <em>despite</em> the &ndash;no-commit flag.</p>

<p>Setup an alias in your ~/.gitconfig for a simple shortcut</p>

<pre><code>review = merge --no-ff --no-commit
</code></pre>

<p>So in looking at upstream changes:</p>

<pre><code>git fetch upstream
git review upstream/master
git status
</code></pre>

<p>If you wish to back those changes, just reset that merge:</p>

<pre><code>git reset --merge
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git : Your Github Based Fork's Pull Request Is Rejected, Kind-of, Now What?]]></title>
    <link href="http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what/"/>
    <updated>2015-06-24T07:46:41-07:00</updated>
    <id>http://sushihangover.github.io/git-your-githubs-fork-pull-request-is-rejected-kind-of-now-what</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> So you have a Github fork of a project and you find a problem. You whip up a fix, commit it in a local branch and push it to your fork you Github. Than you issue a pull request to the upstream repo. Life is good. <img class="right" src="http://sushihangover.github.io/images/github_logo.png"></p>

<p>But&hellip; your pull request is &lsquo;rejected&rsquo;, kind-of, as the fix is applied differently to their branch. Now your GitHub and local repo are history mismatched to the upstream master. Fetching upstream and merging upstream/master produces conflicts ;-(</p>

<p>First, I do not want to lose the commit that I did do. I want to keep the work/history so a &lsquo;simple&rsquo; git hard reset to a prior sha is out of the question.</p>

<p>So lets put your changes on a new branch and reset the master branch back to match the upstream.</p>

<h3>Move last commit to a new branch</h3>

<p>Note: You <em>will</em> lose uncommitted work, stash first if needed!</p>

<pre><code>git branch newbranch
git reset --hard HEAD~1 # Go back 1 commit or use SHA
git checkout newbranch
</code></pre>

<h3>Re-sync your Github fork</h3>

<p>Now, lets get everything re-sync&rsquo;d.</p>

<pre><code>git checkout master
</code></pre>

<p>Since you already push this branch to your Github fork, you will see the message:</p>

<pre><code>"Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded."
</code></pre>

<p>That contains <em>your</em> fix, but you need to merge in the upstream/master changes.</p>

<pre><code>git fetch upstream
git merge upstream/master
</code></pre>

<p>And your local master should <em>Fast-forward</em> to match the upstream. All is good, except your repo on Github is not correct as it contains your original commit on the wrong branch.</p>

<pre><code>git push --force
</code></pre>

<p>If you want to keep (backup) that new branch to Github than use the following instead:</p>

<pre><code>git push --all --force
</code></pre>

<p><strong>Note:</strong> You should not be forcing a push if others have already pulled from your repo/fork. That causes bad git mojo and everyone else that pulled your repo will need to be notified that you &lsquo;changed&rsquo; history&hellip; That is a git fixup story for another day.</p>

<h3>Moral of the story:</h3>

<p>Create a bugfix branch with your fixes. It should have one commit (rebase if needed) that will fast-forward and issue your pull-request from that branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# - Native Interop Helloworld]]></title>
    <link href="http://sushihangover.github.io/c-number-native-interop-helloworld/"/>
    <updated>2015-06-23T18:40:28-07:00</updated>
    <id>http://sushihangover.github.io/c-number-native-interop-helloworld</id>
    <content type="html"><![CDATA[<h4>The simplest Interop case HelloWorld I can create, give it a try and see what happens:</h4>

<p><code>&gt;cat countbyone.cpp</code></p>

<pre><code>extern "C" int SomeMethod(int num) {
  return num++;
}
</code></pre>

<p><strong>Compile your shared library:</strong></p>

<ul>
<li>Linux:
<code>gcc -g -shared -fPIC countbyone.cpp -o libcountbyone.so</code></li>
<li>OS-X:
<code>clang -dynamiclib countbyone.cpp -o libcoutbyone.dylib</code></li>
</ul>


<p><code>&gt;cat interop.cs</code></p>

<pre><code>using System;
using System.Runtime.InteropServices;
namespace InteropDemo
{
    class MainClass
    {
        [DllImport("countbyone")]
        private static extern int SomeMethod(int num);

        public static void Main (string[] args)
        {
            var x = SomeMethod(0);
            Console.WriteLine(x);
        }
    }
}
</code></pre>

<p><strong>Compile your .Net/Mono app:</strong></p>

<p><code>&gt;mcs interop.cs</code></p>

<p><strong>Run it:</strong></p>

<pre><code>&gt;mono interop.exe
1
</code></pre>

<p><strong>Output should be 1 and no errors&hellip;</strong></p>

<h4>If the shared (native) library is not found, you receive:</h4>

<p><code>XXXXX failed to initialize, the exception is: System.DllNotFoundException
</code></p>

<h4>If you have a entry point mismatch you would receive a:</h4>

<p><code>XXXXX failed to initialize, the exception is: System.EntryPointNotFoundException
</code></p>

<p>From my answer on <a href="http://stackoverflow.com/questions/31013147/check-if-p-invoke-was-successful/31015964#31015964">Stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono - Code Coverage Using the New Coverage Filter]]></title>
    <link href="http://sushihangover.github.io/mono-code-coverage-using-the-new-coverage-filter/"/>
    <updated>2015-06-15T21:33:29-07:00</updated>
    <id>http://sushihangover.github.io/mono-code-coverage-using-the-new-coverage-filter</id>
    <content type="html"><![CDATA[<h2>New code coverage filter:</h2>

<p>Using the new coverage filter on the mono log profiler, you can get output like this:</p>

<pre><code>Coverage Summary:
    xCorFlags (/Users/administrator/monocov/lib/xCorFlags.exe) 26% covered (42 methods - 11 covered)
        &lt;Module&gt; ?% covered (0 methods - 1 covered)
        CorFlags.CorFlagsSettings 25% covered (4 methods - 1 covered)
        CorFlags.MainClass 50% covered (2 methods - 1 covered)
        CorFlags.CommandLineParser 40% covered (20 methods - 8 covered)
</code></pre>

<blockquote><p>Having a suite of existing unit-tests, you can enable the coverage filter and get some quick answers to your question about how much code you are really exercising and testing.</p></blockquote>


<h2>Background:</h2>

<p>Well, it appears that Xamarin has removed the &lsquo;internal&rsquo; cov profiler and monocov will not produce any output (besides mono actually loading the shared library, no functions are called) as the api has changed.</p>

<p>They have added a code coverage filter (Apr 7 2015) to the core log profilers and while I could not find any published documentation(?). It is easy enough to enable.</p>

<pre><code>--profile=log:coverage

coverage             enable collection of code coverage data
covfilter=ASSEMBLY   add an assembly to the code coverage filters
                     add a + to include the assembly or a - to exclude it
                     filter=-mscorlib
covfilter-file=FILE  use FILE to generate the list of assemblies to be filtered
</code></pre>

<p>Git log info on cov removal and log coverage filter addition:</p>

<pre><code>commit 16570265149730ec6a4760cc0fa34decc1a9d981
Author: Alex Rønne Petersen &lt;alexrp@xamarin.com&gt;
Date:   Tue Apr 7 14:51:27 2015 +0200
        [profiler] Remove old mono-cov profiler.
        We're replacing this with coverage support in the log profiler.

commit e91693fbb87f687a2fdb5a495c945c1872b3066c
Author: iain holmes &lt;iain@xamarin.com&gt;
Date:   Fri Feb 27 10:13:54 2015 +0000
        [cov] Install a coverage filter
</code></pre>

<p>If you are still using Mono 3.x, then my other MonoCov post as it would still work:</p>

<ul>
<li><a href="http://sushihangover.github.io/monocov-building-on-os-x/">http://sushihangover.github.io/monocov-building-on-os-x/</a></li>
<li><a href="http://stackoverflow.com/questions/30847262/how-to-build-and-use-monocov-on-a-mac/30853374#30853374">http://stackoverflow.com/questions/30847262/how-to-build-and-use-monocov-on-a-mac/30853374#30853374</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp - 64-bit NCurses on OS-X and Mono]]></title>
    <link href="http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono/"/>
    <updated>2015-06-15T21:07:53-07:00</updated>
    <id>http://sushihangover.github.io/cursessharp-64-bit-ncurses-on-os-x-and-mono</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/FireworksDemo.gif">CursesSharp is a C# wrapper for curses library.</p>

<ul>
<li>The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.</li>
<li>The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</li>
</ul>


<p>I updated this to work for &lsquo;modern&rsquo; autotools so allow autoreconf and configure to actual run without throwing errors and then I updated the Makefile.am&rsquo;s files to allow compiling under OS-X and with Mono 4.0.x. Linux and Windows should still work, but I have not at this time tested those other flavors.</p>

<p>Let me know via Github <a href="https://github.com/sushihangover/CursesSharp/issues/new">issues</a> if you have any problems. ;-)</p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X. The build <img class="right" src="http://sushihangover.github.io/images/RainDemo.gif">CursesSharp is a C# wrapper for curses library.
process has been tested on 10.10.3 using Apple LLVM version 6.1.0 and a Mono 4.0.1 64-bit build.</p>

<h3>0. Prerequisites</h3>

<ol>
<li>Subversion - if you intend to build CursesSharp from SVN repository. If you use the source code package, you don&rsquo;t need Subversion.</li>
<li>autoconf/automake/libtool - only if you are building from SVN. You don&rsquo;t need these tools if you use the source code package.</li>
<li>Standard development tools - a C compiler (e.g. GCC) and GNU make (gmake).</li>
<li>Ncurses library and headers (development files) - typically this package is called ncurses-dev.</li>
<li>Mono - the .NET runtime and development framework</li>
<li>pkg-config - typically required by Mono, but make sure it&rsquo;s installed</li>
</ol>


<h3>1. Getting CursesSharp</h3>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<p>Original SVN Repo:</p>

<pre><code>https://curses-sharp.svn.sourceforge.net/svnroot/curses-sharp/trunk
</code></pre>

<p>The following section describes the former case. If you downloaded the source code package, extract it and you may skip to step 4.</p>

<p><img class="left" src="http://sushihangover.github.io/images/UnicodeDemo.gif"></p>

<h3>2. Git clone</h3>

<p>Execute the following command:</p>

<pre><code>git clone https://github.com/sushihangover/CursesSharp.git cursessharp
</code></pre>

<p><em>You may substitute the final cursessharp for any other directory of your liking.</em></p>

<h3>3. Bootstrapping</h3>

<p>In order to proceed with the build, you will have to create the configure script. Cd into the directory containing CursesSharp sources and execute the following command:</p>

<p>brew link gettext &ndash;force  <br/>
autoreconf -if</p>

<h3>4. Configure</h3>

<p>In the top source directory execute the command:</p>

<pre><code>LIBS="-lncurses -liconv -lpanel" ./configure
</code></pre>

<p>By default CursesSharp is installed in /usr/local. To change the target directory,<strong> which you really should do,</strong> you can use the &ldquo;&ndash;prefix=&rdquo; option:</p>

<pre><code># Following all on one line:    
LIBS="-lncurses -liconv -lpanel" ./configure --prefix=$HOME/cursessharp
</code></pre>

<p>You can also use other options. For a complete list execute:</p>

<pre><code>./configure --help
</code></pre>

<h4>5. Make</h4>

<p>After you executed configure, run (in the same directory):</p>

<pre><code>#I am using a locally built/installed 64-bit version of mono, so I add it to the path
export PATH=/Users/administrator/mono/mono-llvm-64/bin:$PATH
make
# remove brew's version of gettext 
brew unlink gettext
</code></pre>

<p>To compile the source code.</p>

<h3>6. Installation</h3>

<p>Execute the command:</p>

<pre><code>make install
</code></pre>

<p>This will install CursesSharp. Make sure you have appropriate privileges.</p>

<h3>7. Testing</h3>

<p>By default CursesSharp will install a few demonstration programs. At this time, these are: FireworkDemo and RainDemo. You can try running the demos to check if CursesSharp works.</p>

<p>Running the demos:</p>

<p>Add your cursessharp&rsquo;s bin install location to your path, i.e.</p>

<pre><code>export PATH=$HOME/cursessharp/bin:$PATH
</code></pre>

<p>And you can run them from anywhere:</p>

<pre><code>RainDemo
FireworksDemo
UnicodeDemo
</code></pre>

<p>Have fun ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoCov - Building on OS-X]]></title>
    <link href="http://sushihangover.github.io/monocov-building-on-os-x/"/>
    <updated>2015-06-15T10:52:29-07:00</updated>
    <id>http://sushihangover.github.io/monocov-building-on-os-x</id>
    <content type="html"><![CDATA[<p>My <a href="http://stackoverflow.com/questions/20757444/how-to-compile-c-sharp-code-to-64-bit-in-xamarin-studio-on-os-x/30714801#30714801">answer</a> from Stackoverflow on compiling MonoCov on OS-X and Mono 4.0.x</p>

<pre><code># Clone the MonoCov repo
git clone https://github.com/mono/monocov.git MonoCov
cd MonoCov
# A really old version of cecil and it not available as a nuget
curl http://go-mono.com/archive/cecil/cecil-0.6-bin.zip -o cecil-0.6-bin.zip
unzip cecil-0.6-bin.zip
# Make sure configure can find the Mono.Option source file
export PKG_CONFIG_PATH=/Library/Frameworks/Mono.framework/Versions/4.0.1/lib:/Library/Frameworks/Mono.framework/Versions/4.0.1/lib/pkgconfig:$PKG_CONFIG_PATH
export 
# Config to install to users home dir
/configure --cecil=$PWD/monocov/cecil-0.6/Mono.Cecil.dll --prefix $HOME/monocov
# Fix Makefile, gmcs no longer exists under Mono 4.x and Makefile is hard coded
sed -i.bak s/gmcs/mcs/g Makefile
# Pass -m32 to make since OS-X Mono framework is still 32-bit
CC="cc -m32" make
# Install does not properly create bin dir, do it before the first install
mkdir $HOME/monocov/bin
# Install..
make install
</code></pre>

<h2>Compile a test app and test MonoCov:</h2>

<pre><code>// Save this to a file named Program.cs
using System;
namespace Foobar
{
    class MainClass
    {
        public static void Main (string[] args)
        {
            Console.WriteLine ("Hello MonoCov");
        }
    }
}
</code></pre>

<h2>Profile a Mono (.Net) application</h2>

<pre><code># Compile a sample app
mcs Program.cs
# Update path to include MonoCov so mono can load it as a profiler
export PATH=$HOME/monocov:$PATH
mono --debug --profile=monocov Program.exe
</code></pre>

<h2>Launch the MonoCov GUI</h2>

<pre><code># GUI Framework DllNotFoundException fix (if needed)
export DYLD_FALLBACK_LIBRARY_PATH="/Library/Frameworks/Mono.framework/Versions/Current/lib:/usr/local/lib:/usr/lib"
# Update path to include MonoCov
export PATH=$HOME/monocov/bin:$PATH
monocov
</code></pre>

<p><a href="http://www.mono-project.com/docs/debug+profile/profile/code-coverage/">Mono Code Coverage Profiler : MonoCov</a></p>

<p><a href="http://evain.net/blog/articles/2007/10/05/mono-cecil-0-6">Mono.Cecil 0.6 05 Oct 2007</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corflags - Release xCorFlags Version 1.0.5643.36015]]></title>
    <link href="http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015/"/>
    <updated>2015-06-15T06:09:45-07:00</updated>
    <id>http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-36015</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sushihangover/CorFlags/releases/tag/v1.0.5643.36015">xCorFlags Version 1.0.5643.36015</a></h1>

<p>Maintenance release of the cross-platform CorFlags Conversion Tool is up on  <a href="https://github.com/sushihangover/corflags">Github</a>.</p>

<pre><code>git log v1.0.5643.30429..v1.0.5643.36015
commit 0125dffeda467b70e869b898d05203aba3669e88
Author: SushiHangover &lt;sushihangover@outlook.com&gt;
Date:   Sun Jun 14 20:06:00 2015 -0700

Fix absolute paths to the assemblies that are passed in
</code></pre>

<p>This is a cross-platform version of the Microsoft CorFlags tool that is included in the .Net Framework SDK installations and is a self-contained x86 CIL Image (via <a href="https://github.com/gluck/il-repack">ILRepack</a>) that runs on:</p>

<ul>
<li>Windows (xCorFlags)</li>
<li>OS-X (mono ./xCorFlags.exe)</li>
<li>Linux (mono ./xCorFlags.exe)</li>
</ul>


<p>For additional information:</p>

<ul>
<li><a href="">https://github.com/sushihangover/corflags</a></li>
<li><a href="">https://github.com/sushihangover/CorFlags/blob/master/README.md</a></li>
<li><a href="">http://sushihangover.github.io/blog/categories/corflags/</a></li>
<li><a href="">https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corflags - Release xCorFlags Version 1.0.5643.30429]]></title>
    <link href="http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-30429/"/>
    <updated>2015-06-14T19:09:45-07:00</updated>
    <id>http://sushihangover.github.io/corflags-release-xcorflags-version-1-dot-0-5643-dot-30429</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/sushihangover/CorFlags/releases/tag/v1.0.5643.30429">xCorFlags Version 1.0.5643.30429</a></h1>

<p>The first full release of the cross-platform CorFlags Conversion Tool is up on  <a href="https://github.com/sushihangover/corflags">Github</a>.</p>

<p>This is a cross-platform version of the Microsoft CorFlags tool that is included in the .Net Framework SDK installations and is a self-contained x86 CIL Image (via <a href="https://github.com/gluck/il-repack">ILRepack</a>) that runs on:</p>

<ul>
<li>Windows (xCorFlags)</li>
<li>OS-X (mono ./xCorFlags.exe)</li>
<li>Linux (mono ./xCorFlags.exe)</li>
</ul>


<p>For additional information:</p>

<ul>
<li><a href="">https://github.com/sushihangover/corflags</a></li>
<li><a href="">https://github.com/sushihangover/CorFlags/blob/master/README.md</a></li>
<li><a href="">http://sushihangover.github.io/blog/categories/corflags/</a></li>
<li><a href="">https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Set Up a Fetch-only Remote | Disabling Push]]></title>
    <link href="http://sushihangover.github.io/git-set-up-a-fetch-only-remote/"/>
    <updated>2015-06-14T14:57:37-07:00</updated>
    <id>http://sushihangover.github.io/git-set-up-a-fetch-only-remote</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> The PlayScript repo on the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> Github organization I maintain is a down-stream fork of <a href="https://github.com/mono/mono">Mono</a> so I can fetch the changes to their master branch. I also have my own <a href="https://github.com/sushihangover/playscript">fork</a> of the PlayScript repo so I can code, issue pull-requests and review other people&rsquo;s pull-requests. But I do not want to screw up and push directly to the <a href="https://github.com/PlayScriptRedux/playscript">Redux based repo</a> from my local repo, only my own fork on GitHub. Also I do not have any push permissions on the Mono repo and want to not even have git try to push to that repo if I screw up on the cmd line.</p>

<p>So after adding my additional remotes my local repo, it looks like this:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   https://github.com/PlayScriptRedux/playscript.git (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    https://github.com/mono/mono.git (push)
</code></pre>

<p>I want to keep the fetch/pull ability from the redux and upstream remotes and remove the  &lsquo;push&rsquo; ability to those remotes.</p>

<p>You can not totally clear the push uri as it will be replaced with the fetch uri. So setting the push uri to something nonexistent works, i.e.</p>

<pre><code> git remote set-url --push upstream DISABLE
 git remote set-url --push redux DISABLE
</code></pre>

<p>And to see what that looks like now:</p>

<pre><code>git remote -v
origin  https://github.com/sushihangover/playscript.git (fetch)
origin  https://github.com/sushihangover/playscript.git (push)
redux   https://github.com/PlayScriptRedux/playscript.git (fetch)
redux   DISABLE (push)
upstream    https://github.com/mono/mono.git (fetch)
upstream    DISABLE (push)
</code></pre>

<p>Now if you push to the one of the &lsquo;disable&rsquo; remotes, you will recieve the following error:</p>

<pre><code>git push redux
fatal: 'DISABLE' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>NOTE: You do not have to use &ldquo;DISABLE&rdquo;, any nonsensical URI will do. I like DISABLE as seeing it in the git push error message is a clear indicator of the brain fart that I just typed&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CorFlags Conversion Tool - Cross-platform Release on Github]]></title>
    <link href="http://sushihangover.github.io/corflags-cross-platform-release-on-github/"/>
    <updated>2015-06-14T11:24:42-07:00</updated>
    <id>http://sushihangover.github.io/corflags-cross-platform-release-on-github</id>
    <content type="html"><![CDATA[<p>I posted the first (alpha) release of a cross-platform version of Microsoft&rsquo;s CorFlags Conversion tool to<a href="https://github.com/sushihangover/CorFlags"> Github</a>.</p>

<p>This alpha release is read-only and while accepting argument flags to change the CIL image, you will receive a not implemented exception:</p>

<pre><code>corflags : Error CF0999: Unknown exception: The requested feature is not implemented.
</code></pre>

<p>The next release will be feature complete as I just needed to get a backup of the current version to Github for now.</p>

<h1><strong>Repo Readme:</strong></h1>

<h1>xCorFlags.exe (CorFlags Conversion Tool)</h1>

<h2>Mono and .NET Framework 4.5</h2>

<h3>The CorFlags Conversion tool allows you to configure the CorFlags section of the header of a portable executable image.</h3>

<p>This is a <strong>cross-platform</strong> version of the <a href="https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">Microsoft CorFlags</a> tool that is included in the .Net Framework SDK installations.</p>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/ms164699%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">MSDN Documentation for CorFlag.exe</a></li>
</ul>


<p>This xplat version strives to be argument option and output compatible (using /nologo) with the Microsoft version.</p>

<p>*Note: Platform independent argument prefixes can be used: <strong>&lsquo;/&rsquo; or &lsquo;-&rsquo;</strong> *</p>

<h2>Usage:</h2>

<pre><code>Mono/.NET Framework CorFlags Conversion Tool.  Version  0.9.5643.21314
Copyright (c) SushiHangover.  All rights reserved.

Windows Usage: xCorflags.exe Assembly [options]
 X-Plat Usage: mono xcorflags.exe Assembly [options]

If no options are specified, the flags for the given image are displayed.

     Options: (/ or - prefixed
     /ILONLY+ /ILONLY-       Sets/clears the ILONLY flag
     /32BITREQ+ /32BITREQ-   Sets/clears the bits indicating 32-bit x86 only
     /32BITPREF+ /32BITPREF- Sets/clears the bits indicating 32-bit preferred
     /UpgradeCLRHeader       Upgrade the CLR Header to version 2.5
     /RevertCLRHeader        Revert the CLR Header to version 2.0
     /Force                  Force an assembly update even if the image is
         strong name signed.
         WARNING: Updating a strong name signed assembly
         will require the assembly to be resigned before
         it will execute properly.
     /nologo                 Prevents corflags from displaying logo
</code></pre>

<h2>Output:</h2>

<p>When running with the nologo option, the output should be compatible with Microsoft&rsquo;s version, a nice to have for those who already are used the output to CorFlags.exe or those that have existing scripts.</p>

<pre><code>mono ./CorFlags.exe /nologo CorFlags.exe
Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x3
ILONLY    : 1
32BITREQ  : 1
32BITPREF : 0
Signed    : 0
</code></pre>

<h2>Without using the nologo argument:</h2>

<pre><code>mono ./CorFlags.exe CorFlags.exe SudoKnights.exe
Mono/.NET Framework CorFlags Conversion Tool.  Version  0.9.5643.21314
Copyright (c) SushiHangover.  All rights reserved.

Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x20003
ILONLY    : 1
32BITREQ  : 1
32BITPREF : 1
Signed    : 0
</code></pre>

<h3>versus:</h3>

<pre><code>PS&gt; .\CorFlags.exe .\Test\x64\Release\ExeForTesting.exe
Microsoft (R) .NET Framework CorFlags Conversion Tool.  Version  4.0.30319.17929
Copyright (c) Microsoft Corporation.  All rights reserved.

Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32+
CorFlags  : 0x1
ILONLY    : 1
32BITREQ  : 0
32BITPREF : 0
Signed    : 0
</code></pre>

<p>Built and tested using Mono 4.0.1 on:</p>

<ul>
<li>Windows</li>
<li>OS-X</li>
<li>Linux</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MS CorFlags - Showing Incorrect Flags]]></title>
    <link href="http://sushihangover.github.io/ms-corflags-showing-incorrect-flags/"/>
    <updated>2015-06-14T10:40:23-07:00</updated>
    <id>http://sushihangover.github.io/ms-corflags-showing-incorrect-flags</id>
    <content type="html"><![CDATA[<p>In the Microsoft supplied CorFlags.exe, when displaying the flags on a COMIMAGE_FLAGS_32BITPREFERRED &amp;&amp; COMIMAGE_FLAGS_32BITREQUIRED flagged CIL PE image, it does not show that the COMIMAGE_FLAGS_32BITREQUIRED as being set.</p>

<p>In the case of this output:</p>

<pre><code>Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x20003
ILONLY    : 1
32BITREQ  : 0
32BITPREF : 1
Signed    : 0
</code></pre>

<p>The 0x20003 flags breaks down into:</p>

<ul>
<li>32BITPREFERRED (0x20000)</li>
<li>32BITREQUIRED (0x00002)</li>
<li>ILONLY (0x00001)</li>
</ul>


<p>So why is <strong>32BITREQ</strong> not shown as selected?</p>

<p>My <a href="https://github.com/sushihangover/corflags">xplat version of CorFlags</a> shows the following:</p>

<pre><code>Version   : v4.0.30319
CLR Header: 2.5
PE        : PE32
CorFlags  : 0x20003
ILONLY    : 1
32BITREQ  : 1
32BITPREF : 1
Signed    : 0
</code></pre>

<p>The 32BITREQ is shown as flagged as the value of 0x20003 includes that flag&hellip;. so who is right?</p>

<p>Microsoft in hiding that the 32BITREQ flag is set on PEs that have 32BITPREF set (while still showing the actual flag value), is that right? a bug? Should I do the same in my xplat version of the tool? Let me know in the comments below, or even better post an issue over at my xplat <a href="https://github.com/sushihangover/corflags/issues/new">CorFlags</a> project (Thanks).</p>

<h2>Misc:</h2>

<p>In setting the compiler /platform flag to &lsquo;anycpu32bitpreferred&rsquo; you are targeting 32-bit even if on a 64-bit system, thus the 32BITREQ and 32BITPREF flags are set.</p>

<blockquote><p>anycpu32bitpreferred compiles your assembly to run on any platform. Your application runs in 32-bit mode on systems that support both 64-bit and 32-bit applications. You can specify this option only for projects that target the .NET Framework 4.5. (Or Mono 4.5...)</p></blockquote>


<p>IMAGE_COR20_HEADER.Flags values from \Include\um\CorHdr.h</p>

<pre><code>COMIMAGE_FLAGS_ILONLY               =0x00000001,
COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,
COMIMAGE_FLAGS_32BITPREFERRED       =0x00020000,
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript - Moved It a Github Organization]]></title>
    <link href="http://sushihangover.github.io/playscript-moved-it-a-github-organization/"/>
    <updated>2015-06-14T08:24:28-07:00</updated>
    <id>http://sushihangover.github.io/playscript-moved-it-a-github-organization</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png">  I transfered my PlayScript repo to an Github organization to help maintain the structure of the project.</p>

<p>The new org is named <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> and any forks should be made from there as it will be the master and now my personal PlayScript repo will also be a fork of that master.</p>

<p>I&rsquo;ll be (slowly) posting the other PlayScript related repo (Starling, Away3d, IDE add-ins, etc.) to the PlayScriptRedux as they are tested.</p>
]]></content>
  </entry>
  
</feed>
