<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SushiHangover]]></title>
  <link href="http://sushihangover.github.io/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2014-02-18T09:41:43-08:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[Robert N.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BUILDING LLDB on MAC OS X]]></title>
    <link href="http://sushihangover.github.io/building-lldb-on-mac-os-x"/>
    <updated>2014-02-18T08:21:07-08:00</updated>
    <id>http://sushihangover.github.io/building-lldb-on-mac-os-x</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/llvm/tools/lldb/tools/debugserver/source/MacOSX/dbgnub-mig.defs:13:10: fatal error: 'DNBConfig.h' file not found
</span><span class='line'>#include "DNBConfig.h"
</span><span class='line'>         ^
</span><span class='line'>1 error generated.</span></code></pre></td></tr></table></div></figure>


<p>I was trying to build LLDB &lsquo;out-of-source&rsquo; at the same time as LLVM, Polly, cloog, libcxx, etc&hellip; using ninja and got the error above. Missing source from a LLVM sub-project? I really doubted that and was right&hellip;</p>

<blockquote><p>DNBConfig.h is autogenerated by a perl script that is run as a build script in XCode. XCode is responsible for calling the script and setting the include paths correctly to locate it. The file will exist in the derived sources directory in the build folder.</p></blockquote>

<p>Well, the <a href="http://lldb.llvm.org/build.html">LLDB build instructions</a> are <em>clear</em> in that you need to build lldb from Xcode when on OS-X but I &lsquo;assumed&rsquo; that the <em>make</em> would call &ldquo;&#8221;xcodebuild -workspace lldb.xcworkspace -configuration Release -scheme LLVB clean build&rdquo; or some like that to build it&hellip; but I assumed wrong :&ndash;( &hellip; thus your ninja/make build will always fail&hellip;</p>

<p>I also can not find a disable option for LLDB when running llvm&rsquo;s &lsquo;configure&rsquo;, so if you have the lldb source in llvm/tools your configure will always include it and thus your build will always fail..?&hellip;</p>

<p>Why is this? Is this due to Apple preventing an <strong><em>un-codesigned</em></strong> version to be built/run on OS-X? Really confused by the whole thing. If someone knows, ping me&hellip; thanks&hellip;</p>

<p>Note: This is only on OS-X, building LLDB that has been included under llvm/tools under Linux/FreeBSD works as expected&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell and Bash 'Dot' Sourcing]]></title>
    <link href="http://sushihangover.github.io/powershell-and-bash-dot-sourcing"/>
    <updated>2014-02-17T06:21:11-08:00</updated>
    <id>http://sushihangover.github.io/powershell-and-bash-dot-sourcing</id>
    <content type="html"><![CDATA[<p>Parent/Child scoping of variables and functions can really mess with people starting out with PowerShell (or Bash).</p>

<p>In terms of &ldquo;Dot-sourcing&rdquo; a .ps1 file, it is like running the PowerShell script it contains <strong>inline</strong> in the current scope. Thus when that script finishes, any variables set/updated within it are changed within the current scope.</p>

<p>Let create a .ps1 file that increments the variable $x by one and &lsquo;outputs&rsquo; it to the pipe:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "`$x++;`$x;" &gt; inc_x_by_one.ps1</span></code></pre></td></tr></table></div></figure>


<p>Now assign the variable $x to be 1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$x=1
</span><span class='line'>$x
</span><span class='line'>1</span></code></pre></td></tr></table></div></figure>


<p>Now run the <em>inc_x_by_one.ps1</em> routine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.\inc_x_by_one.ps1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>So we got a result of 2 which is what you wanted right? Well, maybe&hellip; Let run the same thing again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.\inc_x_by_one.ps1
</span><span class='line'>2
</span><span class='line'>$x
</span><span class='line'>1</span></code></pre></td></tr></table></div></figure>


<p>What? Why is it not 3(?), and it is still 1!!! Well that is because the $x++ is executing in a <em>child scope</em>. Basically your script is getting a copy of $x, not a reference (pointer) to that variable. Same thing that you experience in passing variables to functions in C, C#, Java, etc&hellip;</p>

<p>If your desire is to actually change $x in your shell (the current scope), you can &lsquo;dot-source&rsquo; the call.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. .\inc_x_by_one.ps1
</span><span class='line'>2
</span><span class='line'>. .\inc_x_by_one.ps1
</span><span class='line'>3
</span><span class='line'>$x
</span><span class='line'>3</span></code></pre></td></tr></table></div></figure>


<p>This is compariable to the way shell variables work under bash, zsh, &hellip; and I&rsquo;m assuming the PowerShell term borrowed &lsquo;dot sourcing&rsquo; in that regard as the syntax if the same: <strong>Period Space File.ps1|.sh</strong></p>

<p>Take a few minutes and read the help on <strong>scope</strong>, it just might save you a headache in the future ;&ndash;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>help scope</span></code></pre></td></tr></table></div></figure>


<p>Note: In PowerShell, you can assign variables to the global scope and not &lsquo;worry&rsquo; about parent/child scoping rules. Normally this is not a preferred way  as it create it creates messy code, issues of which function/module is changing it, debugging nightmares, etc&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM Cortex-M0 Overview]]></title>
    <link href="http://sushihangover.github.io/arm-cortex-m0-overview"/>
    <updated>2014-02-17T06:02:25-08:00</updated>
    <id>http://sushihangover.github.io/arm-cortex-m0-overview</id>
    <content type="html"><![CDATA[<p>ARM Cortex-M0 Overview By: Daniel Widyanto September 2010</p>

<p  style=" margin: 12px auto 6px auto; font-family: Helvetica,Arial,Sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 14px; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none; display: block;">   <a title="View ARM Cortex-M0 Overview on Scribd" href="http://www.scribd.com/doc/38226967"  style="text-decoration: underline;" >ARM Cortex-M0 Overview</a></p>


<iframe class="scribd_iframe_embed" src="http://sushihangover.github.io//www.scribd.com/embeds/38226967/content?start_page=1&view_mode=scroll&show_recommendations=true" data-auto-height="false" data-aspect-ratio="undefined" scrolling="no" id="doc_32615" width="100%" height="600" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bare Metal ARM Terminology]]></title>
    <link href="http://sushihangover.github.io/bare-metal-arm-terminology"/>
    <updated>2014-02-16T21:35:45-08:00</updated>
    <id>http://sushihangover.github.io/bare-metal-arm-terminology</id>
    <content type="html"><![CDATA[<p><a href="http://www.arm.com/products/processors/cortex-m/cortex-microcontroller-software-interface-standard.php">CMSIS</a> : ARM® <strong>C</strong>ortex™ <strong>M</strong>icrocontroller <strong>S</strong>oftware <strong>I</strong>nterface <strong>S</strong>tandard</p>

<p>Thread mode :</p>

<blockquote><p>Used to execute application software. The processor enters Thread mode when it comes out of reset.</p></blockquote>

<p>Privileged or unprivileged software execution :</p>

<blockquote><p>Cortex-M0 do not support different privilege levels. Software execution is always privileged; i.e. Software can access all the features of the processor. Other ARM series do support pri and unpri execution.</p></blockquote>

<p>Handler mode :</p>

<blockquote><p>Used to handle exceptions. The processor returns to Thread mode when it has finished all exception processing</p></blockquote>

<p>SysTick : A 24-bit count-down timer.</p>

<blockquote><p>This timer is the basis for a <em>ticktimer</em> for an embedded Real Time Operating System (RTOS) like FreeRTOS. And, yes, it can be used as a simple counter.</p></blockquote>

<p>System Control Block :</p>

<blockquote><p>Provides system implementation information and system control, including configuration, control,and reporting of system exceptions.</p></blockquote>

<p>NVIC : Nested Vectored Interrupt Controller</p>

<blockquote><p>In the Cortex-M0, Cortex-M0+ and Cortex-M1 processors, the NVIC support up to 32 interrupts (IRQ), a Non-Maskable Interrupt (NMI) and various system exceptions, other M series, like M3/M4, can support up to 240 IRQs.
Tail chaining > If another exception is pending when an ISR exits, the processor does not restore all saved registers from the stack and instead moves on to the next ISR. This reduces the latency when switching from one exception handler to another.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew: Git 1.9.0 Release]]></title>
    <link href="http://sushihangover.github.io/homebrew-git-1-dot-9-0-release"/>
    <updated>2014-02-16T10:32:41-08:00</updated>
    <id>http://sushihangover.github.io/homebrew-git-1-dot-9-0-release</id>
    <content type="html"><![CDATA[<blockquote><p>Update: Someone else has done a pull-request for homebrew git that is awaiting cool down on the new 1.9.0 release before it gets mainlined. As the formula is the basically the same as mine you can grab it via the <a href="https://github.com/Homebrew/homebrew/pull/26734">pull-request</a> on github and post 1.9.0 issues/comments in that thread.</p></blockquote>

<p><a href="https://code.google.com/p/git-core/">Git</a> just released <a href="https://code.google.com/p/git-core/downloads/detail?name=git-1.9.0.tar.gz">1.9.0</a> (Feb-14-2014) but <a href="http://brew.sh">Homebrew</a> does not have this update quite yet so I updated the tar ball references, sha1 tags and commented out the patch that is no longer required (this needs cleaned up as there are older patches commented out also&hellip;). As for the complete release notes, click <a href="http://anzwix.com/a/Git/Git190">here</a>.</p>

<p>I do not have time right now to do a pull-request, so here is a <a href="https://gist.github.com">gist</a> of it so you can update your Git version. Do a &ldquo;brew edit git&rdquo; and replace the contents with this and you can update to 1.9.0.</p>

<div><script src='https://gist.github.com/9036063.js?file=git.rb'></script>
<noscript><pre><code>require &#39;formula&#39;

class Git &lt; Formula
  homepage &#39;http://git-scm.com&#39;
  url &#39;https://git-core.googlecode.com/files/git-1.9.0.tar.gz&#39;
  sha1 &#39;e60667fc16e5a5f1cde46616b0458cc802707743&#39;
  head &#39;https://github.com/git/git.git&#39;

  bottle do
    sha1 &quot;582a276b608de17888da01922648522bf7a9c11a&quot; =&gt; :mavericks
    sha1 &quot;f308b293aa5664b65c57c3b206b892537397d3b9&quot; =&gt; :mountain_lion
    sha1 &quot;fa5f896b766bb103804800abde58e25579cf58a7&quot; =&gt; :lion
  end

  option &#39;with-blk-sha1&#39;, &#39;Compile with the block-optimized SHA1 implementation&#39;
  option &#39;without-completions&#39;, &#39;Disable bash/zsh completions from &quot;contrib&quot; directory&#39;
  option &#39;with-brewed-openssl&#39;, &quot;Build with Homebrew OpenSSL instead of the system version&quot;
  option &#39;with-brewed-curl&#39;, &quot;Use Homebrew&#39;s version of cURL library&quot;
  option &#39;with-persistent-https&#39;, &#39;Build git-remote-persistent-https from &quot;contrib&quot; directory&#39;

  depends_on &#39;pcre&#39; =&gt; :optional
  depends_on &#39;gettext&#39; =&gt; :optional
  depends_on &#39;openssl&#39; if build.with? &#39;brewed-openssl&#39;
  depends_on &#39;curl&#39; if build.with? &#39;brewed-curl&#39;
  depends_on &#39;go&#39; =&gt; :build if build.with? &#39;persistent-https&#39;

  resource &#39;man&#39; do
    url &#39;http://git-core.googlecode.com/files/git-manpages-1.9.0.tar.gz&#39;
    sha1 &#39;cff590c92b4d1c8a143c078473140b653cc5d56a&#39;
  end

  resource &#39;html&#39; do
    url &#39;http://git-core.googlecode.com/files/git-htmldocs-1.9.0.tar.gz&#39;
    sha1 &#39;65eb3f411f4699695c7081a7c716cabb9ce23d75&#39;
  end

  def patches
    if MacOS.version &gt;= :mavericks and not build.head?
      # Allow using PERLLIB_EXTRA to find Subversion Perl bindings location
      # in the CLT/Xcode. Should be included in Git 1.8.6.
      # https://git.kernel.org/cgit/git/git.git/commit/?h=next&amp;id=07981d
      # https://git.kernel.org/cgit/git/git.git/commit/?h=next&amp;id=0386dd
      #[&#39;https://git.kernel.org/cgit/git/git.git/patch/?id=07981d&#39;,
      # &#39;https://git.kernel.org/cgit/git/git.git/patch/?id=0386dd&#39;]
    end
  end

  def install
    # If these things are installed, tell Git build system to not use them
    ENV[&#39;NO_FINK&#39;] = &#39;1&#39;
    ENV[&#39;NO_DARWIN_PORTS&#39;] = &#39;1&#39;
    ENV[&#39;V&#39;] = &#39;1&#39; # build verbosely
    ENV[&#39;NO_R_TO_GCC_LINKER&#39;] = &#39;1&#39; # pass arguments to LD correctly
    ENV[&#39;PYTHON_PATH&#39;] = which &#39;python&#39;
    ENV[&#39;PERL_PATH&#39;] = which &#39;perl&#39;

    if MacOS.version &gt;= :mavericks and MacOS.dev_tools_prefix
      ENV[&#39;PERLLIB_EXTRA&#39;] = &quot;#{MacOS.dev_tools_prefix}/Library/Perl/5.16/darwin-thread-multi-2level&quot;
    end

    unless quiet_system ENV[&#39;PERL_PATH&#39;], &#39;-e&#39;, &#39;use ExtUtils::MakeMaker&#39;
      ENV[&#39;NO_PERL_MAKEMAKER&#39;] = &#39;1&#39;
    end

    ENV[&#39;BLK_SHA1&#39;] = &#39;1&#39; if build.with? &#39;blk-sha1&#39;

    if build.with? &#39;pcre&#39;
      ENV[&#39;USE_LIBPCRE&#39;] = &#39;1&#39;
      ENV[&#39;LIBPCREDIR&#39;] = Formula.factory(&#39;pcre&#39;).opt_prefix
    end

    ENV[&#39;NO_GETTEXT&#39;] = &#39;1&#39; unless build.with? &#39;gettext&#39;

    system &quot;make&quot;, &quot;prefix=#{prefix}&quot;,
                   &quot;sysconfdir=#{etc}&quot;,
                   &quot;CC=#{ENV.cc}&quot;,
                   &quot;CFLAGS=#{ENV.cflags}&quot;,
                   &quot;LDFLAGS=#{ENV.ldflags}&quot;,
                   &quot;install&quot;

    bin.install Dir[&quot;contrib/remote-helpers/git-remote-{hg,bzr}&quot;]

    # Install the OS X keychain credential helper
    cd &#39;contrib/credential/osxkeychain&#39; do
      system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;,
                     &quot;CFLAGS=#{ENV.cflags}&quot;,
                     &quot;LDFLAGS=#{ENV.ldflags}&quot;
      bin.install &#39;git-credential-osxkeychain&#39;
      system &quot;make&quot;, &quot;clean&quot;
    end

    # Install git-subtree
    cd &#39;contrib/subtree&#39; do
      system &quot;make&quot;, &quot;CC=#{ENV.cc}&quot;,
                     &quot;CFLAGS=#{ENV.cflags}&quot;,
                     &quot;LDFLAGS=#{ENV.ldflags}&quot;
      bin.install &#39;git-subtree&#39;
    end

    if build.with? &#39;persistent-https&#39;
      cd &#39;contrib/persistent-https&#39; do
        system &quot;make&quot;
        bin.install &#39;git-remote-persistent-http&#39;,
                    &#39;git-remote-persistent-https&#39;,
                    &#39;git-remote-persistent-https--proxy&#39;
      end
    end

    unless build.without? &#39;completions&#39;
      # install the completion script first because it is inside &#39;contrib&#39;
      bash_completion.install &#39;contrib/completion/git-completion.bash&#39;
      bash_completion.install &#39;contrib/completion/git-prompt.sh&#39;

      zsh_completion.install &#39;contrib/completion/git-completion.zsh&#39; =&gt; &#39;_git&#39;
      cp &quot;#{bash_completion}/git-completion.bash&quot;, zsh_completion
    end

    (share+&#39;git-core&#39;).install &#39;contrib&#39;

    # We could build the manpages ourselves, but the build process depends
    # on many other packages, and is somewhat crazy, this way is easier.
    man.install resource(&#39;man&#39;)
    (share+&#39;doc/git-doc&#39;).install resource(&#39;html&#39;)

    # Make html docs world-readable; check if this is still needed at 1.8.6
    chmod 0644, Dir[&quot;#{share}/doc/git-doc/**/*.{html,txt}&quot;]
  end

  def caveats; &lt;&lt;-EOS.undent
    The OS X keychain credential helper has been installed to:
      #{HOMEBREW_PREFIX}/bin/git-credential-osxkeychain

    The &#39;contrib&#39; directory has been installed to:
      #{HOMEBREW_PREFIX}/share/git-core/contrib
    EOS
  end

  test do
    HOMEBREW_REPOSITORY.cd do
      assert_equal &#39;bin/brew&#39;, `#{bin}/git ls-files -- bin`.strip
    end
  end
end
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Bare Metal ARM]]></title>
    <link href="http://sushihangover.github.io/what-is-bare-metal-arm"/>
    <updated>2014-02-16T08:12:02-08:00</updated>
    <id>http://sushihangover.github.io/what-is-bare-metal-arm</id>
    <content type="html"><![CDATA[<h2>What is Bare Metal ARM Development?</h2>

<blockquote><p>Bare-Metal ARM Development, also called <a href="http://en.wikipedia.org/wiki/Bare_machine">Bare-Machine</a> is the development of &lsquo;embedded&rsquo; applications, that run without an operating system or other supporting programs, maybe a bootloader, on an ARM processor. The application sits on top of the “bare metal”, runs ARM instructions (including THUMB), directly controls the processor (MCU) to manage power consumption, GPIOs, ADC, DAC, etc&hellip;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FleaFPGA Experimenters Board]]></title>
    <link href="http://sushihangover.github.io/fleafpga-experimenters-board"/>
    <updated>2014-02-15T07:14:40-08:00</updated>
    <id>http://sushihangover.github.io/fleafpga-experimenters-board</id>
    <content type="html"><![CDATA[<p><a href="http://sushihangover.github.io/images/Flea_2v4_white2.jpg"><img class="left" src="http://sushihangover.github.io/images/Flea_2v4_white2.jpg" width="360" height="240" title="OSHW FPGA Flea Dev Board" alt="FPGA Flea"></a></p>

<blockquote><p>FleaFPGA provides a low-cost development platfrom for users to explore the wonders of programmable logic and hardware-oriented languages i.e. VHDL and Verilog. FleaFPGA is suited for professional and hobbyist uses.</p><footer><strong>&#8220;Valentin Angelovski&#8221;</strong> <cite><a href='http://www.fleasystems.com/fleaFPGA.html'>www.fleasystems.com/&hellip;</a></cite></footer></blockquote>


<p>Valentin is looking at producing at limited run of his <a href="http://www.latticesemi.com/Products/FPGAandCPLD.aspx">Lattice</a> MachXO2-based <a href="http://www.fleasystems.com/fleaFPGA.html">FleaFPGA boards</a> that are designed to get beginners up, running and experimentings with FPGA programming quickly. For ~100.00 sounds like a great deal. Head over to his site and <a href="http://www.fleasystems.com/forums/showthread.php?tid=29&amp;pid=127#pid127">pre-order</a> one.</p>

<p><img src="http://sushihangover.github.io/images/oshw.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded 'Bare-Metal' ARM Development - Part 1]]></title>
    <link href="http://sushihangover.github.io/embedded-bare-metal-arm-development-part-1"/>
    <updated>2014-02-14T06:01:48-08:00</updated>
    <id>http://sushihangover.github.io/embedded-bare-metal-arm-development-part-1</id>
    <content type="html"><![CDATA[<p>This is a start of a series of posts related to getting into ARM-based Cortex core programming. So I started on a quest to checkout ARM Embedded &lsquo;Bare-Metal&rsquo; compilers and tools and in the end(?) cleared up my confusion about what I can and can not do on a restricted budget and time.</p>

<p>The reasoning behind this is I wanted to do some bare metal ARM C coding for a project that might become some type of OSHW or even a commerical offering so I wanted to keep my options open, try to future proof my decisions.</p>

<p>Instead of falling back to my comfort zone with AVR 8-bit MCU C-codings and forcing a project that really is beyond what AVRs offer (mainly execution speed and size related plus I tired of all the bit-banging to &lsquo;add&rsquo; protocals) and the fact that ARM-based core offerings that are now available have not just tons of digital GPIOs, footprints that are as small, but also have great signal processing options (input and output) that can match or exceed what is available in Amtel&rsquo;s AVR 8-bit line up and<strong> match them at price.</strong></p>

<p>Just compare the Atmel AVR line up to their D20 ARM-core offerings and for non-legacy new embedded projects the decision matrix might be almost equal, but if you are adding &lsquo;future-proofing&rsquo; to the mix and what MCUs will be offering in the next decade, ARM-based MCUs become a clear choice (would love to hear someone&rsquo;s counter-point!).</p>

<p>So first I figured I look at ARM compilers/linkers as if you can not compile/link your code, than you are just screwed ;&ndash;) So in terms of ARM compilers available there <strong>is</strong> more than one:</p>

<ul>
<li><a href="https://launchpad.net/gcc-arm-embedded">GNU C Compiler</a>(1)</li>
<li><a href="http://www.freescale.com/codewarrior">CodeWarrior</a> ARM C Compiler(2)</li>
<li><a href="http://www.iar.com">IAR</a> ARM C Compiler</li>
<li><a href="https://www.imagecraft.com">ImageCraft</a> C Compiler Tools</li>
<li><a href="http://www.keil.com">Kiel</a> ARM C/C++ Compiler(3)</li>
<li><a href="http://ds.arm.com">ARM DS-5</a> RealView C/C++ Compiler(3)</li>
<li>ARM <a href="http://clang.llvm.org">Clang</a>/<a href="http://llvm.org">LLVM</a> Compiler</li>
<li>Microsoft Visual Studio C/C++ Native ARM Compiler(4)</li>
</ul>


<h6>* 1: Technically the launchpad link is the &lsquo;output&rsquo; of an ARM version of GCC and binutils but is the best starting point for info on the ARM version as it is the offical distro end-point ;&ndash;)</h6>

<blockquote><p>ARM employees are maintaining this project. Contributing to this project should be via GCC trunk http://gcc.gnu.org and binutils trunk http://www.gnu.org/software/binutils/. This launchpad project is for communication and downloading. No code change is done in lp project.</p></blockquote>


<h6>* 2: The &lsquo;Freescale Kinetis Compiler&rsquo; is in maintance mode. The GNU compiler is the &lsquo;active&rsquo; mainline of ARM compiler within CodeWarror now and thus I am not looking at this one at all as it fails my future proofing rules. For existing &lsquo;legacy&rsquo; embedded projects based on it, <a href="http://en.wikipedia.org/wiki/CodeWarrior">MetroWorks</a> was acquired by Motorola which was then included in the Freescale spinoff, so go to Freescale if you need a version&hellip;</h6>

<h6>* 3: ARM acquired Kiel and thus the compiler IP from the two is now within one toolchain simply called &ldquo;ARM Compiler toolchain&rdquo; and thus RealView no longer exists, but some old-timers ;&ndash;) still call the new version by the RealView name. Note: There are still different development IDEs from each company; Kiel has uVision and ARM has Eclipse intergation (via a standalone version or plugins for your existing install), but again, they use just the &lsquo;new&rsquo; version of the compiler, but more on the IDEs in a future post of this series.</h6>

<h6>* 4: Yes, you can produce ARM code as you would have to in order to cross-compile Windows RT apps, but can you do bare metal programming with it? I am not sure if you can get a CMSIS setup using it and handle the .S/SystemInit/Reset_Handler/__main() of bare metal programming&hellip;</h6>

<h6>* If I missed one, please let me know!.</h6>

<p>So an ARM compiler choice is not as easy as just saying GNU/GCC as you have other options and while in the end they all produce an ELF/BIN that you flash on your bare-metal ARM, how that binary gets created and the size and speed of the ARM code and/or THUMB instructions that was produced can vary greatly&hellip;</p>

<p>Next time, we look into some compilers&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Backing Up Your Source Directory]]></title>
    <link href="http://sushihangover.github.io/octopress-backing-up-your-source-directory"/>
    <updated>2014-02-12T21:00:12-08:00</updated>
    <id>http://sushihangover.github.io/octopress-backing-up-your-source-directory</id>
    <content type="html"><![CDATA[<p>It has only been a couple of days using <a href="http://octopress.org">Octopress</a> and <a href="http://pow.cx">Pow*</a> but I am already sold. For offline blogging, <a href="http://pages.github.com">GitHub Pages</a> support, a great set of standard Markdown-ish driven Plugins, etc&hellip; the workflow is great. There are a few things that I am missing like:</p>

<p>My Missing Octopress Items:</p>

<blockquote><ul>
<li>Image Auto Thumbnailing</li>
<li>Image Popups from those Thumbnails</li>
<li>Post Staging (The &lsquo;published: false&rsquo; yaml front matter is a start but&hellip;.)</li>
<li>Auto source directory version control</li>
</ul>
</blockquote>

<p>That last one was my highest proirity. When you run the Octopress GitHub Pages setup, it configures the deployment repo (XXXXXX.github.io), but you still need to backup and/or version control the &lsquo;source&rsquo; directory.</p>

<p>Here is my quick way of doing this using the deployment repo.</p>

<blockquote><ul>
<li>Add a <strong>source</strong> branch your your &ldquo;XXXXXX.github.io&rdquo; repo</li>
<li>Set your local source directory as a <strong>single branch</strong> of that repo</li>
<li>Commit and Push after you do a <em>rake deploy</em></li>
</ul>
</blockquote>

<p>So lets add a source branch to your GitHub Page repo:</p>

<pre><code>    Note: This is my quick way (ie. hackie) to get an ***EMPTY* new *remote* branch** into an existing repo. If someone knows a better way, I'd love to hear it.
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Get your current repo and place it into a a temp directory</span>
</span><span class='line'>git clone https://github.com/sushihangover/sushihangover.github.io.git foo.bar
</span><span class='line'><span class="nb">pushd </span>foo.bar
</span><span class='line'><span class="c"># Add a new branch to your local copy</span>
</span><span class='line'>git checkout -b <span class="nb">source</span>
</span><span class='line'><span class="c"># Delete all the existing context</span>
</span><span class='line'>rm -Rf *
</span><span class='line'><span class="c"># Commit all those deletes</span>
</span><span class='line'>git commit --all --message<span class="o">=</span><span class="s2">&quot;Initial Empty source branch&quot;</span>
</span><span class='line'><span class="c"># Push that emopty branch back to GitHub</span>
</span><span class='line'>git push
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="c"># GEt rid of that temp. directory</span>
</span><span class='line'>rm -Rf foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>You already have an existing source directory and if you did not change the _config.yaml defaults is under your Octopress directory and those files need to be placed in this new source branch you just created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Move your existing source directory out of the way for now</span>
</span><span class='line'>mv <span class="nb">source </span>source.org
</span><span class='line'><span class="c"># Clone your GitHub Page repo BUT only a single branch of it, only the source branch and into a directory named source</span>
</span><span class='line'><span class="c"># Note: The &quot;--single-branch -branch source&quot; options are not used by most git users but can make speciallized repo copies quick and fool-proof</span>
</span><span class='line'>git clone --single-branch -branch <span class="nb">source </span>https://github.com/sushihangover/sushihangover.github.io.git <span class="nb">source</span>
</span><span class='line'><span class="c"># Now copy your existing source files into this empty repo directory</span>
</span><span class='line'>cp -R source.org <span class="nb">source</span>
</span><span class='line'><span class="nb">pushd source</span>
</span><span class='line'><span class="c"># Commit and Push your sources files to GitHub</span>
</span><span class='line'>git commit --all --message<span class="o">=</span><span class="s2">&quot;Initial source branch commit&quot;</span>
</span><span class='line'><span class="c"># Add your commit comment and save</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>Now you have two branches in your Pages repo. <strong>master</strong> will be your deployed/published blog pages and <strong>source</strong> will be the content Octopress uses to create those pages.</p>

<p>Now, anytime you need to <strong>backup work-in-progress</strong> source changes or after you you do a <strong>rake deploy</strong> you can just do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd source</span>; git commit --all --message<span class="o">=</span><span class="s2">&quot;Blog updated&quot;</span>; git push; <span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll be including this in the Github Page deploy plugin in the future so everytime I publish (deploy) I will also get a matching commit to the source branch&hellip;. But that and the other items on the Todo list will have to wait till later&hellip; ;&ndash;)</p>

<ul>
<li>Pow is a zero-config Rack server for Mac OS X : <a href="http://get.pow.cx/media/screencast.mov">Watch Me</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GtkSharp-Explorer Update for Irony]]></title>
    <link href="http://sushihangover.github.io/gtksharp-explorer-update-for-irony"/>
    <updated>2014-02-12T08:14:14-08:00</updated>
    <id>http://sushihangover.github.io/gtksharp-explorer-update-for-irony</id>
    <content type="html"><![CDATA[<p><a href="images/Irony-GtkSharp-Explorer-OS-X-ScreenCap.png"><img class="left" src="images/Irony-GtkSharp-Explorer-OS-X-ScreenCap.png" width="360" height="240" title="Irony.GtkSharp.Explorer" alt="Irony GtkSharp Explorer"></a> I was working on a <a href="https://irony.codeplex.com">Irony/C#</a> based DSL that I wrote awhile back and noticed that I had some strange NameSpace issues with the GTK UI (exposed only within Xamarin&rsquo;s Stetic Designer, not sure how those naming conflicts were not a compile time error&hellip;).</p>

<p>Updated source for my Gtk# addition to Irony is on GitHub now. <strong>Remember that my additions are on the &ldquo;gtksharp-explorer&rdquo; branch.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch --all
</span><span class='line'>* master
</span><span class='line'>  remotes/origin/HEAD -&gt; origin/master
</span><span class='line'>  remotes/origin/gtksharp-explorer
</span><span class='line'>  remotes/origin/master
</span><span class='line'>  remotes/origin/xplat-nunit-fix
</span><span class='line'>git checkout gtksharp-explorer
</span><span class='line'>  Branch gtksharp-explorer <span class="nb">set </span>up to track remote branch gtksharp-explorer from origin.
</span><span class='line'>  Switched to a new branch <span class="s1">&#39;gtksharp-explorer&#39;</span>
</span><span class='line'>
</span><span class='line'>git branch --all
</span><span class='line'>* gtksharp-explorer
</span><span class='line'>  master
</span><span class='line'>  remotes/origin/HEAD -&gt; origin/master
</span><span class='line'>  remotes/origin/gtksharp-explorer
</span><span class='line'>  remotes/origin/master
</span><span class='line'>  remotes/origin/xplat-nunit-fix
</span><span class='line'>open Irony_All.MonoDevelop.sln
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>==============================</p>

<h1>Grammar Explorer based on Gtk#</h1>

<p><em>For cross-platform Irony work in Mono 3.2.X and MonoDevelop/Xamarin 4.1.X/4.2.X</em>
Instructions for building on Mono:</p>

<h2>Via MonoDevelop/Xamarin IDE:</h2>

<ul>
<li>Release or Debug Targets:
      Load and build via the Irony_All.MonoDevelop.sln
Via cmd line:</li>
</ul>


<hr />

<ul>
<li><p>Release:
xbuild /p:Configuration=Release Irony_All.MonoDevelop.sln
mono Irony.GrammarExplorer.GtkSharp/bin/Release/Irony.GrammarExplorer.GtkSharp.exe</p></li>
<li><p>Debug:
xbuild /p:Configuration=Release Irony_All.MonoDevelop.sln
mono Irony.GrammarExplorer.GtkSharp/bin/Debug/Irony.GrammarExplorer.GtkSharp.exe</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ellcc.org Build Fix for OS-X]]></title>
    <link href="http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x"/>
    <updated>2014-02-12T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/ellcc-dot-org-build-fix-for-os-x</id>
    <content type="html"><![CDATA[<p>In my ARM Bare Metal searches for using Clang/LLVM I stumbled across <a href="http://ellcc.org">The ELLCC Embedded Compiler Collection</a> that provides a one-stop build enviroment for all the LLVM tools for cross-platform compiling.</p>

<p>I&rsquo;m not sure if they are trying to be a <a href="http://yagarto.org">YAGARTO</a> for LLVM vs. GCC. I waiting for a reply to post on their forum to understand the actual code changes to Clang/LLVM that they include (if any). <del>I will update when I hear back.</del> <strong>(Update: Read Rich&rsquo;s <a href="http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571">full reply</a>, it cleared everything up for me)</strong></p>

<blockquote><p>ELLCC is really just a weekly repackaging of clang/LLVM with two minor additions.<br/>1. The triples of the form -ellcc- (where OS is linux for now, but will include others eventually) control how include files and libraries are found. You might notice for example that the #include path for ELLCC&#8230;</p><footer><strong>Rich</strong> <cite><a href='http://ellcc.org/blog/?topic=ellcc-vs-clangllvm-trunk/#post-1571'>What Is ELLCC All About</a></cite></footer></blockquote>


<p>But in the mean time I figured I give it a build and include it in my GCC/ARM vs. Clang/LLVM-ARM testing but hit a build error on OS-X. On the linking of QEMU, libintl (GNU&rsquo;s gettext) is not found:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LINK  i386-softmmu/qemu-system-i386
</span><span class='line'>ld: library not found for -lintl
</span><span class='line'>clang: error: linker command failed with exit code 1 (use -v to see invocation)
</span><span class='line'>make[1]: *** [qemu-system-i386] Error 1
</span><span class='line'>make: *** [subdir-i386-softmmu] Error 2</span></code></pre></td></tr></table></div></figure>


<p>I do have gettext on my system, but it is in my &ldquo;Cellar&rdquo;&ldquo; as I use <a href="http://brew.sh">HomeBrew</a> as my package manager and try not to install anything to &rdquo;/usr/bin&#8221; or other systems places that can muck everything up and thus can run parrallels versions of different applications (i.e. If I have to &lsquo;sudo&rsquo; to an open-source software install, it is not going on my system unless they have a serious reason for it and I trust the code from a security viewpoint).</p>

<p>FYI: Brew does not &lsquo;hard&rsquo; link gettext as compiling software outside of the HomeBrew can cause problems:</p>

<blockquote><p>brew link gettext<br/>Warning: gettext is keg-only and must be linked with &#8211;force<br/>Note that doing so can interfere with building software.</p></blockquote>


<p>So I mod&rsquo;d the &ldquo;ellcc/gnu/build&rdquo; to force brew to link gettext before compiling/linking qemu and unlink it after.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>svn diff build
</span><span class='line'>Index: <span class="nv">build</span>
</span><span class='line'><span class="o">===================================================================</span>
</span><span class='line'>--- build <span class="o">(</span>revision 3780<span class="o">)</span>
</span><span class='line'>+++ build <span class="o">(</span>working copy<span class="o">)</span>
</span><span class='line'>@@ -69,6 +69,10 @@
</span><span class='line'>     ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sparc-linux-user<span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> fi</span>
</span><span class='line'><span class="s2"> echo Configuring package qemu for $targets</span>
</span><span class='line'><span class="s2">+if [!  -e `which brew` ]; then</span>
</span><span class='line'><span class="s2">+    ruby -e &quot;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install<span class="k">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">+fi</span>
</span><span class='line'><span class="s2">+brew link gettext --force</span>
</span><span class='line'><span class="s2"> qemu_target_list=`echo $qemu_target_list | sed -e &quot;</span>s/ /,/g<span class="err">&quot;</span><span class="sb">`</span>
</span><span class='line'> make <span class="nv">DIR</span><span class="o">=</span>src/qemu <span class="nv">CC</span><span class="o">=</span><span class="nv">$cc</span> <span class="nv">HCC</span><span class="o">=</span><span class="nv">$hcc</span> <span class="nv">AR</span><span class="o">=</span><span class="nv">$ar</span> <span class="nv">TARGET</span><span class="o">=</span><span class="nv">$host</span> <span class="nv">OS</span><span class="o">=</span><span class="nv">$os</span> <span class="se">\</span>
</span><span class='line'>     <span class="nv">targetlist</span><span class="o">=</span><span class="nv">$qemu_target_list</span> <span class="nv">haslibs</span><span class="o">=</span><span class="nv">$haslibs</span> <span class="se">\</span>
</span><span class='line'>@@ -76,6 +80,7 @@
</span><span class='line'>     qemu.configure <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'> make -C src/qemu <span class="o">||</span> <span class="nb">exit </span>1
</span><span class='line'>+brew unlink gettext
</span><span class='line'>
</span><span class='line'> <span class="c"># Finally, install into the target specific bin dir.</span>
</span><span class='line'> mkdir -p <span class="nv">$bindir</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything builds fine after that&hellip;</p>

<p>The entire file is here:</p>

<div><script src='https://gist.github.com/8949755.js'></script>
<noscript><pre><code>#!/bin/sh
# ELLCC GNU tools build script.

# Get the staging directory.
prefix=`cd ..; pwd`

# Figure out the compilers to use.
. ../build-setup $*

echo Configured to $WHY.
echo C compiler: $cc $CFLAGS
echo C++ compiler: $cxx $CXXFLAGS
echo In: gnu-build$builddir

# Configure for GNU tools.
mkdir -p gnu-build$builddir

# Configure for binutils.
# binutils are build to support all targets in the target list.
echo Configuring package binutils for $targets
make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
    targetlist=$targetlist haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    binutils.configure || exit 1

make -C gnu-build$builddir/binutils || exit 1

# Configure for assemblers for all targets.
for t in $targets; do
  echo Configuring the assembler for $t
  make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
      target=$t haslibs=$haslibs \
      bindir=$bindir prefix=$prefix build=$build \
      gas.configure || exit 1

  make -C gnu-build$builddir/binutils/$t || exit 1
done

# Configure for GDB.
# GDB is built to support all GDB targets.
echo Configuring package gdb for $targets
make DIR=gnu-build$builddir CC=$cc CXX=$cxx AR=$ar TARGET=$host OS=$os \
    targetlist=$targetlist haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    gdb.configure || exit 1

make -C gnu-build$builddir/gdb || exit 1

if [ &quot;$host&quot; != &quot;$build&quot; ] ; then
  # The host system is not the build system.
  # Build only  binutils, the assemblers, and gdb.
  # Finally, install into the target specific bin dir.
  mkdir -p $bindir
  make TARGETDIR=$builddir BINDIR=$bindir installcross || exit 1
  exit 0
fi

# Configure for QEMU.
# The QEMU system targets.
qemu_target_list=&quot;i386-softmmu x86_64-softmmu arm-softmmu \
    microblaze-softmmu mips-softmmu mipsel-softmmu \
    ppc-softmmu ppc64-softmmu sparc-softmmu&quot;

if [ `uname` = &quot;Linux&quot; ] ; then
    # The QEMU Linux user space targets.
    qemu_target_list=&quot;$qemu_target_list i386-linux-user \
    x86_64-linux-user arm-linux-user armeb-linux-user \
    microblaze-linux-user mips-linux-user mipsel-linux-user \
    ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sparc-linux-user&quot;
fi
echo Configuring package qemu for $targets
if [!  -e `which brew` ]; then
        ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;
fi
brew link gettext --force
qemu_target_list=`echo $qemu_target_list | sed -e &quot;s/ /,/g&quot;`
make DIR=src/qemu CC=$cc HCC=$hcc AR=$ar TARGET=$host OS=$os \
    targetlist=$qemu_target_list haslibs=$haslibs \
    bindir=$bindir prefix=$prefix build=$build \
    qemu.configure || exit 1

make -C src/qemu || exit 1
brew unlink gettext

# Finally, install into the target specific bin dir.
mkdir -p $bindir
make TARGETDIR=$builddir BINDIR=$bindir install || exit 1
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X LLVM / CLANG Build]]></title>
    <link href="http://sushihangover.github.io/os-x-llvm-slash-clang-build"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/os-x-llvm-slash-clang-build</id>
    <content type="html"><![CDATA[<p>I wanted to test out some C code that I am writting for a ARM Bare Metal (Embedded) project in QEMU (qemu-system-arm) and normally would just use the <a href="https://launchpad.net/gcc-arm-embedded">GNU Tools for ARM Embedded Processors</a> but I was wondering what the current state of LLVM is for cross-compiling to bare-metal ARM.</p>

<p>Since this is a new area for me and I am having a <strong>dang hard time</strong> finding what is and isn&rsquo;t supported in CLang/LLVM for embedded ARM development, I figured I would compile the latest version and see the difference in code that gets produced between the gcc and Clang compilers.</p>

<p>Thus I needed to latest and greatest Clang/LLVM and did not feel like nurse-maiding a huge git download and long compile session, so I spent a minute and hacked up a really simple script so I could catch up on &ldquo;Game of Thrones&rdquo; ;&ndash;)</p>

<div><script src='https://gist.github.com/8946898.js'></script>
<noscript><pre><code>git clone http://llvm.org/git/llvm.git
pushd llvm/tools
git clone http://llvm.org/git/clang.git
popd
pushd llvm/projects
git clone http://llvm.org/git/compiler-rt.git
popd
pushd llvm/projects
git clone http://llvm.org/git/test-suite.git
popd
mkdir llvmbuild
pushd llvmbuild
../llvm/configure --enable-optimized --enable-jit --prefix=/Users/administrator/llvm-install 
make
</code></pre></noscript></div>


<p>FYI: <a href="http://clang.llvm.org/docs/CrossCompilation.html">Cross-compilation using Clang</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OMeta Binary Data Parsing]]></title>
    <link href="http://sushihangover.github.io/ometa-binary-data-parsing"/>
    <updated>2014-02-10T00:00:00-08:00</updated>
    <id>http://sushihangover.github.io/ometa-binary-data-parsing</id>
    <content type="html"><![CDATA[<p><a href="http://joshondesign.com/">Josh Marinacci </a>has a blog post concerning using OMeta to parse binary data and while there was not a complete cut/paste of all the Javascript code needed to run it in <a href="http://tinlizzie.org/ometa-js">OMeta/JS</a>, I saved his grammar for review as I was working on binary parsing using an OMeta that was using C# as the host language. Recently I give the link of his posting to someone else, but turns out Josh&rsquo;s blog was offline (crashed?).  (Update; Appears his blog is working again, so you can refer to the link below for his original post)</p>

<p>So I dug up what I had and whipped up an OMeta/JS example for a complete working proof of concept and here are the results. I am not a JavaScript kind-of-guy, so be nice regarding the code. ;&ndash;)</p>

<p>Note: The W3 spec has 18 chunks that can be defined in PNG files and I added &lsquo;iTXt&rsquo; to Josh&rsquo;s original as the PNG I was using as an example had a large chunk of XML data in it, but a lot of chunks are still missing as this is just a proof of concept and the original binaries that I was parsing were not PNGs, but custom AMF2 byte streams that were getting converted to objects &lsquo;on the &#8216;fly&rsquo; via IlGenerator in C#&hellip;</p>

<p>Original PNG parse concept from Josh is at the following link assuming he gets the blog working: <a href="http://joshondesign.com/2013/03/18/ConciseComputing">http://joshondesign.com/2013/03/18/ConciseComputing</a></p>

<p>And his related email thread on vpri.org : <a href="http://vpri.org/pipermail/ometa/2013-March/000524.html">http://vpri.org/pipermail/ometa/2013-March/000524.html</a></p>

<p>So if you load up OMeta/JS, the complete grammar and Javascript functions needed is shown below. Just open up your JS console before doing a &ldquo;Do It&rdquo; so you can see the chunk information found in the PNG and interact with the final object.</p>

<p>Here is an example console output of parsing a PNG file via this OMeta/JS script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Log] loaded
</span><span class='line'>[Log] got 24648 bytes
</span><span class='line'>[Log] i32 : 13 &lt;= [13, 0, 0, 0]
</span><span class='line'>[Log] ChunkType :IHDR : [73, 72, 68, 82]
</span><span class='line'>[Log] i32 : 139 &lt;= [139, 0, 0, 0]
</span><span class='line'>[Log] i32 : 119 &lt;= [119, 0, 0, 0]
</span><span class='line'>[Log] i32 : 25 &lt;= [25, 0, 0, 0]
</span><span class='line'>[Log] ChunkType :tEXt : [116, 69, 88, 116]
</span><span class='line'>[Log] String:SoftwareAdobe ImageReady (...byteArrayOmitted...)
</span><span class='line'>[Log] i32 : 1974 &lt;= [182, 7, 0, 0]
</span><span class='line'>[Log] ChunkType :iTXt : [105, 84, 88, 116]
</span><span class='line'>[Log] String:ML:com.adobe.xmp&lt;?xpacket begin="ï»¿" id="W5M (...only first 50 bytes shown...)
</span><span class='line'>[Log] i32 : 22568 &lt;= [40, 88, 0, 0]
</span><span class='line'>[Log] ChunkType :IDAT : [73, 68, 65, 84]
</span><span class='line'>[Log] i32 : 0 &lt;= [0, 0, 0, 0]
</span><span class='line'>[Log] ChunkType :IEND : [73, 69, 78, 68]
</span><span class='line'>[Log] ["PNG HEADER", Array[5], Array[0]]</span></code></pre></td></tr></table></div></figure>


<p>This is a working example of parsing binary data parsing in Ometa/JS.</p>

<figure class='code'><figcaption><span>OMeta/JS PNG Parse</span><a href='https://gist.github.com/sushihangover/8919188'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ometa</span> <span class="nx">BinaryParser</span> <span class="o">&lt;:</span> <span class="nx">Parser</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Portable Network Graphics (PNG) Specification (Second Edition)</span>
</span><span class='line'>    <span class="c1">// http://www.w3.org/TR/PNG/</span>
</span><span class='line'>    <span class="c1">// Note: not all chunk are defined, this is just a POC</span>
</span><span class='line'>    <span class="c1">//entire PNG stream</span>
</span><span class='line'>    <span class="nx">START</span>  <span class="o">=</span> <span class="p">[</span><span class="nx">header</span><span class="o">:</span><span class="nx">h</span> <span class="p">(</span><span class="nx">chunk</span><span class="o">+</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span> <span class="nx">number</span><span class="o">*:</span><span class="nx">n</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//chunk definition</span>
</span><span class='line'>    <span class="nx">chunk</span>  <span class="o">=</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">len</span> <span class="nx">str4</span><span class="o">:</span><span class="nx">t</span> <span class="nx">apply</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">len</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="nx">byte4</span><span class="o">:</span><span class="nx">crc</span>
</span><span class='line'>        <span class="o">-&gt;</span> <span class="p">[</span><span class="err">#</span><span class="nx">chunk</span><span class="p">,</span> <span class="p">[</span><span class="err">#</span><span class="nx">type</span><span class="p">,</span> <span class="nx">t</span><span class="p">],</span> <span class="p">[</span><span class="err">#</span><span class="nx">length</span><span class="p">,</span> <span class="nx">len</span><span class="p">],</span> <span class="p">[</span><span class="err">#</span><span class="nx">data</span><span class="p">,</span> <span class="nx">d</span><span class="p">],</span> <span class="p">[</span><span class="err">#</span><span class="nx">crc</span><span class="p">,</span> <span class="nx">crc</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//chunk types</span>
</span><span class='line'>    <span class="nx">IHDR</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">w</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">h</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">dep</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">type</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">comp</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">filter</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">inter</span>
</span><span class='line'>        <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;IHDR&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span><span class="p">{</span><span class="nx">width</span><span class="o">:</span><span class="nx">w</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span> <span class="nx">bitdepth</span><span class="o">:</span><span class="nx">dep</span><span class="p">,</span> <span class="nx">colortype</span><span class="o">:</span><span class="nx">type</span><span class="p">,</span> <span class="nx">compression</span><span class="o">:</span><span class="nx">comp</span><span class="p">,</span> <span class="nx">filter</span><span class="o">:</span><span class="nx">filter</span><span class="p">,</span> <span class="nx">interlace</span><span class="o">:</span><span class="nx">inter</span><span class="p">}},</span>
</span><span class='line'>    <span class="nx">gAMA</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">g</span>                  <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;gAMA&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span><span class="nx">g</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">pHYs</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">x</span> <span class="nx">int4</span><span class="o">:</span><span class="nx">y</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">u</span>    <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;pHYs&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="o">:</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span><span class="nx">y</span><span class="p">,</span> <span class="nx">units</span><span class="o">:</span><span class="nx">u</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">tEXt</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="s1">&#39;byte&#39;</span><span class="p">,</span><span class="nx">len</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span>    <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;tEXt&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span><span class="nx">toAscii</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span>
</span><span class='line'>    <span class="nx">iTXt</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="s1">&#39;byte&#39;</span><span class="p">,</span><span class="nx">len</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span>    <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;iTXt&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span><span class="nx">toShortAscii</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span>
</span><span class='line'>    <span class="nx">tIME</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">int2</span><span class="o">:</span><span class="nx">y</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">mo</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">day</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">hr</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">min</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">sec</span>
</span><span class='line'>        <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;tIME&quot;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span><span class="nx">y</span><span class="p">,</span> <span class="nx">month</span><span class="o">:</span><span class="nx">mo</span><span class="p">,</span> <span class="nx">day</span><span class="o">:</span><span class="nx">day</span><span class="p">,</span> <span class="nx">hour</span><span class="o">:</span><span class="nx">hr</span><span class="p">,</span> <span class="nx">minute</span><span class="o">:</span><span class="nx">min</span><span class="p">,</span> <span class="nx">second</span><span class="o">:</span><span class="nx">sec</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">IDAT</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="s1">&#39;byte&#39;</span><span class="p">,</span><span class="nx">len</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span>    <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;IDAT&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span><span class="s2">&quot;omitted&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">IEND</span> <span class="o">:</span><span class="nx">len</span>  <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="s1">&#39;byte&#39;</span><span class="p">,</span><span class="nx">len</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span>    <span class="o">-&gt;</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;IEND&quot;</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//useful definitions</span>
</span><span class='line'>    <span class="kr">byte</span>    <span class="o">=</span> <span class="nx">number</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">header</span>  <span class="o">=</span> <span class="mi">137</span> <span class="mi">80</span> <span class="mi">78</span> <span class="mi">71</span> <span class="mi">13</span> <span class="mi">10</span> <span class="mi">26</span> <span class="mi">10</span>    <span class="o">-&gt;</span> <span class="s2">&quot;PNG HEADER&quot;</span><span class="p">,</span>        <span class="c1">//mandatory header</span>
</span><span class='line'>    <span class="nx">int2</span>    <span class="o">=</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">a</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">b</span>               <span class="o">-&gt;</span> <span class="nx">byteArrayToInt16</span><span class="p">([</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]),</span>  <span class="c1">//2 bytes to a 16bit integer</span>
</span><span class='line'>    <span class="nx">int4</span>    <span class="o">=</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">a</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">b</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">c</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">d</span> <span class="o">-&gt;</span> <span class="nx">byteArrayToInt32</span><span class="p">([</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]),</span> <span class="c1">//4 bytes to 32bit integer</span>
</span><span class='line'>    <span class="nx">str4</span>    <span class="o">=</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">a</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">b</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">c</span> <span class="kr">byte</span><span class="o">:</span><span class="nx">d</span> <span class="o">-&gt;</span> <span class="nx">toChunkType</span><span class="p">([</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">]),</span>  <span class="c1">//4 byte string</span>
</span><span class='line'>    <span class="nx">byte4</span>   <span class="o">=</span> <span class="nx">repeat</span><span class="p">(</span><span class="s1">&#39;byte&#39;</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="o">-&gt;</span> <span class="nx">d</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">END</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">BinaryParser</span><span class="p">.</span><span class="nx">repeat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rule</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_apply</span><span class="p">(</span><span class="nx">rule</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">toAscii</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">byteArray</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;String:&quot;</span> <span class="o">+</span> <span class="nx">foo</span> <span class="o">+</span> <span class="s2">&quot; (...byteArrayOmitted...)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">toShortAscii</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">embeddedText</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">byteArray</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// The iTxt chunk can contain a lot of text/xml, so truncate for proof of concept</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;String:&quot;</span> <span class="o">+</span> <span class="nx">embeddedText</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">51</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; (...only first 50 bytes shown...)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">embeddedText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">toChunkType</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">aChuckType</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nx">byteArray</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;ChunkType :&quot;</span> <span class="o">+</span> <span class="nx">aChuckType</span> <span class="o">+</span> <span class="s2">&quot; : &quot;</span> <span class="o">+</span> <span class="nx">byteArray</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">aChuckType</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">byteArrayToInt32</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">localByteArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">uint8array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">localByteArray</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">uint32array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span>
</span><span class='line'>                    <span class="nx">uint8array</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">uint8array</span><span class="p">.</span><span class="nx">byteOffset</span> <span class="o">+</span> <span class="nx">uint8array</span><span class="p">.</span><span class="nx">byteLength</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>                    <span class="mi">1</span> <span class="c1">// 4Bytes long</span>
</span><span class='line'>                  <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newInt32</span> <span class="o">=</span> <span class="nx">uint32array</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span> <span class="s2">&quot;i32 : &quot;</span> <span class="o">+</span> <span class="nx">newInt32</span> <span class="o">+</span> <span class="s2">&quot; &lt;= &quot;</span> <span class="o">+</span> <span class="nx">localByteArray</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">newInt32</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">byteArrayToInt16</span>  <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ints</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">byteArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//ints.push((byteArray[i] &lt;&lt; 8) | (byteArray[i+1]));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="nx">ints</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ints</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fetchBinary</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="s2">&quot;http://sushihangover.azurewebsites.net/Content/Static/IronyLogoSmall.png&quot;</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="s2">&quot;arraybuffer&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;loaded&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">byteArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">buf</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;got &quot;</span> <span class="o">+</span> <span class="nx">byteArray</span><span class="p">.</span><span class="nx">byteLength</span> <span class="o">+</span> <span class="s2">&quot; bytes&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">byteArray</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">byteArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// watch out if you uncomment the next line, it can kill your browser w/ large png files</span>
</span><span class='line'>            <span class="c1">// console.log(arr);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">parserResults</span> <span class="o">=</span> <span class="nx">BinaryParser</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="s2">&quot;START&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parserResults</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">fetchBinary</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to GitHub Pages]]></title>
    <link href="http://sushihangover.github.io/moving-to-github-pages"/>
    <updated>2014-02-09T16:49:16-08:00</updated>
    <id>http://sushihangover.github.io/moving-to-github-pages</id>
    <content type="html"><![CDATA[<p>I am moving <strong><a href="http://sushihangover.blogspot.com">SushiHangover</a></strong> from Blogger and an Azure-based blog engine to GitHub Pages using Octopress so hang in there for a few days as I get the older content parsed and set to use markdown&hellip;</p>

<p>As always, email or post a comment if you need anything.</p>

<p>-R</p>

<p><img src="http://sushihangover.github.io/images/PowerShellLogo.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac: Detect When Mac Sleeps or Wakes]]></title>
    <link href="http://sushihangover.github.io/monomac-detect-when-mac-sleeps-or-wakes"/>
    <updated>2014-01-12T20:44:00-08:00</updated>
    <id>http://sushihangover.github.io/monomac-detect-when-mac-sleeps-or-wakes</id>
    <content type="html"><![CDATA[<p>Saw a question on the Xwt.Mac group concerning getting Sleep and Wake events from MonoMac/C# on OS-X. Normally I would look for those event on the NSApplication default notification center, but a quick look at the Apple developer site quickly directed me to the those events being on the NSWorkspace&rsquo;s notification center, so another quick look in MonoMac and lucky those are already exposed so you do not have to do the AddObserver work yourself, but finding them in the &lsquo;online MonoMac API&rsquo; did not return any direct results(?)&hellip; So here is my answer from that group in case anyone else google/bing this in the future:</p>

<p>Sleep and Wake are available on the NSWorkspace&rsquo;s notification center and MonoMac exposes those so so you do not have to write the AddObserver code yourself:</p>

<p>Apple Dev info on <a href="https://developer.apple.com/library/mac/qa/qa1340/_index.html">NSWorkspaceWillSleepNotification &amp;NSWorkspaceDidWakeNotification</a></p>

<figure class='code'><figcaption><span>C# &#8220;Wake and Sleep Events&#8221; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Console.WriteLine ("Add the sleep/wake observers");
</span><span class='line'>NSWorkspace.Notifications.ObserveWillSleep ((object sender, NSNotificationEventArgs e) => {
</span><span class='line'>    Console.Write ("Your Mac is getting sleepy\n");
</span><span class='line'>);
</span><span class='line'>NSWorkspace.Notifications.ObserveDidWake ((object sender, NSNotificationEventArgs e) => {
</span><span class='line'>    Console.Write ("Time to go to work again\n");
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript :What Happened to the Open Source Version on GitHub]]></title>
    <link href="http://sushihangover.github.io/playscript-what-happened-to-the-open-source-version-on-github"/>
    <updated>2013-12-27T19:04:55-08:00</updated>
    <id>http://sushihangover.github.io/playscript-what-happened-to-the-open-source-version-on-github</id>
    <content type="html"><![CDATA[<p>Poof: An open source project disappears: <a href="https://github.com/playscript/playscript-mono.git">https://github.com/playscript/playscript-mono.git</a></p>

<p><img class="left" src="http://sushihangover.github.io/images/Playscript404.gif" width="360" height="240" title="'PlayScript, Going, going, gone'" >
I am assuming with removal of PlayScript&rsquo;s public repo on GitHub that the project is either becoming a commercial offering from Xamarin (or Zynga) and future releases will have a license change?</p>

<p>I am assuming there will be some big reveal in the future when Xamarin (and Zynga?) announces Playscript is in Beta for licensed users of Studio, Xamarin.iOS and Xamarin.Andriod, &hellip;. Or Not&hellip;..</p>

<blockquote><p>The really important note here is if someone pulls a GitHub repo, you will <strong>LOSE</strong> your GitHub forks! Gone, Poof, No <em>Mas</em>, No warning, No chance to make a backup&hellip; I sure hope you had a complete local backup of your work cause it is now gone from GitHub</p></blockquote>
]]></content>
  </entry>
  
</feed>
