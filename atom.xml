<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SushiHangover]]></title>
  <link href="http://sushihangover.github.io/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-10-14T05:54:48-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Osx 10.11 El Capitan, Which Mono Version?]]></title>
    <link href="http://sushihangover.github.io/osx-10-dot-11-el-capitan-which-mono-version/"/>
    <updated>2015-10-14T05:49:56-07:00</updated>
    <id>http://sushihangover.github.io/osx-10-dot-11-el-capitan-which-mono-version</id>
    <content type="html"><![CDATA[<p>Moving to El Capitan? Then you need <a href="http://www.mono-project.com/download/">Mono</a> version 4.2.x or 4.0.4.4.</p>

<p>From the Mono mailing list:</p>

<blockquote><p>What is the difference between the latest Mono 4.0.4.4 package for Mac and the 4.2.1 El Capitan Preview?
The changelog of 4.0.4.4 includes &ldquo;33585: El Capitan System Integrity
Protection support.&rdquo; so i suppose that the 4.0.4.4 also works on El
Capitan?.</p></blockquote>

<p>Reply from Miguel de Icaza:</p>

<blockquote><p>One is based on Mono 4.0 series, with minimal changes just to enable the support on El Capitan;   The 4.2 has the same changes, on top of the latest Mono 4.2, available on Alpha and the release candidate.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tags And Play Script]]></title>
    <link href="http://sushihangover.github.io/git-tags-and-playscript/"/>
    <updated>2015-09-02T21:47:36-07:00</updated>
    <id>http://sushihangover.github.io/git-tags-and-playscript</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> Seems I not found a way to update the &lsquo;upstream&rsquo; master of <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> without actually push the tag directly to the repo.</p>

<p>So first I de-reference the tags to get the matching commit SHA for the tag I need to push:</p>

<pre><code>git show-ref --tags --dereference | grep play
9e82533b52d5be2f10f8c0ddacff848810b8d736 refs/tags/play-3.10.0001
a317c758ea3136347c4bc2a360c34fbacfce6d34 refs/tags/play-3.2.7
a317c758ea3136347c4bc2a360c34fbacfce6d34 refs/tags/play-3.2.7001
e97e27071414fdafba9ce95d4b7ca6c0c6da2a3c refs/tags/play-3.4.1001
cfc55b6a587eba190042045e1a686388923310b0 refs/tags/play-3.6.1001
b509d6711135bfba5b32cf3f7e2090964c67daa0 refs/tags/play-3.8.1001
</code></pre>

<p>That is done on my fork of the <a href="https://github.com/sushihangover/playscript">PlayScript</a> repo as I try to never work directly on the &lsquo;upstream&rsquo; master.</p>

<p>So in the case of tag &ldquo;play-3.10.0001&rdquo; that is not in the upstream PlayScript repo, I need to add it to the repo.</p>

<p>I switch the PlayScriptRedux org&rsquo;s <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> repo that I have a local clone of and update it.</p>

<p>First pull the latest changes, all done through pull-requests:</p>

<pre><code>git pull origin playscript
</code></pre>

<p>Now I can add the new tag:</p>

<pre><code>git tag play-3.10.0001 9e82533b52d5be2f10f8c0ddacff848810b8d736
</code></pre>

<p>And finally push it to the repo:</p>

<pre><code>git push origin play-3.10.0001

Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/PlayScriptRedux/playscript.git
 * [new tag]         play-3.10.0001 -&gt; play-3.10.0001
</code></pre>

<p>I still want to know if this is available through pull-requests somehow.</p>

<p><img class="right" src="http://sushihangover.github.io/images/gitlogo.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Exception Filters]]></title>
    <link href="http://sushihangover.github.io/playscript-exception-filters/"/>
    <updated>2015-08-17T18:34:18-07:00</updated>
    <id>http://sushihangover.github.io/playscript-exception-filters</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> (.play) now has Exception Filters like C# 6.0.</p>

<p>These are actually really cool and nice addition to ActionScript.</p>

<p>From the <a href="http://blogs.msdn.com/b/csharpfaq">C# Frequently Asked Questions</a> blog:</p>

<blockquote><p>Exception filters are a CLR capability that is exposed in Visual Basic and F#, but hasn’t been in C# – until now. This is what they look like in C#:</p></blockquote>

<pre><code>try { … } 
catch (MyException e) if (myfilter(e)) 
{ 
     … 
}
</code></pre>

<p><a href="http://blogs.msdn.com/b/csharpfaq/archive/2014/11/20/new-features-in-c-6.aspx">New Features in C# 6</a></p>

<p>And here is what they look like in PlayScript:</p>

<h3>play/test-ps-ex-filter-01.play</h3>

<pre><code>package {
    public class Foo {
        public static function Main():int {
        var x:int = 4;
        try {
            throw new Error("Throw");
        } catch (e:Error) if (x &gt; 0) {
            trace("Catch");
            return 0;
        }
        return 1;
        }
    }
}
</code></pre>

<h3>play/test-ps-ex-filter-02.play</h3>

<pre><code>package {
    public class Foo {
        public static function Main():int {
        var x:int = 4;
        try {
            x = 5;
            throw new Error("Throw");
        } catch (e:Error) if (x &lt; 5) {
            trace("No Catch Please");
            return 0;
        } catch (myError:Error) {
            trace("Catch Here");
            return 0;
        }
        return 1;
        }
    }
}
</code></pre>

<p>If you have any problems with them, post an <a href="https://github.com/PlayScriptRedux/playscript/issues">issue</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git   Resetting A File Back To Its Conflicted State]]></title>
    <link href="http://sushihangover.github.io/git-resetting-a-file-back-to-its-conflicted-state/"/>
    <updated>2015-08-06T17:29:21-07:00</updated>
    <id>http://sushihangover.github.io/git-resetting-a-file-back-to-its-conflicted-state</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> For some reason everytime I need to do this I forget the option. Maybe it is because the help for <em>git checkout &ndash;help</em> does not actually provide details for &ldquo;-m&rdquo; option.</p>

<p><code>git checkout -m &lt;filename&gt;
</code></p>

<p>This restores the unresolved state, including all information about parent and merge base, which allows restarting the resolution.</p>

<p>There is of course the <em>&ndash;theirs</em> and <em>&ndash;ours</em> options available during a checkout if a merge is underway, but those options are explained in the help and the name of the option is self-explanatory, but <strong>-m</strong> does not stick in my head for some reason&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Fire Demo With Scout]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-basic-shader/"/>
    <updated>2015-08-05T05:10:20-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-basic-shader</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> This is the Away3d Fire example running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler. <a href="https://github.com/playscriptredux/%0Aplayscript">Fork</a> me on github.</p>

<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Basic_Shading.as">Away3d example source code that is running in the demo</a></p>

<p>Using PlayScript Compiler 3.2.6002:</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('ym2w6rbYcAI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/ym2w6rbYcAI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/ym2w6rbYcAI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=ym2w6rbYcAI" id="ym2w6rbYcAI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">PlayScript - Away3d Basic Shading Demo</div>
</a>
<div class="video-info" >Xamarin Studio running the Away3d Basic Shading Demo using the PlayScript compiler

Using PlayScript v3.2.6002 

PlayScript @ http://playscriptredux.github.io

PlayScript Source Code @ https://github.com/playscriptredux

Blog @ http://sushihangover.github.io/

Royalty Free Background Music:
- “Across The Land" by MuLexic
- http://youtube.com/user/MuLexic</div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Linux Based Builds Now Available]]></title>
    <link href="http://sushihangover.github.io/playscript-linux-based-builds-now-avaiable/"/>
    <updated>2015-08-04T06:06:28-07:00</updated>
    <id>http://sushihangover.github.io/playscript-linux-based-builds-now-avaiable</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> I have cleaned up issues for the Linux builds and they are now working properly. See the <strong>Travis CI</strong> files in the CI directory and the .travis.yml file in the root of the <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> repo for details.</p>

<p><img class="right" src="http://blog.travis-ci.com/images/travis-mascot-200px.png"> <a href="http://travis-ci.org/">Travis CI </a> has also enabled OS-X builds for the PlayScript repo. Very cool company, great support and amazing that they offer this service for free to open source projects. They have a great company <a href="http://blog.travis-ci.com">blog</a> also&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Fire Demo With Scout]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-firedemowithscout/"/>
    <updated>2015-08-03T16:12:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-firedemowithscout</id>
    <content type="html"><![CDATA[<p>This is the Away3d Fire example running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler and using Adobe&rsquo;s <a href="http://www.adobe.com/devnet/scout.html">Scout</a> to profile it. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('-dVeQpB9BPo');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/-dVeQpB9BPo?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/-dVeQpB9BPo/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=-dVeQpB9BPo" id="-dVeQpB9BPo" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">PlayScript running Away3d Fire demo with Adobe Scout</div>
</a>
<div class="video-info" >Using PlayScript 3.2.6001, the Actionscript compiler for Mono, to compile and run the Away3d core and Basic_Fire demo within Xamarin Studio 5.9.x. You can see the MonoMac app connecting to Adobe Scout and sending  telemetry to profile the frames, traces, ActionScript events,  etc... More work needs to be done to make using Scout fully featured in profiling a PlayScript app, but this is a good start.

PlayScript @ http://playscriptredux.github.io

PlayScript Source Code @ https://github.com/playscriptredux

Blogging @ http://sushihangover.github.io/

Royalty Free Background Music:
- “Fog Rays" by MuLexic
- http://youtube.com/user/MuLexic</div>
</div>


<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Basic_Fire.as">Away3d example source code that is running in the demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Travis Ci Enabled For Repo]]></title>
    <link href="http://sushihangover.github.io/playscript-travis-ci-enabled-for-repo/"/>
    <updated>2015-08-03T12:54:06-07:00</updated>
    <id>http://sushihangover.github.io/playscript-travis-ci-enabled-for-repo</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> I have enabled Travis CI on the <a href="https://github.com/PlayScriptRedux/playscript">PlayScript</a> repo.</p>

<p>FYI: While the OS-X build is running fine, the linux build is failing as it has never really been tested (in the original Zngya release or The Redux version). This has been flagged as acceptable in Travis for now.</p>

<p> The CI builds are generously hosted and run on <a href="https://travis-ci.org/">Travis</a></p>

<p><img class="right" src="http://blog.travis-ci.com/images/travis-mascot-200px.png"></p>

<table>
<thead>
<tr>
<th style="text-align:center;">  Git Branch  </th>
<th style="text-align:center;">   Mac OS-X / Linux  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <strong><a href="https://github.com/PlayScriptRedux/playscript">playscript</a></strong> </td>
<td style="text-align:center;"> <a href="https://travis-ci.org/PlayScriptRedux/playscript/branches"><img src="https://travis-ci.org/PlayScriptRedux/playscript.svg?branch=playscript" alt="master nix" /></a> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Particles With Play Script Logo]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-intermediate-playscript/"/>
    <updated>2015-07-29T17:05:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-intermediate-playscript</id>
    <content type="html"><![CDATA[<p>This demo uses the the Away3d Intermediate Particle Explosions example as a base, but I reworked it slightly to use the PlayScript logo. It is running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('uhjTZjlo5YA');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/uhjTZjlo5YA?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/uhjTZjlo5YA/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=uhjTZjlo5YA" id="uhjTZjlo5YA" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Away3d Particle Explosions using the PlayScript logo</div>
</a>
<div class="video-info" >Using PlayScript 3.2.3001, the Actionscript compiler for Mono, to compile and run the Away3d core and Intermediate_PlayScriptParticleExplosion­s within Xamarin Studio 5.9.x
PlayScript @ http://playscriptredux.github.io

PlayScript Source Code @ https://github.com/playscriptredux

Blogging @ http://sushihangover.github.io/

Royalty Free Background Music:
- “Fog Rays" by MuLexic
- http://youtube.com/user/MuLexic</div>
</div>


<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_PlayScriptParticleExplosions.as">Away3d example source code that is running in the demo</a></p>

<p>Previous Away3d example: <a href="http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions/">Play Script | Away3d World Global Example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d Intermediate Particle Explosions]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions/"/>
    <updated>2015-07-24T14:01:50-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-intermediate-iparticle-explosions</id>
    <content type="html"><![CDATA[<p>This is the Away3d Intermediate Particle Explosions example running via Mono and Xamarin Studio using the <a href="http://playscriptredux.github.io">PlayScript</a> compiler. <a href="https://github.com/playscriptredux/playscript">Fork</a> me on github.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('KXi85ajraaM');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/KXi85ajraaM?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/KXi85ajraaM/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=KXi85ajraaM" id="KXi85ajraaM" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Away3d Particle Explosions running in PlayScript</div>
</a>
<div class="video-info" >Using PlayScript, the Actionscript compiler for Mono, to compile and run the Away3d core and Intermediate_ParticleExplosions within Xamarin Studio 5.9.x
PlayScript @ http://playscriptredux.github.io

PlayScript Source Code @ https://github.com/playscriptredux

Blogging @ http://sushihangover.github.io/

Royalty Free Background Music:
-  "MuLexic & Nekihirst - Sapphire Shine" by MuLexic 
-   http://youtube.com/user/MuLexic</div>
</div>


<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_ParticleExplosions.as">Away3d example source code that is running in the demo</a></p>

<p>Previous Away3d example: <a href="http://sushihangover.github.io/playscript-away3d-world-global-example/">Play Script | Away3d World Global Example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin | A Company With A Cool Dev Sense]]></title>
    <link href="http://sushihangover.github.io/xamarin-a-company-with-a-cool-dev-sense/"/>
    <updated>2015-07-23T21:49:16-07:00</updated>
    <id>http://sushihangover.github.io/xamarin-a-company-with-a-cool-dev-sense</id>
    <content type="html"><![CDATA[<p>Any <a href="http://xamarin.com/">company</a> that has a little fun with comments buried in html on their corporate web site to promote their job openings is all right by me :)</p>

<pre><code>    &lt;!--


          _      _ _       _     _         _                _                             _
         | |    | (_)     | |   | |       | |              | |                           (_)
       __| | ___| |_  __ _| |__ | |_    __| | _____   _____| | ___  _ __   ___ _ __ ___   _ ___
      / _` |/ _ \ | |/ _` | '_ \| __|  / _` |/ _ \ \ / / _ \ |/ _ \| '_ \ / _ \ '__/ __| | / __|
     | (_| |  __/ | | (_| | | | | |_  | (_| |  __/\ V /  __/ | (_) | |_) |  __/ |  \__ \ | \__ \
      \__,_|\___|_|_|\__, |_| |_|\__|  \__,_|\___| \_/ \___|_|\___/| .__/ \___|_|  |___/ |_|___/
                      __/ |                    _                   | |
                     |___/                    | |                  |_|
       ___  _   _ _ __   _ __ ___   __ _ _ __ | |_ _ __ __ _      ___ ___  _ __ ___   ___
      / _ \| | | | '__| | '_ ` _ \ / _` | '_ \| __| '__/ _` |    / __/ _ \| '_ ` _ \ / _ \
     | (_) | |_| | |    | | | | | | (_| | | | | |_| | | (_| |_  | (_| (_) | | | | | |  __/
      \___/ \__,_|_|    |_| |_| |_|\__,_|_| |_|\__|_|  \__,_(_)  \___\___/|_| |_| |_|\___|
                        _ _              _ _   _
                       (_) |            (_) | | |
      ___  __ _ _   _   _| |_  __      ___| |_| |__    _   _ ___
     / __|/ _` | | | | | | __| \ \ /\ / / | __| '_ \  | | | / __|
     \__ \ (_| | |_| | | | |_   \ V  V /| | |_| | | | | |_| \__ \_
     |___/\__,_|\__, | |_|\__|   \_/\_/ |_|\__|_| |_|  \__,_|___(_)
                 __/ |
                |___/


     xamarin.com/jobs



    --&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script | Away3d World Global Example]]></title>
    <link href="http://sushihangover.github.io/playscript-away3d-world-global-example/"/>
    <updated>2015-07-23T18:17:12-07:00</updated>
    <id>http://sushihangover.github.io/playscript-away3d-world-global-example</id>
    <content type="html"><![CDATA[<p>I finally got all the bits together to get the OS-X OpenGL version of the <a href="http://playscriptredux.github.io">PlayScript</a> flash stage running the <a href="http://away3d.com">Away3d</a> 3D engine.</p>

<p>500 ActionScript files with over 20000 lines of actual code from <a href="https://github.com/PlayScriptRedux/away3d-core-fp11">away3d-core-fp11</a> and <a href="https://github.com/PlayScriptRedux/away3d-examples-fp11">away3d-examples-fp11</a> compiled to <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language">CIL</a> using the PlayScript mcs compiler. :-)</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('XlC93cXRlgI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/XlC93cXRlgI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/XlC93cXRlgI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=XlC93cXRlgI" id="XlC93cXRlgI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Away3d Globe example running in PlayScript</div>
</a>
<div class="video-info" >Using PlayScript, the Actionscript compiler for Mono, to compile and run the Away3d core and Intermediate_Globe example within Xamarin Studio 5.9.x
PlayScript @ http://playscriptredux.github.io

PlayScript Source Code @ https://github.com/playscriptredux

Blogging @ http://sushihangover.github.io/

Royalty Free Background Music by Origen from: http://www.origenmusic.com/origen-licensing.html</div>
</div>


<p><a href="https://github.com/PlayScriptRedux/away3d-examples-fp11/blob/playscript/src/Intermediate_Globe.as">Away3d example source code that is running in the demo</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;cloc away3d-core-fp11
</span><span class='line'>     464 text files.
</span><span class='line'>     464 unique files.
</span><span class='line'>      16 files ignored.
</span><span class='line'>
</span><span class='line'>http://cloc.sourceforge.net v 1.62  T=3.45 s (130.1 files/s, 23410.8 lines/s)
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Language                     files          blank        comment           code
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>ActionScript                   443          12601          12443          54059
</span><span class='line'>MSBuild script                   3              0              0           1551
</span><span class='line'>C#                               3             39             11            111
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>SUM:                           449          12640          12454          55721
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>&gt;cloc away3d-examples-fp11
</span><span class='line'>     110 text files.
</span><span class='line'>     109 unique files.
</span><span class='line'>      60 files ignored.
</span><span class='line'>
</span><span class='line'>http://cloc.sourceforge.net v 1.62  T=5.05 s (10.5 files/s, 3247.7 lines/s)
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Language                     files          blank        comment           code
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>ActionScript                    36           1936           2592           8073
</span><span class='line'>Javascript                       2            121            148           1186
</span><span class='line'>MSBuild script                   3              0              0            808
</span><span class='line'>C#                               7            414             99            740
</span><span class='line'>XML                              2             19             10            105
</span><span class='line'>HTML                             2              7             29            102
</span><span class='line'>CSS                              1              1              1              4
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>SUM:                            53           2498           2879          11018
</span><span class='line'>-------------------------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>Note: <a href="http://www.telestream.net/screenflow/overview.htm">ScreenFlow</a> is running on the background so the world rotation is a little choppy at times, without the screen/video capture running, the example runs at 60 fps @ 4% CPU on this old MacBookPro with a Intel Core 2 Duo 2.53 GHz processor.</p>

<p>FYI: ScreenFlow is a <strong>must</strong> have if you are screen capturing video on OS-X. It really is the <em>bomb</em> at what it does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio / Mono Develop   'unexpected Binary Element: 0' Build Failure]]></title>
    <link href="http://sushihangover.github.io/xamarin-studio-slash-monodevelop-unexpected-binary-element-0-build-failure/"/>
    <updated>2015-07-23T11:21:41-07:00</updated>
    <id>http://sushihangover.github.io/xamarin-studio-slash-monodevelop-unexpected-binary-element-0-build-failure</id>
    <content type="html"><![CDATA[<p>Getting an &lsquo;Unexpected binary element: 0&rsquo; when you are trying to build a project in Xamarin Studio / MonoDevelop? I found this when using a parallal mono install on OS-X and it seems others have also.</p>

<p>If you are also getting it build failure, please add your findings to:</p>

<p><a href="https://bugzilla.xamarin.com/show_bug.cgi?id=29958">Bug 29958 - Mono 4.0 - Causing &lsquo;Unexpected binary element: 0&rsquo; build failure when compiling against previous mono version</a></p>

<p>It appears not to be OS dependent either:</p>

<p><a href="http://stackoverflow.com/questions/31594099/building-empty-asp-net-project-in-monodevelop-xamarin-studio-generates-unexpe">Building empty ASP.NET project in MonoDevelop (Xamarin Studio) generates “Unexpected binary element: 0” error</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git   Squash Last X Commits Into One]]></title>
    <link href="http://sushihangover.github.io/git-squash-last-x-commits-into-one/"/>
    <updated>2015-07-17T10:35:06-07:00</updated>
    <id>http://sushihangover.github.io/git-squash-last-x-commits-into-one</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"></p>

<p>Use git rebase -i <after> and replace &ldquo;pick&rdquo; on the second and subsequent commits with &ldquo;squash&rdquo; or &ldquo;fixup&rdquo;, as described in the Git <a href="http://git-scm.com/docs/git-rebase#_interactive_mode">manual</a>.</p>

<p><after> is the commit after the last one that you wish squash together, i.e. parent of the oldest commit you want to squash.</p>

<p>Example:</p>

<p>You want to squash the last three commits into one, so lets look at the log to make sure that is want you want and to grab the commit SHA:</p>

<blockquote><p>git log -n 4 &ndash;pretty=oneline</p></blockquote>

<pre><code>f57f7f9c28646d5049aa6b90f33de23e1e53ad2e More test cleanups
07074c8058ed69224670987860c9db47858dab6e PlayScript compiler tests using a variant of compiler-tester
3b80dc06b990553042b4b0cde486e36522f4171b Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
db6506ca17e49f0829ca9859a7994ddf840dbff4 * Tamarin-Redux Test Cleanup * Remove old Tamarin tests, the redux versions are the last released version
</code></pre>

<p>I want to squash the first three commits, so grab the forth SHA and:</p>

<blockquote><p>git rebase -i db6506ca17e49f0829ca9859a7994ddf840dbff4</p></blockquote>

<pre><code>pick 3b80dc0 Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
pick 07074c8 PlayScript compiler tests using a variant of compiler-tester
pick f57f7f9 More test cleanups

# Rebase db6506c..f57f7f9 onto db6506c (3 command(s))
</code></pre>

<p>Following the directions in the commentted text. In this example: change the second and third items to squash:</p>

<pre><code>pick 3b80dc0 Remove .as/.play from mcs/tests These have been already moved to mcs/play_tests/[as|play] and intregrated into the mono compiler-tester (make [astest|playtest|playscript]
squash 07074c8 PlayScript compiler tests using a variant of compiler-tester
squash f57f7f9 More test cleanups

# Rebase db6506c..f57f7f9 onto db6506c (3 command(s))
</code></pre>

<p>Save those changes and exit the editor and the rebase will execute</p>

<pre><code>[detached HEAD ~~~
~~~
Successfully rebased and updated refs/heads/play-tests.
</code></pre>

<p>Confirm via:</p>

<blockquote><p>git log -n 2</p></blockquote>

<p>FYI: This is something you should do to your feature branch before pushing to your fork to make that <a href="http://github.com/playscriptredux/playscript">PlayScript</a> pull request. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script : Tests Are Now Structured Like Mono's]]></title>
    <link href="http://sushihangover.github.io/playscript-tests-are-now-structured-like-monos/"/>
    <updated>2015-07-16T20:08:45-07:00</updated>
    <id>http://sushihangover.github.io/playscript-tests-are-now-structured-like-monos</id>
    <content type="html"><![CDATA[<p>I <a href="https://github.com/PlayScriptRedux/playscript/pull/8">moved all the .play and .as tests</a> under the play_test directory. They are in two separtate dirs now, <strong>play</strong> for the extended PlayScript language/format and <strong>as</strong> for the standard ActionScript tests.</p>

<p>In doing this and making them conform to how Mono&rsquo;s compiler tests are written and run, I ended up copying the tools/compiler-tester to tools/playc-tester. The number of changes I was making to the program seems out of place to keep in within Mono&rsquo;s version and long term this will keep up with trying to keep any changes to the actual Mono code base at a minimun to allow faster and cleaner merging of their master branch. This tool will have very little commit activity compared to the mcs.exe/playc.exe compilers.</p>

<h3>Playc-tester.exe</h3>

<pre><code>mono playc-tester.exe
PlayScript compiler tester, (C) 2009 Novell, Inc. (C) SushiHangover/RobertN
playc-tester -mode:[pos|neg] -compiler:FILE -files:file-list [options]

   -compiler:FILE   The file which will be used to compiler tests
   -compiler-options:OPTIONS  Add global compiler options
   -il:IL-FILE      XML file with expected IL details for each test
   -issues:FILE     The list of expected failures
   -log:FILE        Writes any output also to the file
   -help            Lists all options
   -mode:[pos|neg]  Specifies compiler test mode
   -safe-execution  Runs compiled executables in separate app-domain
   -update-il       Updates IL-FILE to match compiler output
   -update-ref      Updates the debug xml to match debug compiler mdb output
   -verbose         Prints more details during testing
</code></pre>

<p>Example test run of the current as tests:</p>

<pre><code>make astest
~~~
./as/test-debug-015.as...   NOT TESTED
./as/test-debug-AllowDynamics.as... KNOWN ISSUE (Execution error)
./as/test-debug-DivideByZeroTest.as...      KNOWN ISSUE (Compilation error)
./as/test-debug-UntypedVariableTest.as...   KNOWN ISSUE (Compilation error)
Done

40 test cases passed (93.02%)
1 test(s) ignored
3 known issue(s)
</code></pre>

<p>With these changes and the addition of the playshell REPL in the last set of changes will allow the Tamarin Redux tests to start coming online. Then CI deployment will be the step after that.</p>

<p>As always <a href="https://github.com/PlayScriptRedux/playscript/issues">post</a> any isses that you find. ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script   Now Has A Repl (Playshell)]]></title>
    <link href="http://sushihangover.github.io/playscript-now-has-a-repl-playshell/"/>
    <updated>2015-07-15T06:35:49-07:00</updated>
    <id>http://sushihangover.github.io/playscript-now-has-a-repl-playshell</id>
    <content type="html"><![CDATA[<p>PlayScript now has a REPL for ActionScript scripting. This is very <strong>alpha</strong> right now and needs a lot of love. It will be used for running the <a href="http://hg.mozilla.org/tamarin-redux">Tamarin Redux</a> <a href="https://www.mozilla.org/projects/tamarin/">acceptance tests</a> so it will be evolving as those regression tests come online.</p>

<p>It is available in the <a href="https://github.com/PlayScriptRedux/playscript">master branch</a> : 17aac5473528370b96e3349751bd2a8a017e6779</p>

<p>Check it out and post any <a href="https://github.com/PlayScriptRedux/playscript/issues/new">issues</a> that you find.</p>

<pre><code>* Added playshell : This is a PlayScript REPL (aka: like csharp REPL)
  - For use with Tamarin Redux test; they use Asset scripts with a test package
  - Very alpha at this point
  - Need to add PlayScript style 'import'
* Added PsOnlyMode to compiler setting
  - Whether to enable PlayScript compiler only mode. Defaults to false.
* mcs.master.mdw : XS/MD Workspace that will hold Solutions for all mcs
  - Added tools/csharp and tools/playshell
* CSProj files updated via Make2CSProjUpdater to allow use in XS/MD:
  - Mono.PlayScript.csproj (and .sln)
  - Mono.CSharp.csproj (and .sln)
  - tools/charp.csproj (and .sln)
  - tools/playshell.csproj (and .sln)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Script Redux   Make2 Cs Proj Updater]]></title>
    <link href="http://sushihangover.github.io/playscript-redux-make2csprojupdater/"/>
    <updated>2015-07-14T15:06:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-redux-make2csprojupdater</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> I just posted a new tool project on <a href="https://github.com/PlayScriptRedux/Make2CSProjUpdater">Github</a> that I am using with Mono and PlayScript to make things easier with Xamarin Studio / MonoDevelop.</p>

<h2>Make2CSProjUpdater</h2>

<h4>Update the .csproj ItemGroup/Compile elements from a sourcefile list.</h4>

<p>This project takes a source list of file, usually from an external Makefile source (i.e. Mono.CSharp.dll.sources) and a C# (.csproj) project file and will update/sync the source list into the project file.</p>

<p>As an author of the <a href="http://github.com/playscriptredux/playscript">PlayScript Redux</a> project, there are a large number of Mono .csproj files that are not keep up to date with the Makefile source lists. The Makefile source lists are a known good source as they are used to build Mono and the project files are not used in that capicity. But in development and debugging of the Mono Compiler (mcs.exe) and PlayScript Compiler (playc.exe), the use of Xamarian Studio / MonoDevelop IDE makes life so much easier and thus the need for up to date project (.csproj) files. :-)</p>

<p>Note: This project is generic, just a text file containing a list of filenames and a .csproj file.</p>

<p>Note: Found another use; dumping a list of files via find/ls/etc. to a file and updating a blank project file with that source. This provided a quick jumpstart for a few projects that did not include project files or were so outdated that the project files had to be recreated.</p>

<h3>Usage:</h3>

<pre><code>make2csprojupdater.exe -h
Make2CSProjectUpdate / ©SushiHangover 2015
Update the .csproj ItemGroup/Compile elements from a sourcefile list.

Options:
  -p, --proj=VALUE           The project filename (.csproj) to update.
  -s, --sources=VALUE        The filename of the Makefile source list.
  -i, --interactive          Confirmation prompt to update/save the project
                               file.
  -v, --verbose              Increase message verbosity.
  -h, --help                 Show this message and exit
</code></pre>

<p>Sample Usage:</p>

<pre><code>  mono make2csprojupdater.exe -p Sample/Mono.CSharp.csproj -s Sample/Mono.CSharp.dll.sources -v -i
# Make source files : 68
# Project source files  : 58

# Project needs the following changes    : Sample/Mono.CSharp.csproj
# Delete:   ..\..\mcs\doc-bootstrap.cs
# Delete:   cs-parser.cs
# Delete:   ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Delete:   ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Add:  ../../mcs/ps-lang.cs
# Add:  ../../mcs/ps-tokenizer.cs
# Add:  ../../mcs/ps-codegen.cs
# Add:  ../../mcs/cxx-emit.cs
# Add:  ../../mcs/cxx-target.cs
# Add:  ../../mcs/inliner.cs
# Add:  ../../mcs/intrinsics.cs
# Add:  ../../mcs/js-emit.cs
# Add:  ../../mcs/js-target.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Add:  ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Add:  ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Add:  ../../build/common/Consts.cs
# Add:  ../../mcs/cs-parser.cs
# Add:  ../../mcs/ps-parser.cs
# Add:  Assembly/AssemblyInfo.cs

Make changes? [y/n]:y
# Saving backup:    Sample/Mono.CSharp.csproj.bak
# Deleting: ..\..\mcs\doc-bootstrap.cs
# Deleting: cs-parser.cs
# Deleting: ..\corlib\Mono.Security.Cryptography\CryptoConvert.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolFile.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolTable.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\MonoSymbolWriter.cs
# Deleting: ..\Mono.CompilerServices.SymbolWriter\SourceMethodBuilder.cs
# Adding:   ../../mcs/ps-lang.cs
# Adding:   ../../mcs/ps-tokenizer.cs
# Adding:   ../../mcs/ps-codegen.cs
# Adding:   ../../mcs/cxx-emit.cs
# Adding:   ../../mcs/cxx-target.cs
# Adding:   ../../mcs/inliner.cs
# Adding:   ../../mcs/intrinsics.cs
# Adding:   ../../mcs/js-emit.cs
# Adding:   ../../mcs/js-target.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolFile.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/MonoSymbolTable.cs
# Adding:   ../../class/Mono.CompilerServices.SymbolWriter/SourceMethodBuilder.cs
# Adding:   ../../class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs
# Adding:   ../../build/common/Consts.cs
# Adding:   ../../mcs/cs-parser.cs
# Adding:   ../../mcs/ps-parser.cs
# Adding:   Assembly/AssemblyInfo.cs
# Saving project:   Sample/Mono.CSharp.csproj
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git   Turn Multiple Commits Into A Single Commit]]></title>
    <link href="http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit/"/>
    <updated>2015-06-30T18:10:36-07:00</updated>
    <id>http://sushihangover.github.io/git-turn-multiple-commits-into-a-single-commit</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> Getting ready for an upstream pull request? You really need to turn it into a single commit for a clean request that will result in a fast-forward merge.</p>

<h3>Switch to the upstream/master branch and make sure you are up to date.</h3>

<pre><code>git checkout master
git fetch upstream/master   
git merge master
</code></pre>

<h3>Create a new feature/topic branch:</h3>

<pre><code>git checkout -b MyPullRequest
git merge MyMultiCommitBranch
</code></pre>

<h3>Reset the branch to origin&rsquo;s state.</h3>

<pre><code>git reset origin/MyPullRequest
git status
</code></pre>

<p><strong>Note: Git now considers all changes as unstaged changes.</strong></p>

<h3>We can add these changes as one commit.</h3>

<pre><code>git add --all
git commit
</code></pre>

<p>You can push those changes to your remote repo and then issue that pull request to the upstream that you forked from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git   Create A New Branch With Non Commited Changes]]></title>
    <link href="http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes/"/>
    <updated>2015-06-29T05:28:05-07:00</updated>
    <id>http://sushihangover.github.io/git-create-a-new-branch-with-non-commited-changes</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png"> Have you started making changes and than realize that you should have created a new branch first. Well, there is a slick way to create a new branch and have those changes &lsquo;moved&rsquo; to from master to your topic (the new branch).</p>

<pre><code>git branch newbranch
git reset --hard HEAD
git checkout newbranch
</code></pre>

<p>This works even if you have made commits to your local branch, just subsititute <strong>HEAD</strong> with the number of commits back you would like to go, i.e. <strong>HEAD~2</strong>, or use the SHA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Os X + Mono + Rosyln + Code Formatter]]></title>
    <link href="http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter/"/>
    <updated>2015-06-25T06:20:17-07:00</updated>
    <id>http://sushihangover.github.io/mono-plus-rosyln-plus-codeformatter</id>
    <content type="html"><![CDATA[<p>CodeFormatter is a tool that uses Roslyn to automatically rewrite the source to follow Microsoft&rsquo;s coding styles, which are <a href="https://github.com/dotnet/corefx/blob/master/Documentation/coding-style.md">documented here</a>.</p>

<p>CodeFormatter has been released as open-source for 6 months now, but I have not had a chance to look at it.</p>

<p>With Roslyn compiling on OS-X and I had a couple of projects that really needed to be cleaned up, I thought I would give it a try.</p>

<p>15 minutes in total to clone the repo and get things built properly, would have been quicker but the VS solution file is not very Xamanin Studio/MonoDevelop friendly as it includes ToolVersion 14 items (That would be included in VS 2015 beta).</p>

<p>But those projects are not needed to get the main program working&hellip;</p>

<h3>mono ./CodeFormatter.exe</h3>

<pre><code>Must specify at least one project / solution / rsp to format
CodeFormatter [/file:&lt;filename&gt;] [/lang:&lt;language&gt;] [/c:&lt;config&gt;[,&lt;config&gt;...]&gt;]
    [/copyright:&lt;file&gt; | /nocopyright] [/tables] [/nounicode]
    [/rule(+|-):rule1,rule2,...]  [/verbose]
    &lt;project, solution or response file&gt;

    /file        - Only apply changes to files with specified name
    /lang        - Specifies the language to use when a responsefile is
                   specified. i.e. 'C#', 'Visual Basic', ... (default: 'C#')
    /c           - Additional preprocessor configurations the formatter
                   should run under.
    /copyright   - Specifies file containing copyright header.
                   Use ConvertTests to convert MSTest tests to xUnit.
    /nocopyright - Do not update the copyright message.
    /tables      - Let tables opt out of formatting by defining
                   DOTNET_FORMATTER
    /nounicode   - Do not convert unicode strings to escape sequences
    /rule(+|-)   - Enable (default) or disable the specified rule
    /rules       - List the available rules
    /verbose     - Verbose output
</code></pre>

<h3>mono ./CodeFormatter.exe /rules</h3>

<pre><code>Name                 Description
==============================================
BraceNewLine         :Ensure all braces occur on a new line
Copyright            :Insert the copyright header into every file
NewLineAbove         :Ensure there is a new line above the first namespace and using in the file
CustomCopyright      :Remove any custom copyright header from the file
UsingLocation        :Place using directives outside namespace declarations
UnicodeLiterals      :Use unicode escape sequence instead of unicode literals
ExplicitVisibility   :Ensure all members have an explicit visibility modifier
IllegalHeaders       :Remove illegal headers from files
FormatDocument       :Run the language specific formatter on every document
ExplicitThis         :Remove explicit this/Me prefixes on expressions except where necessary
ReadonlyFields       :Mark fields which can be readonly as readonly
FieldNames           :Prefix private fields with _ and statics with s_
</code></pre>

<p> I&rsquo;ll be checking next to see if it really works on some source code. ;-)</p>
]]></content>
  </entry>
  
</feed>
