<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SushiHangover]]></title>
  <link href="http://sushihangover.github.io/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2016-09-25T10:59:53-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharpen]]></title>
    <link href="http://sushihangover.github.io/sharpen/"/>
    <updated>2016-09-25T10:44:44-07:00</updated>
    <id>http://sushihangover.github.io/sharpen</id>
    <content type="html"><![CDATA[<p>I needed to convert some Java code to C# and one of the best ways that I ever found is to use <code>Sharpen</code>. This used to be available as a Eclipse plugin but you can find a cli version at Mono&rsquo;s Github account:</p>

<ul>
<li><a href="https://github.com/mono/sharpen">https://github.com/mono/sharpen</a></li>
</ul>


<p>One of the <em>issues</em> in running Sharpen is that it requires Java 1.7, <strong>NOT 1.6, nor 1.8.</strong>.</p>

<p>So you need to have a Java 7 install. An easy way if you are already using homebrew, is available via a cask:</p>

<pre><code>brew install Caskroom/versions/java7
</code></pre>

<p>Note: If you get errors, make sure that your casks are updated, <code>brew upgrade brew-cask</code></p>

<h4>Current JDK:</h4>

<pre><code>/usr/libexec/java_home
/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
</code></pre>

<h4>Get a list of Install JDKs:</h4>

<pre><code>ls -l1 /Library/Java/JavaVirtualMachines/
1.6.0.jdk
jdk1.7.0_71.jdk
jdk1.7.0_80.jdk
jdk1.8.0_92.jdk
</code></pre>

<h4>Export a &ldquo;new home&rdquo;:</h4>

<pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home
</code></pre>

<p>Now I can build and run <code>sharpen</code>, i.e.:</p>

<pre><code>mvn clean test
mvn install
java -jar src/target/sharpencore-0.0.1-SNAPSHOT-jar-with-dependencies.jar /Users/sushi/github/PlayParser
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuget and MSBuild Targets]]></title>
    <link href="http://sushihangover.github.io/nuget-and-msbuild-targets/"/>
    <updated>2016-01-17T00:18:21-08:00</updated>
    <id>http://sushihangover.github.io/nuget-and-msbuild-targets</id>
    <content type="html"><![CDATA[<p>In adding support for <a href="https://msdn.microsoft.com/en-us/library/ms171483.aspx">incremental</a> MSBuild support for Mono&rsquo;s <a href="https://github.com/mono/mono/tree/master/mcs/jay">Jay</a> (Yacc-based) parser generator I could not get my resulting MSBuild target to automatically add the import statement to the <code>.csproj</code> via the nuget I created. The <code>.target</code> file was functional and correct and inside a &ldquo;build&rdquo; dir, but it would not update the project file, over and over I tested, looked at different nuget version, re-read the docs, etc&hellip; still no luck&hellip;</p>

<p>I ended up reading the blog posting for the Nuget v2.5 release for &ldquo;Support for Native Projects&rdquo; was my answer:</p>

<blockquote><p>the file name must match your package id with either a “.props” or “.targets” extension</p></blockquote>

<p>Also the release notes for version 2.5 they state this:</p>

<blockquote><p>Under this folder, you can place two files with fixed names, {packageid}.targets or {packageid}.props.</p></blockquote>

<p>Why are these &lsquo;notes&rsquo; not in the &lsquo;normal&rsquo; documention section and only listed on a blog posting and in release notes?</p>

<p>So in-case someone else needs this information:</p>

<p><a href="http://blog.nuget.org/20130426/native-support.html">Support for Native Projects</a></p>

<p><a href="http://docs.nuget.org/release-notes/nuget-2.5">NuGet 2.5 Release Notes</a></p>

<h2>Automatic import of msbuild targets and props files</h2>

<p>A new conventional folder has been created at the top level of the NuGet package. As a peer to \lib, \content, and \tools, you can now include a &lsquo;\build&rsquo; folder in your package. Under this folder, you can place two files with fixed names, {packageid}.targets or {packageid}.props. These two files can be either directly under \build or under framework-specific folders just like the other folders. The rule for picking the best-matched framework folder is exactly the same as in those.</p>

<p>When NuGet installs a package with \build files, it will add an MSBuild <Import> element in the project file pointing to the .targets and .props files. The .props file is added at the top, whereas the .targets file is added to the bottom.</p>

<h2>MSBuild Integration</h2>

<p>C++ projects tend to have many different configurations–more than what NuGet is able to handle. To address NuGet’s configuration limitations, we are relying heavily on MSBuild properties and targets for native packages. These MSBuild properties and targets do the heavy lifting of providing references at build time, based on your project’s configuration.</p>

<p>To make MSBuild integration better, NuGet has created a new convention for automatically importing MSBuild properties and targets from a NuGet package. Alongside the existing \content, \lib, and \tools folders, NuGet now recognizes a new top-level folder: \build.</p>

<p>Within the \build folder, you can provide a “.props” file and/or a “.targets” file that will be automatically imported into the project. For this convention, the file name must match your package id with either a “.props” or “.targets” extension. For example, the ‘cpprestsdk’ package includes a ‘cpprestsdk.targets’ file in its \build folder. Files with the “.props” extension will be imported at the top of the project file, and files with the “.targets” extension will be imported at the bottom of the project file.</p>

<p>Note that this \build folder can be used for all NuGet packages and not just native packages. The \build folder respects target frameworks just like the \content, \lib, and \tools folders do. This means you can create a \build\net40 folder and a \build\net45 folder and NuGet will import the appropriate props and targets files into the project. You no longer need to write PowerShell install.ps1/uninstall.ps1 scripts to import MSBuild targets files!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript and MSBuild Project Type GUIDs]]></title>
    <link href="http://sushihangover.github.io/playscript-and-msbuild-project-type-guids/"/>
    <updated>2016-01-11T00:16:49-08:00</updated>
    <id>http://sushihangover.github.io/playscript-and-msbuild-project-type-guids</id>
    <content type="html"><![CDATA[<p>Within the <a href="https://github.com/PlayScriptRedux/PlayScript.Addin">PlayScriptRedux/PlayScript.Addin</a> there are two project guids defined for PlayScript and ActionScript projects.</p>

<p>These are the Project Types, <em>not</em> the unique ProjectGuid, i.e:</p>

<pre><code>&lt;ProjectTypeGuids&gt;&lt;/ProjectTypeGuids&gt; 
</code></pre>

<blockquote><p>Note: I do not know of a single authoritative source for Project Type GUIDs, seems like it <em>should</em> be Microsoft, but I can not find a master published list on their website.</p></blockquote>

<h4>Highlighted below (PlayScript &amp; ActionScript):</h4>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=600
 style='width:600.0pt;border-collapse:collapse'>
 <tr style='height:17.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;border-top:solid black 1.0pt;
  border-left:none;border-bottom:solid black 1.0pt;border-right:none;
  background:#4472C4;padding:0in 5.4pt 0in 5.4pt;height:17.0pt'>
  <p class=MsoNormal><b><span style='color:white'>Project Type</span></b></p>
  </td>
  <td width=300 nowrap valign=bottom style='width:300.0pt;border-top:solid black 1.0pt;
  border-left:none;border-bottom:solid black 1.0pt;border-right:none;
  background:#4472C4;padding:0in 5.4pt 0in 5.4pt;height:17.0pt'>
  <p class=MsoNormal><b><span style='color:white'>Guid</span></b></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:yellow;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><b><span style='color:black'>ActionScript (via PlayScript)</span></b></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:yellow;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><b><span style='color:black'>{464403d2-eb41-442a-a1f1-9bf858b8865f}</span></b></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>ASP.NET MVC 1</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{603C0E0B-DB56-11DC-BE95-000D561079B0}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>ASP.NET MVC 2</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F85E285D-A4E0-4152-9332-AB1D724D3325}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>ASP.NET MVC 3</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E53F8FEA-EAE0-44A6-8774-FFD645390401}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>ASP.NET MVC 4</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E3E379DF-F4C6-4180-9B81-6769533ABE47}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>ASP.NET MVC 5</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{349C5851-65DF-11DA-9384-00065B846F21}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>C#</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>C++</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Database</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{A9ACE9BB-CECE-4E62-9AA4-C7E7C5BD2124}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Database (other project types)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{4F174C21-8C12-11D0-8340-0000F80270F8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Deployment Cab</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{3EA9E505-35AC-4774-B492-AD1749C4943A}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Deployment Merge Module</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{06A35CCD-C46D-44D5-987B-CF40FF872267}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Deployment Setup</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{978C614F-708E-4E1A-B201-565925725DBA}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Deployment Smart Device Cab</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{AB322303-2255-48EF-A496-5904EB18DA55}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Distributed System</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F135691A-BF7E-435D-8960-F99683D2D49C}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Dynamics 2012 AX C# in AOT</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{BF6F8E12-879D-49E7-ADF0-5503146B24B8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>F#</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F2A71F9B-5D33-465A-A702-920D77279786}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>J#</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Legacy (2003) Smart Device (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{20D4826A-C6FA-45DB-90F4-C717570B9F32}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Legacy (2003) Smart Device
  (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{CB4CE8C6-1BDB-4DC7-A4D3-65A1999772F8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Model-View-Controller v2 (MVC 2)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F85E285D-A4E0-4152-9332-AB1D724D3325}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Model-View-Controller v3 (MVC 3)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E53F8FEA-EAE0-44A6-8774-FFD645390401}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Model-View-Controller v4 (MVC 4)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E3E379DF-F4C6-4180-9B81-6769533ABE47}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Model-View-Controller v5 (MVC 5)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{349C5851-65DF-11DA-9384-00065B846F21}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Mono for Android</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>MonoTouch</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{6BC8ED88-2882-458C-8E55-DFD12B67127B}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>MonoTouch Binding</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F5B4F3BC-B597-4E2B-B552-EF5D8A32436F}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:yellow;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><b><span style='color:black'>PlayScript</span></b></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:yellow;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><b><span style='color:black'>{464403d2-eb41-442a-a1f1-9bf858b8865f}</span></b></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Portable Class Library</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{786C830F-07A1-408B-BD7F-6EE04809D6DB}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>SharePoint (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{593B0543-81F6-4436-BA1E-4747859CAAE2}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>SharePoint (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{EC05E597-79D4-47f3-ADA0-324C4F7C7484}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>SharePoint Workflow</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F8810EC1-6754-47FC-A15F-DFABD2E3FA90}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Silverlight</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{A1591282-1198-4647-A2B1-27E5FF5F6F3B}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Smart Device (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{4D628B5B-2FBC-4AA6-8C16-197242AEB884}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Smart Device (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{68B1623D-7FB9-47D8-8664-7ECEA3297D4F}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Solution Folder</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{2150E333-8FDC-42A3-9474-1A3956D46DE8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Test</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{3AC096D0-A1C2-E12C-1390-A8335801FDAB}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>VB.NET</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Visual Database Tools</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{C252FEB5-A946-4202-B1D4-9916A0590387}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Visual Studio Tools for
  Applications (VSTA)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{A860303F-1F3F-4691-B57E-529FC101A107}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Visual Studio Tools for Office
  (VSTO)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{BAA0C2D2-18E2-41B9-852F-F413020CAA33}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Web Application</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{349C5851-65DF-11DA-9384-00065B846F21}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Web Site</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{E24C65DC-7377-472B-9ABA-BC803B73C61A}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows (Visual C++)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Communication Foundation
  (WCF)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{3D9AD99F-2412-4246-B90B-4EAA41C64699}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Phone 8/8.1 App (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{C089C8C0-30E0-4E22-80C0-CE093F111A43}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Phone 8/8.1 App (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{DB03555F-0C8B-43BE-9FF9-57896B3C5E56}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Phone 8/8.1 Blank/Hub/Webview</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{76F1466A-8B6D-4E39-A767-685A06062A39}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Presentation Foundation
  (WPF)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{60DC8134-EBA5-43B8-BCC9-BB4BC16C2548}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Windows Store (Metro) Apps &amp;
  Components</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{BC8A1FFA-BEE3-4634-8014-F334798102B3}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Workflow (C#)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{14822709-B5A1-4724-98CA-57A101D1B079}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Workflow (VB.NET)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{D59BE175-2ED0-4C54-BE3D-CDAA9F3214C8}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Workflow Foundation</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{32F31D43-81CC-4C15-9DE6-3FC5453562B6}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Xamarin.Android</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>Xamarin.iOS</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{6BC8ED88-2882-458C-8E55-DFD12B67127B}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>XNA (Windows)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{6D335F3A-9D43-41b4-9D22-F6F17C4BE596}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>XNA (XBox)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;background:#D9D9D9;
  padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{2DF5C3F4-5A5F-47a9-8E94-23B4456F55E2}</span></p>
  </td>
 </tr>
 <tr style='height:16.0pt'>
  <td width=256 nowrap valign=bottom style='width:256.0pt;border:none;
  border-bottom:solid black 1.0pt;padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>XNA (Zune)</span></p>
  </td>
  <td width=250 nowrap valign=bottom style='width:250.0pt;border:none;
  border-bottom:solid black 1.0pt;padding:0in 5.4pt 0in 5.4pt;height:16.0pt'>
  <p class=MsoNormal><span style='color:black'>{D399B71A-8929-442a-A9AC-8BEC78BB2433}</span></p>
  </td>
 </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript and NUnit]]></title>
    <link href="http://sushihangover.github.io/playscript-and-nunit/"/>
    <updated>2016-01-10T23:29:28-08:00</updated>
    <id>http://sushihangover.github.io/playscript-and-nunit</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png"> I&rsquo;ve add a NUnit template to the <a href="https://github.com/PlayScriptRedux/PlayScript.Addin">PlayScriptRedux/PlayScript.Addin</a></p>

<p>I do not have a website for the <code>.mpack</code> setup yet, so grab the latest release <a href="https://github.com/PlayScriptRedux/PlayScript.Addin/releases">here</a>.</p>

<p><img src="images/XS_Play_NUnit.png" alt="PlayScript NUnit" /></p>

<h3>MonoDevelop.PlayScript_5.10.2.2.mpack</h3>

<h4>New:</h4>

<ul>
<li>Added NUnit template</li>
</ul>


<h3>Prior:</h3>

<ul>
<li>Support for the nuget feed (<a href="https://www.myget.org/F/playscript/">https://www.myget.org/F/playscript/</a>)</li>
<li>Initial Release for Xamarin Studio v5.10.2.0+</li>
</ul>


<p>Functional, but it still needs a lot of love to be on par with CSharp&rsquo;s NRefactory&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding nuget packages to your MonoDevelop Addin Templates]]></title>
    <link href="http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates/"/>
    <updated>2016-01-01T21:48:44-08:00</updated>
    <id>http://sushihangover.github.io/adding-nuget-packages-to-your-addin-templates</id>
    <content type="html"><![CDATA[<p>I recently created nugets for the PlayScript AOT assemblies as well as a separtate MSBuild target nuget and it ended up working really well in a x-plat way.</p>

<p>But one thing that I could not find quickly was how to tag my templates with the package info so they are automatically installed when the solution/projects are created.</p>

<p>Well the answer was kind-of right under my nose (<a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>):</p>

<blockquote><p>Conditionally Adding a NuGet Package from a Project Template
A NuGet package be conditionally installed based on a boolean parameter defined by the project template wizard.</p></blockquote>

<pre><code>&lt;Packages&gt;
    &lt;Package id="Xamarin.GooglePlayServices" version="19.0.0.1" if="UseGooglePlayServices" /&gt;
&lt;/Packages&gt;
</code></pre>

<blockquote><p>The conditions that can be specified do not support the more complicated condition that grouped templates do.</p></blockquote>

<p>Re: <a href="http://www.monodevelop.com/developers/articles/project-templates/#conditionally-adding-a-nuget-package-from-a-project-template">Conditionally Adding a NuGet Package from a Project Template</a></p>

<p>So in my templates I currently do not have to lock them to a version and want the most recent ones available so I skip the version attribute:</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="PlayScript.AOT" /&gt;
    &lt;package id="PlayScript.MSBuild" /&gt;
&lt;/Packages&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MSBuild / xbuild - Steps of a build]]></title>
    <link href="http://sushihangover.github.io/msbuild-slash-xbuild-steps-of-a-build/"/>
    <updated>2016-01-01T10:22:54-08:00</updated>
    <id>http://sushihangover.github.io/msbuild-slash-xbuild-steps-of-a-build</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on adding MSBuild style building to  PlayScript.</p>

<p>The end goal is two fold.</p>

<p>1st) To support the standard MSBuild process in order to allow VS/MD/XS&rsquo;s IDEs to use this std process via the project file&rsquo;s target import tag.</p>

<p>2nd) Can I replace the <em>compile</em> portion of the process (with the PlayScript compiler) so I directly create Xamarin.Mac, Xamarin.iOS and Xamarin.Android libraries that are written in PlayScript/ActionScript by using Xamarin&rsquo;s custom MSBuild process, but via a different compiler that produces the IL code?</p>

<p>A compiled PlayScript library (or exe) is <strong>just</strong> a standard CIL assembly and can be referenced by C# projects, Xamarin mobile projects or not, but directly referencing Xamarin iOS, Android or Mac libraries will not work as those project types are <em>special</em> (mainly licensing checks and build steps). So the 2nd part of this is really an experient is to see if we are stuck to only linking to PlayScript libraries or can we use PlayScript to directly code against the Xamarin&rsquo;s mobile libraries and still comply with their licensing/build process.</p>

<p>Building via the <code>psc</code> CLI compiler is almost identical to using <code>csc</code> or <code>mcs</code>. There are a few different options are available in order to support <em>some</em> of the ActionScript 3 compiler options, but I digress&hellip;</p>

<p>The normal MSBuild / xbuild steps to compile a CSharp project (<code>.csproj</code>) involved the following high-level Targets:</p>

<ul>
<li>PrepareForBuild:</li>
<li>CopyFilesMarkedCopyLocal:</li>
<li>GenerateSatelliteAssemblies:</li>
<li>CoreCompile:</li>
<li>DeployOutputFiles:</li>
</ul>


<p>Ignoring the multimedia pipeline processing of assets (images, SWFs, vector transformations, 3D models, etc..) the only step that we need to focus on is the <code>CoreCompile</code>:</p>

<p><strong>Import Project=&ldquo;$(MSBuildBinPath)\Microsoft.CSharp.targets&rdquo;</strong></p>

<pre><code>~~~
&lt;Target
        Name="CoreCompile"
        Inputs="$(MSBuildAllProjects);@(Compile);@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile);
                $(KeyOriginatorFile);@(ReferencePath);$(Win32Icon);$(Win32Resource)"
        Outputs="@(DocFileItem);@(IntermediateAssembly)"
        DependsOnTargets="$(CoreCompileDependsOn)"&gt;
        &lt;Csc
                AdditionalLibPaths="$(AdditionalLibPaths)"
                AddModules="@(AddModules)"
                AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
                BaseAddress="$(BaseAddress)"
~~~
                Win32Icon="$(Win32Icon)"
                Win32Resource="$(Win32Resource)"
                Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
                ToolExe="$(CscToolExe)"
                ToolPath="$(CscToolPath)" /&gt;

&lt;/Target&gt;
~~~
</code></pre>

<p>Looking at the <code>Csc</code> section, if I can replace <code>ToolExe</code> and <code>CscToolPath</code> properties then I can have this Target use PlayScript (<code>psc</code>) vs. <code>csc</code> or <code>mcs</code>.</p>

<p>So as a quick test, copying <code>Microsoft.CSharp.targets</code> to PlayScript.MSBuild.Targets<code>and adding this</code>PropertyGroup<code>section with hardcoded paths before the</code>CoreCompile` target section:</p>

<pre><code>    &lt;PropertyGroup&gt;
            &lt;PlayScriptBinPath Condition=" '$(PsBuildBinPath)' == '' "&gt;/Users/sushi/Library/Application Support/XamarinStudio-5.0/LocalInstall/Addins/MonoDevelop.PlayScript.5.10.2/MonoDevelop.PlayScript.SupportPackages&lt;/PlayScriptBinPath&gt;
            &lt;CscToolExe Condition=" '$(CscToolExe)' == '' "&gt;psc&lt;/CscToolExe&gt;
            &lt;CscToolPath Condition=" '$(CscToolPath)' == '' "&gt;$(PsBuildBinPath)&lt;/CscToolPath&gt;
    &lt;/PropertyGroup&gt;
</code></pre>

<p>And replacing:</p>

<pre><code>&lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
</code></pre>

<p>with:</p>

<pre><code>&lt;Import Project="packages\PlayScript.MSBuild.5.10.2.2\build\PlayScript.MSBuild.Targets" /&gt;
</code></pre>

<p><strong>>xbuild nuget-test.psproj</strong></p>

<pre><code>XBuild Engine Version 12.0
Mono, Version 4.2.2.0
Copyright (C) 2005-2013 Various Mono authors

Build started 1/1/2016 11:05:25 AM.
__________________________________________________
Project "/Users/sushi/code/XamTests/nuget-test/nuget-test.psproj" (default target(s)):
    Target PrepareForBuild:
        Configuration: Debug Platform: x86
    Target BeforeResolveReferences:
                         AssemblySearchPaths: {CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{PkgConfig};{GAC};{RawFileName};bin/Debug/;/Users/sushi/mono/play32/bin
    Target GenerateSatelliteAssemblies:
    No input files were specified for target GenerateSatelliteAssemblies, skipping.
    Target GenerateTargetFrameworkMonikerAttribute:
    Skipping target "GenerateTargetFrameworkMonikerAttribute" because its outputs are up-to-date.
    Target CoreCompile:
         psc
         /Users/sushi/mono/play32/bin

        Tool /Users/sushi/mono/play32/bin/psc execution started with arguments: /noconfig /debug:full /debug+ /optimize- /out:obj/x86/Debug/nuget-test.exe Main.play /target:exe /define:DEBUG /nostdlib /platform:x86 /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/System.dll /reference:packages/PlayScript.AOT.5.10.2.0/lib/net45/PlayScript.Dynamic_aot.dll /reference:packages/PlayScript.AOT.5.10.2.0/lib/net45/pscorlib_aot.dll /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/System.Core.dll /reference:/Library/Frameworks/Mono.framework/Versions/4.2.2/lib/mono/4.5/mscorlib.dll /warn:4
    Target DeployOutputFiles:
        Copying file from '/Users/sushi/code/XamTests/nuget-test/obj/x86/Debug/nuget-test.exe.mdb' to '/Users/sushi/code/XamTests/nuget-test/bin/Debug/nuget-test.exe.mdb'
        Copying file from '/Users/sushi/code/XamTests/nuget-test/obj/x86/Debug/nuget-test.exe' to '/Users/sushi/code/XamTests/nuget-test/bin/Debug/nuget-test.exe'
Done building project "/Users/sushi/code/XamTests/nuget-test/nuget-test.psproj".

Build succeeded.
     0 Warning(s)
     0 Error(s)

Time Elapsed 00:00:01.8555370
</code></pre>

<p>That works, <strong>cool</strong>&hellip;</p>

<p>But that requires mod'ing complete copy of <code>Microsoft.CSharp.targets</code>.</p>

<p>So lets strip out everything but our PlayScript changes and import the std CSharp targets.</p>

<pre><code>&lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
    &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;

    &lt;PropertyGroup&gt;
        &lt;DefaultLanguageSourceExtension&gt;.cs&lt;/DefaultLanguageSourceExtension&gt;
        &lt;Language&gt;PlayScript&lt;/Language&gt;
    &lt;/PropertyGroup&gt;

&lt;!-- PlayScript --&gt;
    &lt;PropertyGroup&gt;
        &lt;PlayScriptBinPath Condition=" '$(PsBuildBinPath)' == '' "&gt;/Users/sushi/Library/Application Support/XamarinStudio-5.0/LocalInstall/Addins/MonoDevelop.PlayScript.5.10.2/MonoDevelop.PlayScript.SupportPackages&lt;/PlayScriptBinPath&gt;
        &lt;CscToolExe Condition=" '$(CscToolExe)' == '' "&gt;psc&lt;/CscToolExe&gt;
        &lt;CscToolPath Condition=" '$(CscToolPath)' == '' "&gt;$(PsBuildBinPath)&lt;/CscToolPath&gt;
    &lt;/PropertyGroup&gt;
&lt;!-- PlayScript --&gt;

&lt;!--
    Note: Microsoft.CSharp.targets already imports Microsoft.Common.targets
          so if we need to override/replacement would need to do it after the 
          Microsoft.CSharp.targets import either in this file or by importing another
          file, i.e. PlayScript.Common.targets
          (this is where we will include our multimedia pipeline tasks)
    &lt;Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" /&gt;
--&gt;

&lt;!-- PlayScript --&gt;
    &lt;Target Name="BeforeResolveReferences"&gt;
        &lt;CreateProperty
            Value="$(AssemblySearchPaths);$(PsBuildBinPath)"&gt;
            &lt;Output TaskParameter="Value" PropertyName="AssemblySearchPaths" /&gt;
        &lt;/CreateProperty&gt;
    &lt;/Target&gt;
&lt;!-- PlayScript --&gt;

    &lt;Import Project="$(MSBuildThisFileDirectory)\PlayScript.MSBuild.Debug.Targets" /&gt;
&lt;/Project&gt;
</code></pre>

<p>That works&hellip;</p>

<p>We still need to look into the custom Xamarin Mobile targets and  remove the hardcoded paths from our PlayScript targets, but lets leave that for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# AppleScript calls with functions, arguments and results]]></title>
    <link href="http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results/"/>
    <updated>2015-12-06T20:06:17-08:00</updated>
    <id>http://sushihangover.github.io/c-number-applescript-calls-with-functions-arguments-and-results</id>
    <content type="html"><![CDATA[<p>Posted a new C# library to <a href="https://github.com/sushihangover/Sushi.AppleScript">Github</a> to allow the calling of AppleScript by function name, passing in arguments and receiving a return value.</p>

<h1>Sushi.AppleScript</h1>

<p><a href="https://github.com/sushihangover/Sushi.AppleScript">https://github.com/sushihangover/Sushi.AppleScript</a></p>

<p>The C# library allows you to execute AppleScript code that originates from a file or <code>string</code> and:</p>

<ul>
<li>Call function by name (Optional)</li>
<li>Pass multiple arguments to a function (Optional)</li>
<li>Execution success or failure</li>
<li>Return results from the function call</li>
</ul>


<h3>Build:</h3>

<pre><code>cd Sushi.AppleScript.Native
xcodebuild
cd -
xbuild Sushi.AppleScript.sln
</code></pre>

<h3>Test:</h3>

<p><strong>Mono&rsquo;s supplied nunit-console:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>NUnit 3.x console:</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe Sushi.AppleScript.Test/SushiAppleScript.Test.csproj
</code></pre>

<p><strong>Note:</strong></p>

<pre><code>AppleScript.cs(7,7): error CS0246: The type or namespace name `MonoMac' could not be found. Are you missing an assembly reference?
</code></pre>

<p>If you do not have a local copy of <a href="https://github.com/mono/monomac">MonoMac</a>, xbuild will fail. It is available via &ldquo;Xamarin Studio&rdquo;:</p>

<pre><code>mdtool build Sushi.AppleScript.sln
</code></pre>

<h4>Example Usage:</h4>

<pre><code>var scptInfo = new FileInfo ("./AppleScripts/FunctionTests.txt");
string funcName = "IsRunning";
List&lt;string&gt; argList = new List&lt;string&gt; () {
    @"Finder",
};
string scriptReturnValue;
var executionSuccess = AppleScript.Run (scptInfo, funcName, argList, out scriptReturnValue);
</code></pre>

<ul>
<li>Consult <a href="https://github.com/sushihangover/Sushi.AppleScript/blob/master/Sushi.AppleScript.Test/Test.cs">Test.cs</a> for more examples</li>
</ul>


<h3>Supports:</h3>

<ul>
<li>MonoMac</li>
<li>Xamarin.Mac</li>
<li>i386 and x86_64 Mono Support</li>
</ul>


<h3>Runtime/Deployment debugging:</h3>

<p>Runtime/Deployment debugging available by setting an environment variable, <code>APPLE_SCRIPT_DEBUG</code>:</p>

<p><code>export APPLE_SCRIPT_DEBUG=true</code></p>

<p>The results are logged with the prefix <code>AppleScript:</code>, output is avaiable via Console.app.</p>

<h3>Sushi.AppleScript</h3>

<p>The C# library that provides the P/Invoke wrapper to execute AppleScript functions</p>

<h3>Sushi.AppleScript.Native</h3>

<p>An OS-X Universial (i386 &amp; x86_64) Shared Library:</p>

<ul>
<li><code>libAppleScriptEvent.dylib</code></li>
</ul>


<h3>Sushi.AppleScript.Test</h3>

<p>NUnit tests for Sushi.AppleScript library</p>

<h3>Sushi.AppleScript.CLI</h3>

<p>TODO: Provides an <code>osascript</code> style CLI utility to execute functions with AppleScript files (<code>osascript</code> does not contain this feature)</p>

<h3>License:</h3>

<ul>
<li>The MIT License (MIT)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android C# bindings for Java CIFS (jCIFS) Client Library (Samba)]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library/"/>
    <updated>2015-12-05T20:19:59-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-c-number-bindings-for-java-cifs-jcifs-client-library</id>
    <content type="html"><![CDATA[<p>I posted a Samba/JCIFS binding library to my <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">Github</a> account&hellip;</p>

<h1>Xamarin.Android.jCIFS</h1>

<p>This is a <a href="https://github.com/sushihangover/Xamarin.Android.jCIFS">C# binding library</a> for the The Java CIFS (jCIFS) Client Library (version 1.3.18).</p>

<p><a href="http://jcifs.samba.org">JCIFS</a> is an Open Source client library that implements the CIFS/SMB networking protocol in 100% Java.</p>

<blockquote><p>You can read/write, delete, make directories, rename, list contents of a directory, list the workgroups/ntdomains and servers on the network, list the shares of a server, open named pipes, authenticate web clients &hellip;etc.</p></blockquote>

<h3>License:</h3>

<p>As <a href="http://www.gnu.org/licenses/lgpl-2.1.txt">JCIFS</a> is Licensed Under the LGPL, so is this project&rsquo;s <a href="http://opensource.org/licenses/LGPL-3.0">license</a>.</p>

<h3>API Documentation:</h3>

<p>Consult the jCIFS site for <a href="http://jcifs.samba.org/src/docs/api/">API</a> documention and usage, this is a C# binding library and does not implement/change anything within the <code>jcifs-1.3.18.jar</code>.</p>

<h3>Example:</h3>

<h4>Usage of <code>Jcifs.Smb.SmbFileInputStream</code>:</h4>

<pre><code>// This is NOT best-practice code, just showing a demo Jcifs api call
public async Task getFileContents ()
{
    await Task.Run (() =&gt; {
        var smbStream = new SmbFileInputStream ("smb://guest@10.10.10.5/code/test.txt");
        byte[] b = new byte[8192];
        int n;
        while ((n = smbStream.Read (b)) &gt; 0) {
            Console.Write (Encoding.UTF8.GetString (b).ToCharArray (), 0, n);
        }
        Button button = FindViewById&lt;Button&gt; (Resource.Id.myButton);
        RunOnUiThread(() =&gt; {
            button.Text = Encoding.UTF8.GetString (b);
        });
    }
    ).ContinueWith ((Task arg) =&gt; {
        Console.WriteLine (arg.Status);
        if (arg.Status == TaskStatus.Faulted)
            Console.WriteLine (arg.Exception);
    }
    );
}
</code></pre>

<h3>Note:</h3>

<p><strong>The entire jCIFS library is not bound by this project, consult the &ldquo;Metadata.xml&rdquo; file in the binding project for method renames and class exclusions.
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using redirection within xargs]]></title>
    <link href="http://sushihangover.github.io/using-redirection-within-xargs/"/>
    <updated>2015-11-28T06:29:15-08:00</updated>
    <id>http://sushihangover.github.io/using-redirection-within-xargs</id>
    <content type="html"><![CDATA[<p>I needed to convert a bunch of AppleScript <code>.scpt</code> files to uncompiled <code>.txt</code> files, so a simple <code>find</code> piped to <code>xargs</code> and I&rsquo;ll be done&hellip; well&hellip;</p>

<p>OS-X provides a <code>osadecompile</code> cmd that will read a <code>.scpt</code> file and output the text to <code>stdout</code> (It does not provide a output file option). So a simple redirection and I should be done:</p>

<pre><code># This will not work, you will end up with a file 
# named {}.txt that includes the test of all the scripts
find *.scpt -print0 | xargs -0 -n 1 -I {} osadecompile '{}' &gt; '{}.txt' 
</code></pre>

<p>But that will not work as the redirection applies to the <code>xargs</code> cmd, not the <code>osadecompile</code> cmd that xargs is calling. So a quick fix is to create a subshell and include the redirection in the passed cmd string (via <code>-c</code>)</p>

<p>So this will work:</p>

<pre><code>find *.scpt -print0 | xargs -0 -n 1 -I {} sh -c "osadecompile '{}' &gt; '{}.txt'"
</code></pre>

<p>Still simple enough, and since I only have a couple of dozen files in this case the performance impact of creaing subshells is not a problem&hellip;</p>

<p><strong>Homework:</strong> How would you get around this in using a bash <a href="https://en.wikipedia.org/wiki/One-liner_program">one-liner</a> without a subshell?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin C# UIPickerView]]></title>
    <link href="http://sushihangover.github.io/xamarin-c-number-uipickerview/"/>
    <updated>2015-11-25T13:23:13-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-c-number-uipickerview</id>
    <content type="html"><![CDATA[<p>A real quickie example of a <a href="https://developer.xamarin.com/api/type/MonoTouch.UIKit.UIPickerView/">UIPickerView</a>: (<a href="http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html">iOS SDK</a>)</p>

<p><img src="http://sushihangover.github.io/images/Xamarin-iPhone-Picker.gif" alt="" /></p>

<p>Add a <code>UIPickerView</code> to your xib or Storyboard called <code>slotMachineView</code> and a label (named <code>selectedLbl</code>) to show the currently selected items.</p>

<pre><code>using System;
using UIKit;

namespace Slots
{
    public partial class ViewController : UIViewController
    {
        public ViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
                slotMachineView.Model = new StackOverflowModel (selectedLbl);
        }

        public override void DidReceiveMemoryWarning ()
        {
            base.DidReceiveMemoryWarning ();
        }
    }

    public class StackOverflowModel : UIPickerViewModel
    {
        static string[] names = new string [] {
            "pscorlib.dll",
            "pscorlib_aot.dll",
            "Mono.PlayScript.dll",
            "PlayScript.Dynamic.dll",
            "PlayScript.Dynamic_aot.dll",
            "PlayScript.Optimization.dll",
            "playshell.exe",
            "psc.exe"
        };

        UILabel lbl;

        public StackOverflowModel (UILabel lbl)
        {
            this.lbl = lbl;
        }

        public override nint GetComponentCount (UIPickerView v)
        {
            return 3;
        }

        public override nint GetRowsInComponent (UIPickerView pickerView, nint component)
        {
            return names.Length;
        }

        public override string GetTitle (UIPickerView picker, nint row, nint component)
        {
            switch (component) {
            case 0:
                return names [row];
            case 1:
                return row.ToString ();
            case 2:
                return new string ((char)('A' + row), 1);
            default:
                throw new NotImplementedException ();
            }
        }

        public override void Selected (UIPickerView picker, nint row, nint component)
        {
            lbl.Text = String.Format ("{0} : {1} : {2}",
                names [picker.SelectedRowInComponent (0)],
                picker.SelectedRowInComponent (1),
                picker.SelectedRowInComponent (2));
        }

        public override nfloat GetComponentWidth (UIPickerView picker, nint component)
        {
            if (component == 0)
                return 220f;
            else
                return 30f;
        }
    }
}
</code></pre>

<p>From my <a href="http://stackoverflow.com/a/33902474/4984832">answer</a> on StackOverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safari - Changing the Quit Shortcut]]></title>
    <link href="http://sushihangover.github.io/safari-changing-the-quit-shortcut/"/>
    <updated>2015-11-25T08:44:09-08:00</updated>
    <id>http://sushihangover.github.io/safari-changing-the-quit-shortcut</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/OS-X-Safari-Quit.png" title="Quit" >I tend to hit the <code>Cmd-Q</code> instead of <code>Cmd-W</code> when I am closing a tab and in my older installs on OS-X I had changed the shortcut for <code>Safari Quit</code> and that is one thing (among others) that I did not migrate to my new OS-X 10.11 install.</p>

<p>So, open up <code>System Perferences</code> and go to <code>KeyBoards</code> and then the <code>Shortcuts</code> pane and <strong>add</strong> an <code>App Shortcuts</code> for Safari only for the menu item called <code>Quit Safari</code>, mine now is <code>Ctrl-CMD-Q</code>:</p>

<p><img src="http://sushihangover.github.io/images/OS-X-Safari-Shortcuts.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Demo / Samples updated]]></title>
    <link href="http://sushihangover.github.io/monomac-samples-updates/"/>
    <updated>2015-11-23T20:51:39-08:00</updated>
    <id>http://sushihangover.github.io/monomac-samples-updates</id>
    <content type="html"><![CDATA[<p>A number of the MonoMac demos were broken in various ways so as I was using some of them in my PlayScript / ActionScript work with Stage3d, Away3d and Starling, I update the <a href="https://github.com/PlayScriptRedux">PlayScriptRedux</a> <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> repo with the corrected versions.</p>

<p><img src="http://sushihangover.github.io/images/MonoMac-Demos.gif" alt="" /></p>

<pre><code>./AnimatingViews/bin/Debug/AnimatingViews.app
./attic/Hello/Hello.app
./ButtonMadness/bin/Debug/ButtonMadness.app
./CAQuartzComposition/bin/Debug/CAQuartzComposition.app
./CoreAnimationBook/BackgroundFilteredView/bin/Debug/BackgroundFilteredView.app
./CoreAnimationBook/CustomAnimationTiming/bin/Debug/CustomAnimationTiming.app
./CoreAnimationBook/CustomizeAnimation/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/CustomizeAnimation2/bin/Debug/CustomizeAnimation.app
./CoreAnimationBook/FilteredView/bin/Debug/FilteredView.app
./CoreAnimationBook/GroupAnimation/bin/Debug/GroupAnimation.app
./CoreAnimationBook/KeyFrameMoveAView/bin/Debug/KeyFrameMoveAView.app
./CoreAnimationBook/LayerBackedControls/bin/Debug/LayerBackedControls.app
./CoreAnimationBook/QCBackground/bin/Debug/QCBackground.app
./CoreAnimationBook/TimedAnimation/bin/Debug/TimedAnimation.app
./CoreTextArcMonoMac/bin/Debug/CoreTextArcMonoMac.app
./CoreWLANWirelessManager/bin/Debug/CoreWLANWirelessManager.app
./DatePicker/bin/Debug/DatePicker.app
./DockAppIcon/bin/Debug/DockAppIcon.app
./DocumentSample/bin/Debug/DocumentSample.app
./DrawerMadness/DrawerMadness/bin/Debug/DrawerMadness.app
./Fire/bin/Debug/Fire.app
./GLFullScreen/bin/Debug/GLFullScreen.app
./GlossyClock/bin/Debug/GlossyClock.app
./GLSLShader/bin/Debug/GLSLShader.app
./ImageKitDemoStep1/bin/Debug/ImageKitDemo.app
./macdoc/bin/Debug/macdoc.app
./MonoMacGameWindow/bin/Debug/MonoMacGameView.app
./NSAlert/bin/Debug/NSAlertSample.app
./NSTableViewBinding/bin/Debug/NSTableViewBinding.app
./OpenGL-NeHe/NeHeLesson1/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson13/bin/Debug/NeHeLesson13.app
./OpenGL-NeHe/NeHeLesson17/bin/Debug/NeHeLesson17.app
./OpenGL-NeHe/NeHeLesson2/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson3/bin/Debug/NeHeLesson1.app
./OpenGL-NeHe/NeHeLesson4/bin/Debug/NeHeLesson4.app
./OpenGL-NeHe/NeHeLesson5/bin/Debug/NeHeLesson5.app
./OpenGL-NeHe/NeHeLesson6/bin/Debug/NeHeLesson6.app
./OpenGL-NeHe/NeHeLesson7/bin/Debug/NeHeLesson7.app
./OpenGL-NeHe/NeHeLesson8/bin/Debug/NeHeLesson8.app
./OpenGL-NeHe/NeHeLesson9/bin/Debug/NeHeLesson9.app
./OpenGLLayer/bin/Debug/OpenGLLayer.app
./OpenGLViewSample/OpenGLViewSample/bin/Debug/MMOpenTK.app
./PopupBindings/bin/Debug/PopupBindings.app
./PredicateEditorSample/bin/Debug/PredicateEditorSample.app
./QTRecorder/bin/Debug/QTRecorder.app
./RoundedTransparentWindow/bin/Debug/RoundedTransparentWindow.app
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoMac - Where is the CAEmitterCell Content propery?]]></title>
    <link href="http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery/"/>
    <updated>2015-11-23T06:01:10-08:00</updated>
    <id>http://sushihangover.github.io/monomac-where-is-slash-caemittercell-content-propery</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/MonoMac-Fire.gif" title="Fire" >
I was trying to integrate ActionScript and Away3d with the CAEmitterCell particles using MonoMac for users that do not have access (a license) to Xamarin.Mac, but&hellip;</p>

<p>The MonoMac project is missing the maccore <code>CoreAnimation/CAEmitterCell.cs</code> in the Make.shared and thus the <code>MonoMac.dll</code> that is distributed via Xamarin Studio is broken in this regard as it is missing the ability to assign an Image to the emitter.</p>

<p>Example:</p>

<pre><code>            // Create the fire emitter cell
            CAEmitterCell fire = CAEmitterCell.EmitterCell ();
            fire.EmissionLongitude = (float)Math.PI;
            fire.BirthRate = 0;
            fire.Velocity = 80;
            fire.VelocityRange = 30;
            fire.EmissionRange = 1.1f;
            fire.AccelerationY = 200;
            fire.ScaleSpeed = 0.3f;

            RectangleF rect = RectangleF.Empty;
            CGColor color = new CGColor (0.8f,0.4f,0.2f,0.10f);
            fire.Color = color;
            fire.Contents = NSImage.ImageNamed ("fire.png").AsCGImage (ref rect, null, null);
</code></pre>

<p>I have updated PlayScript&rsquo;s <a href="https://github.com/PlayScriptRedux/monomac">MonoMac</a> (forked from <a href="https://github.com/mono/monomac">Mono/MonoMac</a>) to fix this.</p>

<p><strong>git diff src/Make.shared</strong></p>

<pre><code>diff --git a/src/Make.shared b/src/Make.shared
index 986ff28..a84aeae 100644
--- a/src/Make.shared
+++ b/src/Make.shared
@@ -44,6 +44,7 @@ SHARED_SOURCE = \
        ./CoreAnimation/CALayer.cs                      \
        ./CoreAnimation/CATextLayer.cs                  \
        ./CoreAnimation/CAMediaTimingFunction.cs        \
+       ./CoreAnimation/CAEmitterCell.cs                \
        ./CoreFoundation/CFArray.cs                     \
        ./CoreFoundation/CFBoolean.cs                   \
        ./CoreFoundation/CFDictionary.cs                \
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CursesSharp (C# NCurses) Updated]]></title>
    <link href="http://sushihangover.github.io/cursessharp-c-number-ncurses-updated/"/>
    <updated>2015-11-21T15:10:58-08:00</updated>
    <id>http://sushihangover.github.io/cursessharp-c-number-ncurses-updated</id>
    <content type="html"><![CDATA[<p>I made some updates to the CursesSharp project, so check out the update README.md for details:</p>

<h1>CursesSharp</h1>

<p><img src="http://sushihangover.github.io/images/FireworksDemo.gif" alt="" /></p>

<h2>INTRODUCTION</h2>

<p>CursesSharp is a C# wrapper for curses library.
The latest version of this &lsquo;fork&rsquo;&lsquo; can be found at <a href="https://github.com/sushihangover/CursesSharp">Github</a>.
The original version can be found at the <a href="http://sourceforge.net/projects/curses-sharp/">SourceForge.net project page</a>.</p>

<p><img src="http://sushihangover.github.io/images/RainDemo.gif" alt="RainDemo" /></p>

<h2>DOCUMENTATION</h2>

<p>CursesSharp consists of a .NET assembly (CursesSharp.dll) and a native wrapper shared library (DLL) which is linked with PDCurses (in Windows) or ncurses  (in Unix-like systems). This wrapper library is called CursesWrapper.dll  in Windows or libCursesWrapper.so in Unix or libCursesWrapper.dylib in OS-X. CursesSharp provides a bit cleaner
API to curses than the original one, although function names remain unchanged for the most part.</p>

<p><img src="http://sushihangover.github.io/images/UnicodeDemo.gif" alt="" /></p>

<h3>CursesSharp namespace contains several important classes:</h3>

<ul>
<li>Defs - contains constants from curses: attribute, color and key definitions
  as well as some macros (COLOR_PAIR, PAIR_NUMBER)</li>
<li>Curses - the main interface to curses; contains methods global to the library,
  a StdScr property that returns the stdscr window, and as a convenience,
  some window-specific functions that operate on stdscr</li>
<li>Window - represents a curses window that can be written to, or read from;
  contains wrappers for most of curses functions with names starting with
  w<em> or mvw</em></li>
<li>CursesException - an exception class, thrown when a curses function
  reports an error</li>
</ul>


<p><em>Documentation is (always) under construction. Help would be much appreciated.</em></p>

<h2>Installing CursesSharp on OS-X</h2>

<p>These are the instructions for building CursesSharp on OS-X.</p>

<p>The build process has been tested on:</p>

<ul>
<li>OS-X 10.10.5</li>
<li>Apple LLVM version 7.0.0 (clang-700.1.76)</li>
<li>Mono JIT compiler version 4.2.1 64-bit build.</li>
</ul>


<h2>0. Prerequisites</h2>

<p>The native library is now built as a &lsquo;fat&rsquo; library so either a Mono 32-bit or 64-bit build can be used.</p>

<p><strong>$> file libCursesWrapper.so</strong></p>

<pre><code>libCursesWrapper.so: Mach-O universal binary with 2 architectures
libCursesWrapper.so (for architecture i386):    Mach-O dynamically linked shared library i386
libCursesWrapper.so (for architecture x86_64):  Mach-O 64-bit dynamically linked shared library x86_64
</code></pre>

<!--A **64-bit build of Mono** as the the native shared library (so/dylib) is of ARCH type x64_86. 

**If you are running the default 32-bit Mono install, you will have to build the native library as ARCH i386. Currently there is not an included build process for this.
**
-->


<h2>1. Getting CursesSharp</h2>

<p>You can clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<h2>2. Make the Native Library</h2>

<pre><code>mdtool build CursesSharp.Native.sln --target:Build --configuration:Release
mdtool build CursesSharp.Native.sln --target:Build --configuration:Debug
</code></pre>

<h2>3. Make the C# Libraries and Demos</h2>

<pre><code>xbuild CursesSharp.sln /target:Clean
xbuild CursesSharp.sln /target:Build
</code></pre>

<p>Note: To run the demos from the CLI, make sure that set the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html"><code>DYLD_FALLBACK_LIBRARY_PATH</code></a>. While still in the repo&rsquo;s root directory:</p>

<pre><code>export DYLD_FALLBACK_LIBRARY_PATH=$(PWD)/CursesSharp.Native/bin/Debug:/usr/lib:$DYLD_FALLBACK_LIBRARY_PATH
</code></pre>

<p>There is also a CI script that can be called via <code>source</code> to setup <code>DYLD_FALLBACK_LIBRARY_PATH</code> and <code>LD_LIBRARY_PATH</code></p>

<pre><code>source CI/libpath-source-me.sh
</code></pre>

<p>To learn more about <code>dyld</code> check out the <code>man</code> page:</p>

<pre><code>man dyld
</code></pre>

<h2>Demos:</h2>

<p>There are various demos available to review:</p>

<ul>
<li>Demo.CursesSharp.Firework</li>
<li>Demo.CursesSharp.Gui.HelloWorld</li>
<li>Demo.CursesSharp.HelloWorld</li>
<li>Demo.CursesSharp.Rain</li>
<li>Demo.CursesSharp.Unicode</li>
<li>Demo.Gui.MessageBox</li>
<li>Demo.Gui.MidnightCommander</li>
<li>Demo.Gui.Timeout</li>
<li>Demo.Native.ResizeTerm</li>
</ul>


<h2>Rain Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.CursesSharp.Rain/bin/x64/Debug/
mono RainDemo.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/RainDemo.gif" alt="RainDemo" /></p>

<h2>FireWorks Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.CursesSharp.Rain/bin/x64/Debug/
mono FireworkDemo.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/FireworksDemo.gif" alt="" /></p>

<h2>MidnightCommander Demo:</h2>

<pre><code>pushd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.MidnightCommander.exe
popd
</code></pre>

<p><img src="http://sushihangover.github.io/images/CursesSharp-Midnight.png" alt="" /></p>

<h2>Installing CursesSharp on Linux</h2>

<h3>0. Prerequisites</h3>

<p>Note: It is assumed you are running 64-bit Linux (ARCH x86_64)</p>

<p>Install some dependencies:</p>

<pre><code>sudo apt-get install lib32ncursesw5-dev
sudo apt-get install lib32ncurses5-dev
sudo apt-get install ncurses-doc
</code></pre>

<h2>1. Getting CursesSharp</h2>

<p>You will have to obtain CursesSharp sources. You clone it from the following repository:</p>

<pre><code>https://github.com/sushihangover/CursesSharp.git
</code></pre>

<h3>2. Make the Native Library</h3>

<pre><code>mdtool build CursesSharp.Native.Linux.sln --target:Build --configuration:Release
mdtool build CursesSharp.Native.Linux.sln --target:Build --configuration:Debug
</code></pre>

<h3>3. Make the C# Libraries and Demos</h3>

<pre><code>xbuild CursesSharp.sln /target:Clean /property:configuration=Debug
xbuild CursesSharp.sln /target:Build /property:configuration=Debug
</code></pre>

<h1>Demos:</h1>

<p>Note: To run the demos from the CLI, make sure that set the <a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"><code>LD_LIBRARY_PATH</code></a>. While still in the repo&rsquo;s root directory:</p>

<pre><code>export LD_LIBRARY_PATH=$(PWD)/CursesSharp.Native/bin/Debug:/usr/lib:$LD_LIBRARY_PATH
</code></pre>

<p>There is also a CI script that can be called via <code>source</code> to setup <code>DYLD_FALLBACK_LIBRARY_PATH</code> and <code>LD_LIBRARY_PATH</code></p>

<pre><code>source CI/libpath-source-me.sh
</code></pre>

<p>To learn more about <code>ld</code> check out the <code>man</code> page:</p>

<pre><code>man ld
</code></pre>

<h2>MessageBox Demo:</h2>

<pre><code>cd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.Messagebox.exe
cd -
</code></pre>

<h5>(Ubuntu / Konsole)</h5>

<p><img src="http://sushihangover.github.io/images/CursesSharp-MsgBox-Konsole.png" alt="" /></p>

<h2>MidnightCommander Demo:</h2>

<pre><code>cd CursesSharp.Demo/Demo.Gui.MidnightCommander/bin/x64/Debug/
mono Demo.Gui.MidnightCommander.exe
cd -
</code></pre>

<h4>(Ubuntu / Konsole)</h4>

<p><img src="http://sushihangover.github.io/images/CursesSharp-Midnight-Konsole.png" alt="" /></p>

<h2>Installing CursesSharp on Windows</h2>

<p>Refer the original Windows project, source code and instructions are <a href="http://curses-sharp.sourceforge.net/index.php?page=windows">here</a></p>

<h2>CI</h2>

<p>OS-X:</p>

<pre><code>source CI/libpath-source-me.sh
CI/build.osx.sh
</code></pre>

<p>Linux:</p>

<pre><code>{TODO}
</code></pre>

<h2>TODO &amp; Contributors:</h2>

<ul>
<li>Nuget support</li>
<li>MS Window support (via PDCurses)</li>
<li>Documentation</li>
<li>Bug reporting/fixes</li>
</ul>


<p>Looking for contributors in these areas and/or any other areas that you would help out on.</p>

<p><a href="https://github.com/sushihangover/CursesSharp">Fork and Contribute</a> ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Studio mdtool - Where is it?]]></title>
    <link href="http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it/"/>
    <updated>2015-11-21T08:36:11-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-studio-mdtool-where-is-it</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure if it is a bug or not, but older versions of Xamarin Studio (and MonoDevelop) on OS-X (prior to El Capitan) installed a <code>mdtool</code> shell script in <code>/usr/local/bin</code> but that no longer happens(?).</p>

<p><code>mdtool</code> original/missing shell script:</p>

<pre><code>#!/bin/bash
MONO_EXEC="exec mono-sgen"
EXE_PATH="/Applications/Xamarin Studio.app/Contents/Resources/lib/monodevelop/bin/mdtool.exe"
$MONO_EXEC $MONO_OPTIONS "$EXE_PATH" "$@"
</code></pre>

<p>So create the script with the content above and place it into a directory in your path. <code>/usr/local/bin</code> is fine, but I personally install my shell scripts into a <code>$HOME/.scripts</code> directory that is included in my path so I can backup, via a git repo, my personal scripts and distinguish what I have created verus what gets installed in the <code>/usr/local/bin</code> by applications such a <code>brew</code>&hellip;</p>

<p>Note: Make sure that you <code>chmod a+x mdtool</code> in order to make it executable&hellip;</p>

<p>As always, have fun&hellip; ;-)</p>

<pre><code>$mdtool

Xamarin Studio Tool Runner

Usage: mdtool [options] &lt;tool&gt; ... : Runs a tool.
       mdtool setup ... : Runs the setup utility.
       mdtool -q : Lists available tools.

Options:
  --verbose (-v)   Increases log verbosity. Can be used multiple times.
  --no-reg-update  Skip updating addin registry. Faster but results in
                   random errors if registry is not up to date.

Available tools:
- build: Project build tool
- dbgen: Parser database generation tool
- project-export: Project conversion tool
- gsetup: Graphical add-in setup utility
- archive: Project archiving tool
- account: Xamarin account tool
- mac-bundle: Mac application bundle and installer generator.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NUnit Console 2.4.8 vs 3.0 using .csproj files]]></title>
    <link href="http://sushihangover.github.io/nunit-console-2-dot-4-8-vs-3-dot-0/"/>
    <updated>2015-11-19T21:14:42-08:00</updated>
    <id>http://sushihangover.github.io/nunit-console-2-dot-4-8-vs-3-dot-0</id>
    <content type="html"><![CDATA[<p>When using NUnit console 2.4.x and 3.x with <code>.csproj</code> files, it expects a valid and fairly complete MSBuild/xbuild project to determine the assembly name, dir location, and namespace that it will test in the Library-based project (Exe-based projects are possible if you have defined the proper entry point). In this example I used NUnit 2.4.x and 3.x <strong>console</strong> as there are execution differences but the same <code>.csproj</code> is being used so if you are using MonoDevelop/Xamarin Studio the IDE&rsquo;s built-in NUnit 2.4.x test pad will also work.</p>

<p><strong>NUnit 3.0 console (Install via nuget):</strong></p>

<pre><code>mono $(MTOOLS)/nunit3-console.exe  nunit-lib/nunit-lib.csproj --config=Debug

NUnit Console Runner 3.0.5797 
Copyright (C) 2015 Charlie Poole

Runtime Environment
   OS Version: MacOSX 15.0.0.0 
  CLR Version: 4.0.30319.17020

Test Files
    nunit-lib/nunit-lib.csproj

Errors and Failures

1) Failed : nunitlib.Test.TestCase
  Expected string length 8 but was 5. Strings differ at index 0.
  Expected: "Overflow"
  But was:  "Stack"
  -----------^
at nunitlib.Test.TestCase () in &lt;filename unknown&gt;:line 0

Test Run Summary
    Overall result: Failed
   Tests run: 1, Passed: 0, Errors: 0, Failures: 1, Inconclusive: 0
     Not run: 0, Invalid: 0, Ignored: 0, Explicit: 0, Skipped: 0
  Start time: 2015-11-20 12:36:28Z
    End time: 2015-11-20 12:36:28Z
    Duration: 0.132 seconds
</code></pre>

<p><strong>NUnit 2.4.8 (installed via Mono):</strong></p>

<p><strong>NOTE</strong>: NUnit console 2.4.x is <code>broken</code> due a hard-coded Windows-style Directory Separator when parsing <code>.csproj</code> files and creating the expected CIL/assembly location, use <code>MONO_IOMAP</code> to work around it. This is not a issue in 3.0.</p>

<p><strong>NUnit Console 2.4.x w/o MONO_IOMAP:</strong></p>

<pre><code>nunit-console nunit-lib/nunit-lib.csproj -config=Debug
~~~~
Unhandled Exception:
System.IO.DirectoryNotFoundException: Directory "/Users/sushi/code/XamTests/nunit-lib/nunit-lib/bin\Debug" not found.
~~~~
</code></pre>

<p><strong>NUnit Console 2.4.x with MONO_IOMAP:</strong></p>

<pre><code>MONO_IOMAP=all nunit-console nunit-lib/nunit-lib.csproj -config=Debug

NUnit version 2.4.8
Copyright (C) 2002-2007 Charlie Poole.
Copyright (C) 2002-2004 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov.
Copyright (C) 2000-2002 Philip Craig.
All Rights Reserved.

Runtime Environment - 
   OS Version: Unix 15.0.0.0
  CLR Version: 4.0.30319.17020 ( 4.2.1 (explicit/8862921 Thu Oct 29 17:09:16 EDT 2015) )

.F
Tests run: 1, Failures: 1, Not run: 0, Time: 0.115 seconds

Test Case Failures:
1) nunitlib.Test.TestCase :   Expected string length 8 but was 5. Strings differ at index 0.
  Expected: "Overflow"
  But was:  "Stack"
  -----------^
</code></pre>

<p><strong>.csproj example used in for example:</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
    &lt;ProjectGuid&gt;{944946CD-39B2-4A16-A8A8-9F70F0450506}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;RootNamespace&gt;nunitlib&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;nunit-lib&lt;/AssemblyName&gt;
    &lt;TargetFrameworkVersion&gt;v4.5&lt;/TargetFrameworkVersion&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release&lt;/OutputPath&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="nunit.framework"&gt;
      &lt;HintPath&gt;..\packages\NUnit.2.6.4\lib\nunit.framework.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="Test.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
  &lt;ItemGroup&gt;
    &lt;None Include="packages.config" /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>Ref: This was my <a href="http://stackoverflow.com/a/33827575/4984832">answer</a> on StackOverflow</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android Player / Genymotion - Foobar 101]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-player-delete/"/>
    <updated>2015-11-18T15:16:42-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-player-delete</id>
    <content type="html"><![CDATA[<p>I was really happy with Xamarin&rsquo;s Android Player (XAP) on OS-X 10.11 (and 10.10.x before I upgraded). It is much better the Google&rsquo;s plain-jane Android emulator, way way faster, easier setup as the images are pre-packaged Nexus images, etc&hellip; But you can not create custom images and that ends up being a problem as you need to test different configurations.</p>

<p>Someone recommended Genymotion and everything seemed fine, I could create custom Genymotion images and still use XAP for the basic testing&hellip;</p>

<p>BUT after a reboot of OS-X, <strong>everything went to @#$@#$@#</strong>. Android sessions in either player would take 10 minutes or more to start up and get to the lock screen and when I say &lsquo;more&rsquo;, I mean up to 20 minutes&hellip;or MORE. Even then, services would die, the VirtualBox instance would hang, Xamarin Studio would not connect, XAP would report that the OpenGL server is not available, Genymotion would report no IP address could be retrieved&hellip;</p>

<p>Removing Genymotion did not help. Deleting and re-install XAP did not help. Installing the latest VirtualBox did not help. Uninstall VirtualBox via their installer, deleting the XAP app and restarting from stratch did not help&hellip;. Removing all the original XAP Andriod images and re-downloading them did not help (I thought maybe the new VirtualBox updated them and caused a XAP issue, but no to that idea)&hellip;</p>

<p>Seems that I am not alone, if you started with Genymotion and later installed XAP, you could be in the same boot&hellip; after you reboot the first time. Seems Geny users call it <strong>&ldquo;surviving the reboot&rdquo;</strong>, if you make it past a reboot and everything is still working you should be golden, if not, your system is @#$#@$#.</p>

<p>I&rsquo;m still looking for a solution other then <strong>re-installing the OS as some people have resorted to</strong>&hellip; I just do not have time do a fresh OS-X install so right now I can only test via actual physical devices :-(</p>

<p><strong>AHHHHHHHHHHHHHH!!!!!!!!!!!!!!!!!!!!!!!!!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Android Shared Preferences]]></title>
    <link href="http://sushihangover.github.io/xamarin-android-shared-preferences/"/>
    <updated>2015-11-18T13:56:58-08:00</updated>
    <id>http://sushihangover.github.io/xamarin-android-shared-preferences</id>
    <content type="html"><![CDATA[<p>While I do not directly recommend this technique, it seems using the <code>PreferenceManager.GetDefaultSharedPreferences</code> is really popular in saving values between different activities. While you can create multiple names that do not conflict between different activities, it can get messy real fast.</p>

<p>Instead of using <code>GetDefaultSharedPreferences</code>, create multiple <code>GetSharedPreferences</code> with different names and thus you can store values with the same names without overwriting your values from a different activity. (Again, I am not a big fan of this technique either for anything more than some simple UI preference settings, see notes at bootom of post)</p>

<p>i.e.</p>

<pre><code>        var title = "stack"; float price = 123.34f; long weight = 23; 
        var editor = GetSharedPreferences ("MyFirstActivity", Android.Content.FileCreationMode.Private);
        var edit = editor.Edit ();
        edit.PutString ("title", title);
        edit.PutFloat ("price", price);
        edit.PutLong ("weight", weight);
        edit.Apply ();

        title = "overflow"; price = 99.99f; weight = 99;
        editor = GetSharedPreferences ("MySecondActivity", Android.Content.FileCreationMode.Private);
        edit = editor.Edit ();
        edit.PutString ("title", title);
        edit.PutFloat ("price", price);
        edit.PutLong ("weight", weight);
        edit.Apply ();

        editor = GetSharedPreferences("MyFirstActivity", Android.Content.FileCreationMode.Private);
        title = editor.GetString("title", "empty");
        price = editor.GetFloat("price", 0);
        weight = editor.GetLong("weight", 0);
        Log.Info("activity1", string.Format("{0}:{1}:{2}", title, price, weight));

        editor = GetSharedPreferences("MySecondActivity", Android.Content.FileCreationMode.Private);
        title = editor.GetString("title", "empty");
        price = editor.GetFloat("price", 0);
        weight = editor.GetLong("weight", 0);
        Log.Info("activity2", string.Format("{0}:{1}:{2}", title, price, weight));
</code></pre>

<p><strong>adb logcat output:</strong></p>

<pre><code>[activity1] stack:123.34:23
[activity2] overflow:99.99:99
</code></pre>

<p><strong>Notes:</strong></p>

<p>Personally when I see someone saving shopping cart data, using JSON to serialize objects in and out of SharedPerferences string values, etc&hellip;, my head starts to pound in a <em>bad way</em>. At that time you should really start looking for an <strong>asynchronous</strong>, persistent key-value store, like <a href="https://github.com/akavache/Akavache">Akavache</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Dependency Walker for debugging missing  DLLs]]></title>
    <link href="http://sushihangover.github.io/windows-dependency-walker-for-debugging-missing-dlls/"/>
    <updated>2015-11-14T03:40:21-08:00</updated>
    <id>http://sushihangover.github.io/windows-dependency-walker-for-debugging-missing-dlls</id>
    <content type="html"><![CDATA[<p>I was trying to track down an issue on a fresh Window 10 install with a older application that was starting but faulting on a dependancy but I was not getting the std DLL missing message&hellip;</p>

<p>Running the <code>.exe</code> under Visual Studio was getting me no where fast and than I remembered a really <em>old</em> program called &ldquo;Dependency Walker&rdquo;.</p>

<p>What do you know, it is still avaiable and being kept up to date, well it lists Windows 8, but it seems to also run on an Insider Windows 10 Fast Track install just fine, and  Solved my problem in less then a minute&hellip;</p>

<pre><code>Error: At least one required implicit or forwarded dependency was not found.    Error: At least one module has an unresolved import due to a missing export function in an implicitly dependent module.     Warning: At least one delay-load dependency module was not found.   Warning: At least one module has an unresolved import due to a missing export function in a delay-load dependent module.
</code></pre>

<p><a href="http://www.dependencywalker.com">Dependency Walker</a></p>

<blockquote><p>Dependency Walker is a free utility that scans any 32-bit or 64-bit Windows module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree diagram of all dependent modules. For each module found, it lists all the functions that are exported by that module, and which of those functions are actually being called by other modules. Another view displays the minimum set of required files, along with detailed information about each file including a full path to the file, base address, version numbers, machine type, debug information, and more.</p></blockquote>

<p>FYI: I remember using that program on Window&rsquo;s ARCH types long forgotten&hellip; and the site still has versions available (unsupported of course) for Alpha, AXP64, MIPS, and PowerPC architectures&hellip;. wow, remember when Windows ran on those ;-)</p>

<p><img src="http://www.dependencywalker.com/snapshot.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android FileObserver example in Xamarin/C#]]></title>
    <link href="http://sushihangover.github.io/android-fileobserver-example-in-xamarin-slash-c-number/"/>
    <updated>2015-11-14T03:08:38-08:00</updated>
    <id>http://sushihangover.github.io/android-fileobserver-example-in-xamarin-slash-c-number</id>
    <content type="html"><![CDATA[<p>This is from my answer on StackOverflow from a question that got closed. As not to lose it to the SO &lsquo;on-hold/close&rsquo; flush, I am re-posting it.</p>

<h1>Question</h1>

<p>How can you write an Android FileObserver in C#?</p>

<p>i.e. Native Java example:</p>

<pre><code>FileObserver observer = new FileObserver(imageUri.getPath()) {
    public String basePath;

    @Override
    public void onEvent(int event, String path) {
        String fullPath = basePath;
        if(path != null) {
            fullPath += path;
        }
        Log.d(TAG, "FILE: "+fullPath);
    }
};
observer.basePath = imageUri.getPath();
observer.startWatching();
</code></pre>

<h1>Answer</h1>

<p>Create a class that inherits from <a href="http://developer.xamarin.com/api/type/Android.OS.FileObserver/"><code>Android.OS.FileObserver</code></a>, you only need to implement the <a href="http://developer.xamarin.com/api/member/Android.OS.FileObserver.OnEvent/p/Android.OS.FileObserverEvents/System.String/"><code>OnEvent()</code></a> and one(+) Constructors. Its a really simple pattern after you see it once&hellip; ;-)</p>

<p><strong>Quick Notes:</strong></p>

<ul>
<li>Watch on a <strong>path</strong>, if you need to filter by file, do it in the OnEvent</li>
<li>Do not let your FileObserver object get GC&rsquo;d or your OnEvents will magically stop :-/</li>
<li>Remember to call StartWatching() in order to receive OnEvent calls</li>
</ul>


<p><strong>C# FileObserver Class:</strong></p>

<pre><code>using System;
using Android.OS;
using Android.Util;

namespace MyFileObserver
{
    public class MyPathObserver : Android.OS.FileObserver
    {
        static FileObserverEvents _Events = (FileObserverEvents.AllEvents);
        const string tag = "StackoverFlow";

        public MyPathObserver (String rootPath) : base(rootPath, _Events)
        {
            Log.Info(tag, String.Format("Watching : {0}", rootPath)); 
        }

        public MyPathObserver (String rootPath, FileObserverEvents events) : base(rootPath, events)
        {
            Log.Info(tag, String.Format("Watching : {0} : {1}", rootPath, events)); 
        }

        public override void OnEvent(FileObserverEvents e, String path)
        {
            Log.Info(tag, String.Format("{0}:{1}",path, e)); 
        }
    }
}
</code></pre>

<p><strong>Example Usage:</strong></p>

<pre><code>var pathToWatch = System.Environment.GetFolderPath (System.Environment.SpecialFolder.Personal);
// Do not let myFileObserver get GC'd, stash it's ref in an activty, or ...
myFileObserver = new MyPathObserver (pathToWatch);
myFileObserver.StartWatching (); // and StopWatching () when you are done...
var document = Path.Combine(pathToWatch, "StackOverFlow.txt");
button.Click += delegate {
    if (File.Exists (document)) {
        button.Text = "Delete File";
        File.Delete (document);
    } else {
        button.Text = "Create File";
        File.WriteAllText (document, "Foobar");
    }
};
</code></pre>

<p><strong>adb logcat Output (when clicking on the test button):</strong></p>

<pre><code>I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
I/StackoverFlow( 3596): StackOverFlow.txt:Delete
I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
I/StackoverFlow( 3596): StackOverFlow.txt:Delete
I/StackoverFlow( 3596): StackOverFlow.txt:Create
I/StackoverFlow( 3596): StackOverFlow.txt:Open
I/StackoverFlow( 3596): StackOverFlow.txt:Modify
I/StackoverFlow( 3596): StackOverFlow.txt:CloseWrite
</code></pre>
]]></content>
  </entry>
  
</feed>
