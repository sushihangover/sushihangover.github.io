<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SushiHangover]]></title>
  <link href="http://sushihangover.github.io/atom.xml" rel="self"/>
  <link href="http://sushihangover.github.io/"/>
  <updated>2015-06-08T00:01:27-07:00</updated>
  <id>http://sushihangover.github.io/</id>
  <author>
    <name><![CDATA[RobertN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress - Deploy and Update Git Source]]></title>
    <link href="http://sushihangover.github.io/octopress-deploy-and-update-git-source/"/>
    <updated>2015-06-07T23:39:42-07:00</updated>
    <id>http://sushihangover.github.io/octopress-deploy-and-update-git-source</id>
    <content type="html"><![CDATA[<p><img src="http://sushihangover.github.io/images/Octopress_logo.png" alt="" />
I use <a href="http://octopress.org">Octopress</a> for this <a href="https://github.com/sushihangover">GitHub</a> blog and can tend to forget to push the source to Github as it is not part of the &lsquo;rake deploy&rsquo;.</p>

<p>&lsquo;rake deploy&rsquo; only updates the master branch on Github on order to publish the website and instead of hack'ing the deploy function to handle pushing the &lsquo;'source&rsquo; branch also (waiting on the Octopress 3.0 release for that), I wrote a script to handle it all.</p>

<p>This <em>lazy</em> script that does all the steps that I would have to do manually but tend to never do. And it is in my root Octopress directory so it included in my source revisions ;-)</p>

<p>Nothing special, generates, deploys, adds all on the source branch along with a commit and push. For good measure it then garbage collects the repo to keep everything clean.</p>

<pre><code>#!/usr/bin/env bash
echo "Generate and deploying website"
rake generate
rake deploy
echo "Commiting and pushing source files"
git add --all; 
git commit -m "New posts"; 
git push 
git gc
pushd _deploy
git gc
popd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS-X Brew : Clean It Up]]></title>
    <link href="http://sushihangover.github.io/os-x-brew-clean-it-up/"/>
    <updated>2015-06-07T20:10:40-07:00</updated>
    <id>http://sushihangover.github.io/os-x-brew-clean-it-up</id>
    <content type="html"><![CDATA[<p><img src="http://sushihangover.github.io/images/Homebrew_logo.png" alt="" /></p>

<p>I&rsquo;m a big fan of <a href="http://brew.sh">Homebrew</a> on OS-X and it normally it works so well that you just do not think about it. That is a very good thing, it just works, does not get in your way and anything is good.</p>

<p>While I was updating/upgrading packages today, I ended up running &lsquo;brew info&rsquo;:</p>

<pre><code>brew info 
146 kegs, 171208 files, 8.0G
</code></pre>

<p>I was surprised that I had 8 GBs of hard drive space consumed by brew packages. If you did not know it, brew does not auto-purge older packages.</p>

<blockquote><p>From  FAQ:<br/>By default, Homebrew does not uninstall old versions of a formula, so over time you will accumulate old versions.</p><p>https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md</p></blockquote>


<p>It had been a long time since I did a cleanup in brew and I had well over a hundred older versions of various packages that I was not using (i.e. one that were not pinned; <em>brew pin {FORMULA</em>), so I ran the cleanup and freed up 7.3 GB of drive space.</p>

<pre><code>brew info 
146 kegs, 63167 files, 2.7G
</code></pre>

<p>Clean up everything at once:</p>

<pre><code>brew cleanup
</code></pre>

<p>Clean up just one formula:</p>

<pre><code>brew cleanup {FORMULA}
</code></pre>

<p>Do a dry run to see what would be cleaned up:</p>

<pre><code>brew cleanup -n
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript 3.2.6001 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-6001-posted/"/>
    <updated>2015-06-04T08:12:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-6001-posted</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png">  I posted up the PlayScript compiler 3.2.6001 to <a href="https://github.com/sushihangover/playscript">GitHub</a> which is a merge of the remote-tracking branch &lsquo;upstream/mono-3.2.6-branch&rsquo; into playscript-mono</p>

<p>FYI: I have been using tags on the playscript-mono branch to mark each of these PlayScript merges. It is a clean and lightweight way to capture and identity these version on the timeline:</p>

<pre><code>git tag --list | grep playscript
playscript-3.2.2002
playscript-3.2.3001
playscript-3.2.3003
playscript-3.2.4001
playscript-3.2.5001
playscript-3.2.6001
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Renaming a Git Tag]]></title>
    <link href="http://sushihangover.github.io/git-renaming-a-got-tag/"/>
    <updated>2015-06-04T07:39:49-07:00</updated>
    <id>http://sushihangover.github.io/git-renaming-a-got-tag</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/gitlogo.png">  Everyone screws up, and that comes to finger flops when typing that new tag name.</p>

<p>If the tag is only local, it is two step process, create a new tag from the old tag and delete the old tag:</p>

<pre><code>git tag new_tag_name old_tag_name
git tag -d old_tag_name
</code></pre>

<p>But if you have pushed that bad tag name to a remote, then you have another two steps. Deleting that remote tag makes use of the refspec reference and only using a destination with an &lsquo;'empty&rsquo; source. Assuming your remote is named origin (git remote -v), than this what you need to do (<u>REMEMBER TO INCLUDE THAT <strong>COLON</strong></u>):</p>

<pre><code>git push origin :refs/tags/old_tag_name
</code></pre>

<p>And push the new tag to your remote so everyone else will receive that new tag on a pull:</p>

<pre><code>git push origin --tags
</code></pre>

<p><strong>Note</strong>: The colon isn&rsquo;t a &ldquo;delete flag&rdquo;. Git push and git pull both accept zero or more refspecs as their final argument(s). Now read about <a href="http://git-scm.com/book/en/v2/Git-Internals-The-Refspec">refspecs</a>, really read it&hellip; . A colon separates source from destination in a refspec. The command git push origin :foo has an empty source and essentially says &ldquo;push nothing to branch foo of origin&rdquo;, or, in other words, &ldquo;make branch foo on origin not exist&rdquo;.</p>

<p><strong>Sub-Note</strong>: This is NOT the same as pushing an <strong>empty</strong> branch or tag, you really are pushing &lsquo;nothing&rsquo; and thus with nothing to reference that tag vanishes (Well I&rsquo;m assuming it exists somewhere till <a href="https://www.kernel.org/pub/software/scm/git/docs/git-gc.html">garbage collection</a> is run)</p>

<p><strong>Sub-Sub-Note</strong>: ;-) Yes, I agree with a lot of others that instead of using an empty source in the ref spec it would be <em>waaaayyyyy</em> more initiative to allow a remote parameter to be passed to the existing branch and tag delete options to do this type of deletion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Getting a List of Files Changed Between Branches]]></title>
    <link href="http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches/"/>
    <updated>2015-06-04T07:01:32-07:00</updated>
    <id>http://sushihangover.github.io/git-getting-a-list-of-files-changed-between-branches</id>
    <content type="html"><![CDATA[<p>Getting a list of changed files between to different branches or tags could not be any easier when using the &lsquo;&ndash;name-only&rsquo; diff option:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6

configure.in
mcs/class/Facades/Makefile
mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/Makefile
...
</code></pre>

<p>A quickie to get the number of files changed:</p>

<pre><code>git diff --name-only mono-3.2.5 mono-3.2.6|wc -l
      28
</code></pre>

<p>And using the &lsquo;&ndash;name-status&rsquo; option can get you a nice two column output with the change type attribute with each file name, makes it easy to pipe to those maintenace scripts.</p>

<pre><code>git diff --name-status mono-3.2.5 mono-3.2.6
M       configure.in
M       mcs/class/Facades/Makefile
M       mcs/class/Facades/System.Dynamic.Runtime/TypeForwarders.cs
A       mcs/class/Facades/System.Runtime.InteropServices.WindowsRuntime/AssemblyInfo.cs
</code></pre>

<p><strong>Note</strong>: You can feed the &lsquo;&ndash;no-color&rsquo; option to make sure that none of those ansi escape codes get send down-stream in your pipe.</p>

<p><strong>Note</strong>: &lsquo;&ndash;'porcelain&rsquo; works within the diff mode sub-option but not as a primary option.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript 3.2.5001 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-5001-posted/"/>
    <updated>2015-06-04T06:12:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-5001-posted</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png">  I posted up the PlayScript compiler 3.2.5001 to <a href="https://github.com/sushihangover/playscript">GitHub</a> which is a merge of the remote-tracking branch &lsquo;upstream/mono-3.2.5-branch&rsquo; into playscript-mono</p>

<p>Been knocking these simple minors versions out, dreading the upcoming Mono 4.x changes&hellip;</p>

<p>Setting up a GitHub organization for PlayScript, I&rsquo;ll let you know when it is up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript 3.2.4001 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-4001-posted/"/>
    <updated>2015-06-03T20:04:56-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-4001-posted</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/PlayscriptLogo_small.png">  I posted up the PlayScript compiler 3.2.4001 to <a href="https://github.com/sushihangover/playscript">GitHub</a> which is a merge of the remote-tracking branch &lsquo;upstream/mono-3.2.4-branch&rsquo; into playscript-mono</p>

<p>Have fun&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playscript 3.2.3003 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-3003-posted/"/>
    <updated>2015-06-03T19:22:01-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-3003-posted</id>
    <content type="html"><![CDATA[<p><img src="http://sushihangover.github.io/images/PlayscriptLogo_small.png" alt="" /></p>

<p>I posted up the PlayScript compiler 3.2.3003 to <a href="https://github.com/sushihangover/playscript">Github</a> which fixes a bunch of build issues, including a clang/ld failure if you are running the latest and greatest version from Apple.</p>

<p>Root repo : playscript-small-build.sh</p>

<pre><code>./autogen.sh --with-mcs-docs=no --with-profile2=no --with-profile4=no --with-profile4_5=yes --with-moonlight=no --with-tls=posix --enable-nls=no --prefix=$HOME/playscript-install
make
make install
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmartGit - the Best Git GUI There Is... And Its Free]]></title>
    <link href="http://sushihangover.github.io/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free/"/>
    <updated>2015-06-03T15:06:35-07:00</updated>
    <id>http://sushihangover.github.io/smartgit-the-best-git-gui-there-is-dot-dot-dot-and-its-free</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://sushihangover.github.io/images/smartgit.png">  <span class='pullquote-right' data-pullquote='SmartGit is free for non-commercial use and runs on Mac OS X, Windows and Linux'>  <a href="http://www.syntevo.com">Syntevo&rsquo;s</a> <a href="http://www.syntevo.com/smartgit/">SmartGit</a> is a Git client with Mercurial and Subversion support, and while I can not comment on its mg or svn support, its git and GitHub support is amazing. And the best thing is SmartGit is free for non-commercial use and runs on Mac OS X, Windows and Linux. Commercial licenses seem to be very reasonable and on par with other commercial git products. </span></p>

<p>When you are merging or rebasing hundreds of changing, doing that by hand from the cmd line is dreadful&hellip; I&rsquo;ve been merging the newer branches of Mono into PlayScript and it can be painful since the Apache open-source version PlayScript was pulled by Zynga from Github two years ago without warning.  When you are looking at hundreds of commits, and in a couple of cases, thousands of changes in between release tags and branches of Mono, doing that via the cmd line is doable, but it will give you nightmares. The SmartGui interface just works; walking the source tree, staging/unstaging, ours/theirs resolver, 3-way visual resolver/merge, markdown support, Github integration,  etc&hellip; is just fast and clean and once you learn a few keystroke shortcuts that merge do done in a heartbeat. ;-)</p>

<p>I&rsquo;ve used a couple of <a href="http://www.git-scm.com/downloads/guis">other git GUIs</a> and merging and rebasing in them just not seem intuitive and the speed of their interfaces when dealing with a repo as large as Mono is killing me and I&rsquo;ve ended up back in the cmd line.</p>

<p>I&rsquo;m not going to do a <a href="http://www.git-scm.com/downloads/guis">full and comparative review</a> as this product is free for non-commercial use, so just download a copy and take it for a test drive yourself. I doubt you would will be disappointed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript 3.2.3001 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-3001-posted/"/>
    <updated>2015-06-03T06:10:59-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-3001-posted</id>
    <content type="html"><![CDATA[<p><img src="http://sushihangover.github.io/images/PlayscriptLogo_small.png" alt="" /></p>

<p>I posted up the PlayScript compiler 3.2.3001 to <a href="https://github.com/sushihangover/playscript">Github</a> which is a merge of the mono-3.2.3 tag into the playscript-mono branch.</p>

<p>To speed up testing the merge, I am disabling a number of options in the build. Please log any issues via <a href="https://github.com/sushihangover/playscript/issues">Github</a></p>

<pre><code>./configure --with-mcs-docs=no --with-profile2=no --with-profile4=no --with-profile4_5=yes --with-moonlight=no --with-tls=posix --enable-nls=no --prefix=/Users/administrator/playscript-install
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayScript 3.2.2002 Posted]]></title>
    <link href="http://sushihangover.github.io/playscript-3-dot-2-2002-posted/"/>
    <updated>2015-05-31T22:16:23-07:00</updated>
    <id>http://sushihangover.github.io/playscript-3-dot-2-2002-posted</id>
    <content type="html"><![CDATA[<p><img src="http://sushihangover.github.io/images/PlayscriptLogo.png" alt="" /></p>

<p>I posted up the PlayScript compiler (3.2.2002). This is the last posted release of the Apache licensed open-source version before Zynga pulled it from public domain.</p>

<p>I will be migrating it to the Mono 4.x compiler in the days and weeks ahead before working on finishing and getting the ActionScript language side stable (feature complete?). Not really looking forwarded to the Mono 4.x migration as the number of internal API changes to the mcs compiler since the 3.2.0 release is quite extensive.</p>

<p>If you want to compile and use the current 3.2.2002 release, just autogen.sh like normal.</p>

<p>Note: Due to dependency updates on OS-X since Mono 3.2 was release, I had to supply &ldquo; <u>&ndash;with-tls</u>&rdquo; option as it was auto-selecting <strong>__thread</strong> instead of <strong>_posix</strong>.</p>

<pre><code>./autogen.sh --with-tls=posix --enable-nls=no --prefix=/Users/administrator/mono-install
</code></pre>

<p>Note: Since this is mono 3.x, to build you will need gmcs during the bootstrap process. If you only have Mono 4.x installed, you will need a 3.x mono install to proceed. I just did a separate mono checkout of 3.2 and built it with a different install prefix location. When doing an initial/full compile and install, you can add this 3.2 install location to the front of your PATH and the default mono bootstrap will work cleanly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping a GitHub Fork Up to Date With Origin Repo]]></title>
    <link href="http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo/"/>
    <updated>2015-05-29T17:22:05-07:00</updated>
    <id>http://sushihangover.github.io/keeping-a-github-fork-up-to-date-with-origin-repo</id>
    <content type="html"><![CDATA[<p>In the PlayScript work that I am doing on the Mono mcs compiler, keeping the PlayScript compiler in-sync with Mono&rsquo;s mcs can be a pain due to the large number of changes that occur on that repo.</p>

<p>While I have different &lsquo;tricks&rsquo; to try to help merging, the first thing is you have to keep one branch of your fork in-sync with the original repo that your forked, mono/mono.git in my case.</p>

<p>I created two local clones of my GitHub forked repo and added an &lsquo;upstream&rsquo; remote to the original mono repo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote -v
</span><span class='line'>origin    https://github.com/sushihangover/PlayScript.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin    https://github.com/sushihangover/PlayScript.git <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>upstream  https://github.com/mono/mono.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>upstream  https://github.com/mono/mono.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One local clone is named <strong>PlayScript-master</strong> and the other is <strong>PlayScript</strong>.</p>

<p>The <strong>PlayScript-master</strong> is used to keep in-sync with the upstream repo, build the bleed-edge mono framework and compiler and run the mono unit-tests. This is so I always know what the current mono master looks like and how the unit tests are running so I can review the changes I am making in the local <strong>PlayScript</strong> repo and make sure that I am not injecting regression failures in the C# side of the compiler. (I&rsquo;ll blog about that later). While the <strong>PlayScript-master repo</strong> will always Fast-forward on a &ldquo;<em>git merge upstream/master</em>&rdquo;, the PlayScript repo will not, I only merge one branch/tag mono release at a time to <em>master branch</em> and then merge/rebase <em>playscript branch</em> in order to maintain my sanity (some of the internal API changes on even Mono minor releases can drive a person to drink).</p>

<p>So to quickly update my master mono as it will always fast-forward, I have a script in the root repo called <strong>mono-master-update-install.sh</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ../PlayScript-master
</span><span class='line'>git fetch upstream
</span><span class='line'>git merge upstream/master
</span><span class='line'>git push origin
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: You can add the mono unit tests to the end of that script if you wish.</p>

<p><strong>Note</strong>:: I have the <strong>PlayScript-master</strong> <em>master branch</em> installing into a prefix of <u>~/mono-install</u> and the <strong>PlayScript</strong> <em>playscript branch</em> installing into the <u>~/playscript-install</u>. That way I can always switch quickly between the installed &lsquo;released&rsquo; Mono framework, the pure bleeding-edge mono build and the PlayScript build with a simple path change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undo Your Most Recent (Screwed Up) Git Merge]]></title>
    <link href="http://sushihangover.github.io/undo-your-most-recent-screwed-up-git-merge/"/>
    <updated>2015-05-28T18:24:08-07:00</updated>
    <id>http://sushihangover.github.io/undo-your-most-recent-screwed-up-git-merge</id>
    <content type="html"><![CDATA[<p>Ok, you just have a major brain-fart and you did a merge from a remote that has more conflicts than the Sahel region&hellip; before you do ANYTHING to your local repo, just do a:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git reset --merge ORIG_HEAD
</span></code></pre></td></tr></table></div></figure>


<p>Or, depending upon your git version, you can also:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge --abort
</span></code></pre></td></tr></table></div></figure>


<p>The merge is gone and that list of 1000+ file conflicts that scrolled endlessly when you hit the return key will not haunt your dreams tonight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Local Repo as a Remote to a Different Local Repo]]></title>
    <link href="http://sushihangover.github.io/add-a-local-repo-as-a-remote-to-a-different-local-repo/"/>
    <updated>2015-05-27T19:34:36-07:00</updated>
    <id>http://sushihangover.github.io/add-a-local-repo-as-a-remote-to-a-different-local-repo</id>
    <content type="html"><![CDATA[<p>Have a two local repos that you what to mash and merge together so you can live with just one local/remote repo?</p>

<p>Will, you are in luck, git allows a file based uri to be used vs. using https or git protocols.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add NewRemoteName /file/path/to/existing/repo/.git
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add 2013nov22 /Users/administrator/Documents/Code/playscript/playscript-mono-2013nov22-compile/.git
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Accept Another Branch's Changes Without Generated Conflicts]]></title>
    <link href="http://sushihangover.github.io/git-accept-another-branchs-changes-without-generated-conflicts/"/>
    <updated>2015-05-24T17:54:37-07:00</updated>
    <id>http://sushihangover.github.io/git-accept-another-branchs-changes-without-generated-conflicts</id>
    <content type="html"><![CDATA[<p>I not sure when exactly <strong>-Xtheirs</strong> was added to git (~1.7.? timeframe), but it is a great and fast way to replace (overlay) all the changed files from one branch on top of another one without doing an interactive accept of each and every file, or doing a forced merge, etc&hellip; Great for document, multi-media files and other content that gets processed/accepted via a different <strong>pipeline</strong> and in a different branch and needs moved into a production/release branch.</p>

<p>Assuming you are already sitting in the branch that you wish to merge/replace those files <em>into</em>, you can do a <strong>git merge</strong> with the  <strong>-Xtheirs</strong> option and supply the <strong>remote/branch</strong> that the files are <em>coming from</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge -Xtheirs contentpipeline/version123
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Commit Only Specific Staged Files]]></title>
    <link href="http://sushihangover.github.io/git-commit-only-specific-staged-files/"/>
    <updated>2015-05-14T17:34:13-07:00</updated>
    <id>http://sushihangover.github.io/git-commit-only-specific-staged-files</id>
    <content type="html"><![CDATA[<p>I needed to commit a limited number of changes that were already staged.</p>

<p>In the early days of git, I remember having to stash all the changes and pop only the changes that I need to commit and push. I&rsquo;m not sure when the &lsquo;&ndash;only&rsquo; option was added to commit, but it sure saves a bunch of extra steps:</p>

<pre><code>git commit --only configure.in
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Overlay a Directory With a Different Branch Version]]></title>
    <link href="http://sushihangover.github.io/git-overlay-a-directory-with-a-different-branch-version/"/>
    <updated>2015-05-11T16:10:28-07:00</updated>
    <id>http://sushihangover.github.io/git-overlay-a-directory-with-a-different-branch-version</id>
    <content type="html"><![CDATA[<p>I was trying to overlay just one directory within one git branch with the files from another branch (actually a tag in my case)) and could find a way to do it with just one git command.</p>

<p>So using git ls-files and xargs this is my solution:</p>

<pre><code>git ls-files |xargs -J %  git checkout -f mono-3.2.4 -- %
</code></pre>

<p>If anyone has a way to do this without using xargs I&rsquo;m all ears&hellip; ;-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC 4.9 Is Out With ARM Enhancements]]></title>
    <link href="http://sushihangover.github.io/gcc-4-dot-9-is-out-with-arm-enhancements/"/>
    <updated>2014-04-22T18:35:15-07:00</updated>
    <id>http://sushihangover.github.io/gcc-4-dot-9-is-out-with-arm-enhancements</id>
    <content type="html"><![CDATA[<p>GCC 4.9 is out with in the wild now with a long list of ARM enhancements. I&rsquo;m hoping to look at into a few of the items on their <a href="http://gcc.gnu.org/gcc-4.9/changes.html">change/log list</a>.</p>

<p>One of them is the &ldquo;<strong>-mslow-flash-data</strong>&rdquo;, I&rsquo;m really interested in what they are doing when this option is used. Using QEMU and LLVM I create variable and function usage maps during the last stage of speed optimizations and tag the high use items to be moved to RX to any remaining XRW (RAM) during startup in the reset_handler (would really be nice to burn that routine in the feedback loop of the LLVM profiler, need to create perf records that could be fed to the <a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-April/072138.html">LLVM AutoFDO Converter</a> that Google did and have it spew out &lsquo;linker scriptets&rsquo;&hellip;. too many ideas, not enough time at get them all done ;-)</p>

<p>So what is listed in the man for &ldquo;-mslow-flash-data&rdquo; is:
<strong>Assume loading data from flash is slower than fetching instruction. Therefore literal load is minimized for better performance. This option is only supported when compiling for ARMv7 M-profile and off by default.</strong></p>

<p><span class='pullquote-right' data-pullquote='Is ARMv6 M-profile really excluded in whatever they are doing with mslow-flash-data? Only M3 and M4x support? Need to find the commit(s) for this feature.'>
Is ARMv6 M-profile really excluded in whatever they are doing with mslow-flash-data? Only M3 and M4x support? Need to find the commit(s) for this feature.</p>

<p>Also everyone always loves items like: <strong>A number of code generation improvements for Thumb2 to reduce code size when compiling for the M-profile processors</strong>. Free code size reduction is always a great thing when during with those dirt-cheap <a href="http://www.nuvoton.com/NuvotonMOSS/Community/ProductInfo.aspx?tp_GUID=5dbf7d7a-b6df-4fe1-91c9-063449500ce7">Nuvoton NuMicro M0 chips</a>, well, assuming it comes with using &ldquo;-Os&rdquo; and not with a speed impact when throughput matters more&hellip; small is good, but it is not always what everyone needs.</p>

<p>And the &ldquo;<a href="http://en.wikipedia.org/wiki/Register_allocation">Local Register Allocator</a>&rdquo; is turned on for ARM by default:
<code>The Local Register Allocator, introduced in GCC 4.8.0 for ia32 and x86-64 targets only, is now used also on the Aarch64, ARM, S/390 and ARC targets by default..</code>
</span></p>

<p>Getting it compiled on OS-X proved to be a pain as I do not have a native build of GCC, just clang acting as gcc, and could not get a  ARM-NONE-EABI 4.9.0 version built using clang. One of the issues that I could not work around was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clang: error: unsupported option '-static-libgcc'</span></code></pre></td></tr></table></div></figure>


<p>Well, duh&hellip;, clang does not support that option, but not clear on why that is showing up under the 4.9.0 build using the same configure options as 4.8.x. Manually hacking on the make files to get passed this and I ended up getting into other issues, so I give up and built an OS-X &lsquo;native&rsquo; gcc that I then used to build the ARM-NONE-EABI cross-compiler to get around the orginal &ldquo;-static-libgcc&rdquo; issue. Never had any problems doing a &ldquo;make all-gcc&rdquo; or &ldquo;make all&rdquo; to build gcc 4.8.x with clang->gcc before.</p>

<p>So I build a native version on the master branch (4.10.x now):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gcc --version
</span><span class='line'>gcc (GCC) 4.10.0 20140422 (experimental)
</span><span class='line'>Copyright (C) 2014 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the source for copying conditions.  There is NO
</span><span class='line'>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></code></pre></td></tr></table></div></figure>


<p>And then used that to build my arm-none-eabi cross-compiler,  yep, living on the bleeding edge with gcc and LLVM ;-)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./arm-none-eabi-gcc --version
</span><span class='line'>arm-none-eabi-gcc (GCC) 4.10.0 20140422 (experimental)
</span><span class='line'>Copyright (C) 2014 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the source for copying conditions.  There is NO
</span><span class='line'>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</span><span class='line'>...
</span><span class='line'>  Known ARM architectures (for use with the -march= option):
</span><span class='line'>    armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5e armv5t armv5te armv6
</span><span class='line'>    armv6-m armv6j armv6k armv6s-m armv6t2 armv6z armv6zk armv7 armv7-a armv7-m
</span><span class='line'>    armv7-r armv7e-m armv7ve armv8-a armv8-a+crc iwmmxt iwmmxt2 native
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>FYI: I&rsquo;m on OS-X 10.9.2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Software  OS X 10.9.2 (13C64)
</span><span class='line'>clang --version
</span><span class='line'>Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
</span><span class='line'>gcc --version
</span><span class='line'>Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
</span><span class='line'>Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
</span><span class='line'>Target: x86_64-apple-darwin13.1.0
</span><span class='line'>Thread model: posix</span></code></pre></td></tr></table></div></figure>


<p>ARM enhancements from the change list include:</p>

<ul>
<li><strong>ARM:</strong></li>
<li>Use of Advanced SIMD (Neon) for 64-bit scalar computations has been disabled by default. This was found to generate better code in only a small number of cases. It can be turned back on with the -mneon-for-64bits option.</li>
<li>Further support for the ARMv8-A architecture, notably implementing the restriction around IT blocks in the Thumb32 instruction set has been added. The -mrestrict-it option can be used with -march=armv7-a or the -march=armv7ve options to make code generation fully compatible with the deprecated instructions in ARMv8-A.</li>
<li>Support has now been added for the ARMv7ve variant of the architecture. This can be used by the -march=armv7ve option.</li>
<li>The ARMv8-A crypto and CRC instructions are now supported through intrinsics and are available through the -march=armv8-a+crc and mfpu=crypto-neon-fp-armv8 options.</li>
<li>LRA is now on by default for the ARM target. This can be turned off using the -mno-lra option. This option is purely transitionary command line option and will be removed in a future release. We are interested in any bug reports regarding functional and performance regressions with LRA.</li>
<li><strong>A new option -mslow-flash-data to improve performance of programs fetching data on slow flash memory has now been introduced for the ARMv7-M profile cores.</strong></li>
<li>A new option -mpic-data-is-text-relative for targets that allows data segments to be relative to text segments has been added. This is on by default for all targets except VxWorks RTP.</li>
<li>A number of infrastructural changes have been made to both the ARM and AArch64 backends to facilitate improved code-generation.</li>
<li>GCC now supports Cortex-A12 and the Cortex-R7 through the -mcpu=cortex-a12 and -mcpu=cortex-r7 options.</li>
<li>GCC now has tuning for the Cortex-A57 and Cortex-A53 through the -mcpu=cortex-a57 and -mcpu=cortex-a53 options.
Initial big.LITTLE tuning support for the combination of Cortex-A57 and Cortex-A53 was added through the -mcpu=cortex-a57.cortex-a53 option. Similar support was added for the combination of Cortex-A15 and Cortex-A7 through the -mcpu=cortex-a15.cortex-a7 option.</li>
<li>Further performance optimizations for the Cortex-A15 and the Cortex-M4 have been added.</li>
<li><p><strong> A number of code generation improvements for Thumb2 to reduce code size when compiling for the M-profile processors.</strong></p></li>
<li><p><strong>AArch64:</strong></p></li>
<li>The ARMv8-A crypto and CRC instructions are now supported through intrinsics. These are enabled when the architecture supports these and are available through the -march=armv8-a+crc and -march=armv8-a+crypto options.</li>
<li>Initial support for ILP32 has now been added to the compiler. This is now available through the command line option -mabi=ilp32. + Support for ILP32 is considered experimental as the ABI specification is still beta.</li>
<li>Coverage of more of the ISA including the SIMD extensions has been added. The Advanced SIMD intrinsics have also been improved.</li>
<li>The new local register allocator (LRA) is now on by default for the AArch64 backend.</li>
<li>The REE (Redundant extension elimination) pass has now been enabled by default for the AArch64 backend.</li>
<li>Tuning for the Cortex-A53 and Cortex-A57 has been improved.</li>
<li>Initial big.LITTLE tuning support for the combination of Cortex-A57 and Cortex-A53 was added through the -mcpu=cortex-a57.cortex-a53 option.</li>
<li>A number of structural changes have been made to both the ARM and AArch64 backends to facilitate improved code-generation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qemu 2.0.0 Is Released (or Maybe 1.7.9)]]></title>
    <link href="http://sushihangover.github.io/qemu-2-dot-0-0-is-released-as-1-dot-7-9/"/>
    <updated>2014-04-17T23:20:36-07:00</updated>
    <id>http://sushihangover.github.io/qemu-2-dot-0-0-is-released-as-1-dot-7-9</id>
    <content type="html"><![CDATA[<p><a href="http://wiki.qemu.org/Main_Page"><img class="left" src="http://sushihangover.github.io/images/QEMU_logo.png" title="&#34;QEMU&#34;" alt="&#34;QEMU&#34;"></a> QEMU 2.0.0 is now <a href="http://lists.nongnu.org/archive/html/qemu-devel/2014-04/msg02734.html">released</a>.</p>

<p>The full list of changes are available at: <a href="http://wiki.qemu.org/ChangeLog/2.0">http://wiki.qemu.org/ChangeLog/2.0</a></p>

<p>It appears that doing a checkout of tag &lsquo;v2.0.0&rsquo;, build and install will produce a binary that reports version 1.7.9</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status
</span><span class='line'>HEAD detached at v2.0.0
</span><span class='line'>nothing to commit, working directory clean
</span><span class='line'>qemu-system-arm --version
</span><span class='line'>QEMU emulator version 1.7.93, Copyright (c) 2003-2008 Fabrice Bellard</span></code></pre></td></tr></table></div></figure>


<p>I did a quick look and they are pulling the version during the ./configure stage so since I am always on the master (bleed-edge) branch, my installed version shows up as 1.7.9. You will need to checkout, <strong>configure</strong>, build and install to produce a binary that has the correct version (<del>QEMUVERSION</del>) assigned:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-arm --version
</span><span class='line'>QEMU emulator version 2.0.0, Copyright (c) 2003-2008 Fabrice Bellard</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[$30 60MSPS Logic Analyzer - Logic Pirate]]></title>
    <link href="http://sushihangover.github.io/0-60msps-logic-analyzer/"/>
    <updated>2014-04-15T20:16:37-07:00</updated>
    <id>http://sushihangover.github.io/0-60msps-logic-analyzer</id>
    <content type="html"><![CDATA[<p><a href="http://http://dangerousprototypes.com"><img class="left" src="http://sushihangover.github.io/images/dangerous_logo.png" title="&#34;Dangerous Prototypes&#34;" alt="&#34;Dangerous Prototypes&#34;"></a> I do not do a lot of product promotions, but this Logic Analyser from Dangerous Prototypes is so sweet! It is such a simple hardware design, pulled together with some great programming and serial ram overclocking. For $30USD you get an 8 channel, 256k sample, 60 Mhz(!!! - overclocked) logic analyser that supports the SUMP logic analyzer protocol and thus can use the Logic Sniffer (An alternative OLS client), another great open source product.</p>

<p>This item is on my list now for future debugging of my bare-metal ARM designs.</p>

<p>So check it out yourself:</p>

<p>DP Blog post: <a href="http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/">http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/</a></p>

<p>Product page: <a href="http://dangerousprototypes.com/docs/Logic_Pirate">http://dangerousprototypes.com/docs/Logic_Pirate</a></p>

<p>Available from Seeed @ <a href="http://www.seeedstudio.com/depot/Logic-Pirate-p-1750.html">http://www.seeedstudio.com/depot/Logic-Pirate-p-1750.html</a></p>

<p>Client Software: <a href="http://www.lxtreme.nl/ols/">Logic Sniffer (An alternative OLS client)</a></p>
]]></content>
  </entry>
  
</feed>
